{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='pubSubEventSource', url='', help='PubSubEventSource refers to event-source for GCP PubSub related events.'),
  '#credentialSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  credentialSecret: {
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { credentialSecret+: { key: key } },
    '#withName':: d.fn(help='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { credentialSecret+: { name: name } },
    '#withOptional':: d.fn(help='Specify whether the Secret or its key must be defined', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { credentialSecret+: { optional: optional } },
  },
  '#withCredentialsFile':: d.fn(help='', args=[d.arg(name='credentialsFile', type=d.T.string)]),
  withCredentialsFile(credentialsFile): { credentialsFile: credentialsFile },
  '#withDeleteSubscriptionOnFinish':: d.fn(help='', args=[d.arg(name='deleteSubscriptionOnFinish', type=d.T.boolean)]),
  withDeleteSubscriptionOnFinish(deleteSubscriptionOnFinish): { deleteSubscriptionOnFinish: deleteSubscriptionOnFinish },
  '#withJsonBody':: d.fn(help='', args=[d.arg(name='jsonBody', type=d.T.boolean)]),
  withJsonBody(jsonBody): { jsonBody: jsonBody },
  '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
  withMetadata(metadata): { metadata: metadata },
  '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
  withMetadataMixin(metadata): { metadata+: metadata },
  '#withProjectID':: d.fn(help='', args=[d.arg(name='projectID', type=d.T.string)]),
  withProjectID(projectID): { projectID: projectID },
  '#withSubscriptionID':: d.fn(help='', args=[d.arg(name='subscriptionID', type=d.T.string)]),
  withSubscriptionID(subscriptionID): { subscriptionID: subscriptionID },
  '#withTopic':: d.fn(help='', args=[d.arg(name='topic', type=d.T.string)]),
  withTopic(topic): { topic: topic },
  '#withTopicProjectID':: d.fn(help='', args=[d.arg(name='topicProjectID', type=d.T.string)]),
  withTopicProjectID(topicProjectID): { topicProjectID: topicProjectID },
  '#mixin': 'ignore',
  mixin: self,
}
