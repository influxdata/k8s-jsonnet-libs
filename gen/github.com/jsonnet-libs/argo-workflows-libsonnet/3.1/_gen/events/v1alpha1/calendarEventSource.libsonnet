{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='calendarEventSource', url='', help=''),
  '#persistence':: d.obj(help=''),
  persistence: {
    '#catchup':: d.obj(help=''),
    catchup: {
      '#withEnabled':: d.fn(help='', args=[d.arg(name='enabled', type=d.T.boolean)]),
      withEnabled(enabled): { persistence+: { catchup+: { enabled: enabled } } },
      '#withMaxDuration':: d.fn(help='', args=[d.arg(name='maxDuration', type=d.T.string)]),
      withMaxDuration(maxDuration): { persistence+: { catchup+: { maxDuration: maxDuration } } },
    },
    '#configMap':: d.obj(help=''),
    configMap: {
      '#withCreateIfNotExist':: d.fn(help='', args=[d.arg(name='createIfNotExist', type=d.T.boolean)]),
      withCreateIfNotExist(createIfNotExist): { persistence+: { configMap+: { createIfNotExist: createIfNotExist } } },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { persistence+: { configMap+: { name: name } } },
    },
  },
  '#withExclusionDates':: d.fn(help='', args=[d.arg(name='exclusionDates', type=d.T.array)]),
  withExclusionDates(exclusionDates): { exclusionDates: if std.isArray(v=exclusionDates) then exclusionDates else [exclusionDates] },
  '#withExclusionDatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='exclusionDates', type=d.T.array)]),
  withExclusionDatesMixin(exclusionDates): { exclusionDates+: if std.isArray(v=exclusionDates) then exclusionDates else [exclusionDates] },
  '#withInterval':: d.fn(help='Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...', args=[d.arg(name='interval', type=d.T.string)]),
  withInterval(interval): { interval: interval },
  '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
  withMetadata(metadata): { metadata: metadata },
  '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
  withMetadataMixin(metadata): { metadata+: metadata },
  '#withSchedule':: d.fn(help='', args=[d.arg(name='schedule', type=d.T.string)]),
  withSchedule(schedule): { schedule: schedule },
  '#withTimezone':: d.fn(help='', args=[d.arg(name='timezone', type=d.T.string)]),
  withTimezone(timezone): { timezone: timezone },
  '#withUserPayload':: d.fn(help='UserPayload will be sent to sensor as extra data once the event is triggered\n+optional\nDeprecated: will be removed in v1.5. Please use Metadata instead.', args=[d.arg(name='userPayload', type=d.T.string)]),
  withUserPayload(userPayload): { userPayload: userPayload },
  '#mixin': 'ignore',
  mixin: self,
}
