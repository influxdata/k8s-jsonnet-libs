{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='awsLambdaTrigger', url='', help=''),
  '#accessKey':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  accessKey: {
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { accessKey+: { key: key } },
    '#withName':: d.fn(help='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { accessKey+: { name: name } },
    '#withOptional':: d.fn(help='Specify whether the Secret or its key must be defined', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { accessKey+: { optional: optional } },
  },
  '#secretKey':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  secretKey: {
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { secretKey+: { key: key } },
    '#withName':: d.fn(help='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { secretKey+: { name: name } },
    '#withOptional':: d.fn(help='Specify whether the Secret or its key must be defined', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { secretKey+: { optional: optional } },
  },
  '#withFunctionName':: d.fn(help='FunctionName refers to the name of the function to invoke.', args=[d.arg(name='functionName', type=d.T.string)]),
  withFunctionName(functionName): { functionName: functionName },
  '#withInvocationType':: d.fn(help="Choose from the following options.\n\n   * RequestResponse (default) - Invoke the function synchronously. Keep\n   the connection open until the function returns a response or times out.\n   The API response includes the function response and additional data.\n\n   * Event - Invoke the function asynchronously. Send events that fail multiple\n   times to the function's dead-letter queue (if it's configured). The API\n   response only includes a status code.\n\n   * DryRun - Validate parameter values and verify that the user or role\n   has permission to invoke the function.\n+optional", args=[d.arg(name='invocationType', type=d.T.string)]),
  withInvocationType(invocationType): { invocationType: invocationType },
  '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
  withParameters(parameters): { parameters: if std.isArray(v=parameters) then parameters else [parameters] },
  '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
  withParametersMixin(parameters): { parameters+: if std.isArray(v=parameters) then parameters else [parameters] },
  '#withPayload':: d.fn(help='Payload is the list of key-value extracted from an event payload to construct the request payload.', args=[d.arg(name='payload', type=d.T.array)]),
  withPayload(payload): { payload: if std.isArray(v=payload) then payload else [payload] },
  '#withPayloadMixin':: d.fn(help='Payload is the list of key-value extracted from an event payload to construct the request payload.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='payload', type=d.T.array)]),
  withPayloadMixin(payload): { payload+: if std.isArray(v=payload) then payload else [payload] },
  '#withRegion':: d.fn(help='', args=[d.arg(name='region', type=d.T.string)]),
  withRegion(region): { region: region },
  '#mixin': 'ignore',
  mixin: self,
}
