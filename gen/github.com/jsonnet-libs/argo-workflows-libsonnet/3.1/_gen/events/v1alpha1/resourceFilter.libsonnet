{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='resourceFilter', url='', help=''),
  '#withAfterStart':: d.fn(help='', args=[d.arg(name='afterStart', type=d.T.boolean)]),
  withAfterStart(afterStart): { afterStart: afterStart },
  '#withCreatedBy':: d.fn(help='Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.', args=[d.arg(name='createdBy', type=d.T.string)]),
  withCreatedBy(createdBy): { createdBy: createdBy },
  '#withFields':: d.fn(help='', args=[d.arg(name='fields', type=d.T.array)]),
  withFields(fields): { fields: if std.isArray(v=fields) then fields else [fields] },
  '#withFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fields', type=d.T.array)]),
  withFieldsMixin(fields): { fields+: if std.isArray(v=fields) then fields else [fields] },
  '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.array)]),
  withLabels(labels): { labels: if std.isArray(v=labels) then labels else [labels] },
  '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.array)]),
  withLabelsMixin(labels): { labels+: if std.isArray(v=labels) then labels else [labels] },
  '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
  withPrefix(prefix): { prefix: prefix },
  '#mixin': 'ignore',
  mixin: self,
}
