{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='sqsEventSource', url='', help=''),
  '#accessKey':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  accessKey: {
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { accessKey+: { key: key } },
    '#withName':: d.fn(help='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { accessKey+: { name: name } },
    '#withOptional':: d.fn(help='Specify whether the Secret or its key must be defined', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { accessKey+: { optional: optional } },
  },
  '#secretKey':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  secretKey: {
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { secretKey+: { key: key } },
    '#withName':: d.fn(help='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { secretKey+: { name: name } },
    '#withOptional':: d.fn(help='Specify whether the Secret or its key must be defined', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { secretKey+: { optional: optional } },
  },
  '#withJsonBody':: d.fn(help='', args=[d.arg(name='jsonBody', type=d.T.boolean)]),
  withJsonBody(jsonBody): { jsonBody: jsonBody },
  '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
  withMetadata(metadata): { metadata: metadata },
  '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
  withMetadataMixin(metadata): { metadata+: metadata },
  '#withQueue':: d.fn(help='', args=[d.arg(name='queue', type=d.T.string)]),
  withQueue(queue): { queue: queue },
  '#withQueueAccountId':: d.fn(help='', args=[d.arg(name='queueAccountId', type=d.T.string)]),
  withQueueAccountId(queueAccountId): { queueAccountId: queueAccountId },
  '#withRegion':: d.fn(help='', args=[d.arg(name='region', type=d.T.string)]),
  withRegion(region): { region: region },
  '#withRoleARN':: d.fn(help='', args=[d.arg(name='roleARN', type=d.T.string)]),
  withRoleARN(roleARN): { roleARN: roleARN },
  '#withWaitTimeSeconds':: d.fn(help='WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive\nin the queue before returning.', args=[d.arg(name='waitTimeSeconds', type=d.T.string)]),
  withWaitTimeSeconds(waitTimeSeconds): { waitTimeSeconds: waitTimeSeconds },
  '#mixin': 'ignore',
  mixin: self,
}
