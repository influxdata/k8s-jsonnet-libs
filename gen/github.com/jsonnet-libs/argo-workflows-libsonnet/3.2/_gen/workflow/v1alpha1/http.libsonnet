{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='http', url='', help=''),
  '#withBody':: d.fn(help='"Body is content of the HTTP Request"', args=[d.arg(name='body', type=d.T.string)]),
  withBody(body): { body: body },
  '#withHeaders':: d.fn(help='"Headers are an optional list of headers to send with HTTP requests"', args=[d.arg(name='headers', type=d.T.array)]),
  withHeaders(headers): { headers: if std.isArray(v=headers) then headers else [headers] },
  '#withHeadersMixin':: d.fn(help='"Headers are an optional list of headers to send with HTTP requests"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.array)]),
  withHeadersMixin(headers): { headers+: if std.isArray(v=headers) then headers else [headers] },
  '#withMethod':: d.fn(help='"Method is HTTP methods for HTTP Request"', args=[d.arg(name='method', type=d.T.string)]),
  withMethod(method): { method: method },
  '#withTimeoutSeconds':: d.fn(help='"TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds"', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
  withTimeoutSeconds(timeoutSeconds): { timeoutSeconds: timeoutSeconds },
  '#withUrl':: d.fn(help='"URL of the HTTP Request"', args=[d.arg(name='url', type=d.T.string)]),
  withUrl(url): { url: url },
  '#mixin': 'ignore',
  mixin: self,
}
