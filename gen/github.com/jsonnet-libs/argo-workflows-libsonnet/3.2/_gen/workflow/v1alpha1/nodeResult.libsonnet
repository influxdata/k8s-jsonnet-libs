{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='nodeResult', url='', help=''),
  '#outputs':: d.obj(help='"Outputs hold parameters, artifacts, and results from a step"'),
  outputs: {
    '#withArtifacts':: d.fn(help='"Artifacts holds the list of output artifacts produced by a step"', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifacts(artifacts): { outputs+: { artifacts: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withArtifactsMixin':: d.fn(help='"Artifacts holds the list of output artifacts produced by a step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifactsMixin(artifacts): { outputs+: { artifacts+: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withExitCode':: d.fn(help='"ExitCode holds the exit code of a script template"', args=[d.arg(name='exitCode', type=d.T.string)]),
    withExitCode(exitCode): { outputs+: { exitCode: exitCode } },
    '#withParameters':: d.fn(help='"Parameters holds the list of output parameters produced by a step"', args=[d.arg(name='parameters', type=d.T.array)]),
    withParameters(parameters): { outputs+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
    '#withParametersMixin':: d.fn(help='"Parameters holds the list of output parameters produced by a step"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
    withParametersMixin(parameters): { outputs+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
    '#withResult':: d.fn(help='"Result holds the result (stdout) of a script template"', args=[d.arg(name='result', type=d.T.string)]),
    withResult(result): { outputs+: { result: result } },
  },
  '#withMessage':: d.fn(help='', args=[d.arg(name='message', type=d.T.string)]),
  withMessage(message): { message: message },
  '#withPhase':: d.fn(help='', args=[d.arg(name='phase', type=d.T.string)]),
  withPhase(phase): { phase: phase },
  '#mixin': 'ignore',
  mixin: self,
}
