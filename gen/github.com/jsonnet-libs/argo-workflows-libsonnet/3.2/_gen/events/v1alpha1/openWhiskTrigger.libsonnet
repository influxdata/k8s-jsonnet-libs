{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='openWhiskTrigger', url='', help='"OpenWhiskTrigger refers to the specification of the OpenWhisk trigger."'),
  '#authToken':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
  authToken: {
    '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { authToken+: { key: key } },
    '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { authToken+: { name: name } },
    '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { authToken+: { optional: optional } },
  },
  '#withActionName':: d.fn(help='"Name of the action/function."', args=[d.arg(name='actionName', type=d.T.string)]),
  withActionName(actionName): { actionName: actionName },
  '#withHost':: d.fn(help='"Host URL of the OpenWhisk."', args=[d.arg(name='host', type=d.T.string)]),
  withHost(host): { host: host },
  '#withNamespace':: d.fn(help='"Namespace for the action.\\nDefaults to \\"_\\".\\n+optional."', args=[d.arg(name='namespace', type=d.T.string)]),
  withNamespace(namespace): { namespace: namespace },
  '#withParameters':: d.fn(help='', args=[d.arg(name='parameters', type=d.T.array)]),
  withParameters(parameters): { parameters: if std.isArray(v=parameters) then parameters else [parameters] },
  '#withParametersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
  withParametersMixin(parameters): { parameters+: if std.isArray(v=parameters) then parameters else [parameters] },
  '#withPayload':: d.fn(help='"Payload is the list of key-value extracted from an event payload to construct the request payload."', args=[d.arg(name='payload', type=d.T.array)]),
  withPayload(payload): { payload: if std.isArray(v=payload) then payload else [payload] },
  '#withPayloadMixin':: d.fn(help='"Payload is the list of key-value extracted from an event payload to construct the request payload."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='payload', type=d.T.array)]),
  withPayloadMixin(payload): { payload+: if std.isArray(v=payload) then payload else [payload] },
  '#withVersion':: d.fn(help='', args=[d.arg(name='version', type=d.T.string)]),
  withVersion(version): { version: version },
  '#mixin': 'ignore',
  mixin: self,
}
