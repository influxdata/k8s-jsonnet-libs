{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='gitArtifact', url='', help=''),
  '#creds':: d.obj(help=''),
  creds: {
    '#password':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
    password: {
      '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { creds+: { password+: { key: key } } },
      '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { creds+: { password+: { name: name } } },
      '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
      withOptional(optional): { creds+: { password+: { optional: optional } } },
    },
    '#username':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
    username: {
      '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { creds+: { username+: { key: key } } },
      '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { creds+: { username+: { name: name } } },
      '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
      withOptional(optional): { creds+: { username+: { optional: optional } } },
    },
  },
  '#remote':: d.obj(help=''),
  remote: {
    '#withName':: d.fn(help='"Name of the remote to fetch from."', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { remote+: { name: name } },
    '#withUrls':: d.fn(help='"URLs the URLs of a remote repository. It must be non-empty. Fetch will\\nalways use the first URL, while push will use all of them."', args=[d.arg(name='urls', type=d.T.array)]),
    withUrls(urls): { remote+: { urls: if std.isArray(v=urls) then urls else [urls] } },
    '#withUrlsMixin':: d.fn(help='"URLs the URLs of a remote repository. It must be non-empty. Fetch will\\nalways use the first URL, while push will use all of them."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='urls', type=d.T.array)]),
    withUrlsMixin(urls): { remote+: { urls+: if std.isArray(v=urls) then urls else [urls] } },
  },
  '#sshKeySecret':: d.obj(help='"SecretKeySelector selects a key of a Secret."'),
  sshKeySecret: {
    '#withKey':: d.fn(help='"The key of the secret to select from.  Must be a valid secret key."', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { sshKeySecret+: { key: key } },
    '#withName':: d.fn(help='"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { sshKeySecret+: { name: name } },
    '#withOptional':: d.fn(help='"Specify whether the Secret or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { sshKeySecret+: { optional: optional } },
  },
  '#withBranch':: d.fn(help='', args=[d.arg(name='branch', type=d.T.string)]),
  withBranch(branch): { branch: branch },
  '#withCloneDirectory':: d.fn(help="\"Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers.\\nHence we don't use any specific git provider client.\"", args=[d.arg(name='cloneDirectory', type=d.T.string)]),
  withCloneDirectory(cloneDirectory): { cloneDirectory: cloneDirectory },
  '#withFilePath':: d.fn(help='', args=[d.arg(name='filePath', type=d.T.string)]),
  withFilePath(filePath): { filePath: filePath },
  '#withRef':: d.fn(help='', args=[d.arg(name='ref', type=d.T.string)]),
  withRef(ref): { ref: ref },
  '#withSshKeyPath':: d.fn(help='', args=[d.arg(name='sshKeyPath', type=d.T.string)]),
  withSshKeyPath(sshKeyPath): { sshKeyPath: sshKeyPath },
  '#withTag':: d.fn(help='', args=[d.arg(name='tag', type=d.T.string)]),
  withTag(tag): { tag: tag },
  '#withUrl':: d.fn(help='', args=[d.arg(name='url', type=d.T.string)]),
  withUrl(url): { url: url },
  '#mixin': 'ignore',
  mixin: self,
}
