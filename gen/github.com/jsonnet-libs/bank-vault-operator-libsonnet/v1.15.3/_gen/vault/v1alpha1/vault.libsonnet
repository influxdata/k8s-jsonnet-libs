{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='vault', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Vault', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'vault.banzaicloud.com/v1alpha1',
    kind: 'Vault',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help=''),
  spec: {
    '#affinity':: d.obj(help=''),
    affinity: {
      '#nodeAffinity':: d.obj(help=''),
      nodeAffinity: {
        '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
        preferredDuringSchedulingIgnoredDuringExecution: {
          '#preference':: d.obj(help=''),
          preference: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#matchFields':: d.obj(help=''),
            matchFields: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
            withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
            '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
            withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
          },
          '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
          withWeight(weight): { weight: weight },
        },
        '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
        requiredDuringSchedulingIgnoredDuringExecution: {
          '#nodeSelectorTerms':: d.obj(help=''),
          nodeSelectorTerms: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#matchFields':: d.obj(help=''),
            matchFields: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
            '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
            withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
            '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
            withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
          },
          '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
          withNodeSelectorTerms(nodeSelectorTerms): { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } },
          '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
          withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } },
        },
        '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } },
      },
      '#podAffinity':: d.obj(help=''),
      podAffinity: {
        '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
        preferredDuringSchedulingIgnoredDuringExecution: {
          '#podAffinityTerm':: d.obj(help=''),
          podAffinityTerm: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
            },
            '#namespaceSelector':: d.obj(help=''),
            namespaceSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
            },
            '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
            '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
          },
          '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
          withWeight(weight): { weight: weight },
        },
        '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
        requiredDuringSchedulingIgnoredDuringExecution: {
          '#labelSelector':: d.obj(help=''),
          labelSelector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
          },
          '#namespaceSelector':: d.obj(help=''),
          namespaceSelector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
          },
          '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
          withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
          '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
          withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
          '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
          withTopologyKey(topologyKey): { topologyKey: topologyKey },
        },
        '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } },
      },
      '#podAntiAffinity':: d.obj(help=''),
      podAntiAffinity: {
        '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
        preferredDuringSchedulingIgnoredDuringExecution: {
          '#podAffinityTerm':: d.obj(help=''),
          podAffinityTerm: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
            },
            '#namespaceSelector':: d.obj(help=''),
            namespaceSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
            },
            '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
            '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
          },
          '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
          withWeight(weight): { weight: weight },
        },
        '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
        requiredDuringSchedulingIgnoredDuringExecution: {
          '#labelSelector':: d.obj(help=''),
          labelSelector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
          },
          '#namespaceSelector':: d.obj(help=''),
          namespaceSelector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
          },
          '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
          withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
          '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
          withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
          '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
          withTopologyKey(topologyKey): { topologyKey: topologyKey },
        },
        '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } },
        '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
        withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } },
      },
    },
    '#bankVaultsVolumeMounts':: d.obj(help=''),
    bankVaultsVolumeMounts: {
      '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
      withMountPath(mountPath): { mountPath: mountPath },
      '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
      withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
      withReadOnly(readOnly): { readOnly: readOnly },
      '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
      withSubPath(subPath): { subPath: subPath },
      '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
      withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
    },
    '#credentialsConfig':: d.obj(help=''),
    credentialsConfig: {
      '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.string)]),
      withEnv(env): { spec+: { credentialsConfig+: { env: env } } },
      '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { spec+: { credentialsConfig+: { path: path } } },
      '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
      withSecretName(secretName): { spec+: { credentialsConfig+: { secretName: secretName } } },
    },
    '#envsConfig':: d.obj(help=''),
    envsConfig: {
      '#valueFrom':: d.obj(help=''),
      valueFrom: {
        '#configMapKeyRef':: d.obj(help=''),
        configMapKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
        },
        '#fieldRef':: d.obj(help=''),
        fieldRef: {
          '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
          '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
        },
        '#resourceFieldRef':: d.obj(help=''),
        resourceFieldRef: {
          '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
          withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
          '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
          withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
          '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
          withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
        },
        '#secretKeyRef':: d.obj(help=''),
        secretKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
        },
      },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
      withValue(value): { value: value },
    },
    '#ingress':: d.obj(help=''),
    ingress: {
      '#spec':: d.obj(help=''),
      spec: {
        '#defaultBackend':: d.obj(help=''),
        defaultBackend: {
          '#resource':: d.obj(help=''),
          resource: {
            '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
            withApiGroup(apiGroup): { spec+: { ingress+: { spec+: { defaultBackend+: { resource+: { apiGroup: apiGroup } } } } } },
            '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
            withKind(kind): { spec+: { ingress+: { spec+: { defaultBackend+: { resource+: { kind: kind } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { ingress+: { spec+: { defaultBackend+: { resource+: { name: name } } } } } },
          },
          '#service':: d.obj(help=''),
          service: {
            '#port':: d.obj(help=''),
            port: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { ingress+: { spec+: { defaultBackend+: { service+: { port+: { name: name } } } } } } },
              '#withNumber':: d.fn(help='', args=[d.arg(name='number', type=d.T.integer)]),
              withNumber(number): { spec+: { ingress+: { spec+: { defaultBackend+: { service+: { port+: { number: number } } } } } } },
            },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { ingress+: { spec+: { defaultBackend+: { service+: { name: name } } } } } },
          },
        },
        '#rules':: d.obj(help=''),
        rules: {
          '#http':: d.obj(help=''),
          http: {
            '#paths':: d.obj(help=''),
            paths: {
              '#backend':: d.obj(help=''),
              backend: {
                '#resource':: d.obj(help=''),
                resource: {
                  '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
                  withApiGroup(apiGroup): { backend+: { resource+: { apiGroup: apiGroup } } },
                  '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                  withKind(kind): { backend+: { resource+: { kind: kind } } },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { backend+: { resource+: { name: name } } },
                },
                '#service':: d.obj(help=''),
                service: {
                  '#port':: d.obj(help=''),
                  port: {
                    '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                    withName(name): { backend+: { service+: { port+: { name: name } } } },
                    '#withNumber':: d.fn(help='', args=[d.arg(name='number', type=d.T.integer)]),
                    withNumber(number): { backend+: { service+: { port+: { number: number } } } },
                  },
                  '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                  withName(name): { backend+: { service+: { name: name } } },
                },
              },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
              '#withPathType':: d.fn(help='', args=[d.arg(name='pathType', type=d.T.string)]),
              withPathType(pathType): { pathType: pathType },
            },
            '#withPaths':: d.fn(help='', args=[d.arg(name='paths', type=d.T.array)]),
            withPaths(paths): { http+: { paths: if std.isArray(v=paths) then paths else [paths] } },
            '#withPathsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='paths', type=d.T.array)]),
            withPathsMixin(paths): { http+: { paths+: if std.isArray(v=paths) then paths else [paths] } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { host: host },
        },
        '#tls':: d.obj(help=''),
        tls: {
          '#withHosts':: d.fn(help='', args=[d.arg(name='hosts', type=d.T.array)]),
          withHosts(hosts): { hosts: if std.isArray(v=hosts) then hosts else [hosts] },
          '#withHostsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hosts', type=d.T.array)]),
          withHostsMixin(hosts): { hosts+: if std.isArray(v=hosts) then hosts else [hosts] },
          '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
          withSecretName(secretName): { secretName: secretName },
        },
        '#withIngressClassName':: d.fn(help='', args=[d.arg(name='ingressClassName', type=d.T.string)]),
        withIngressClassName(ingressClassName): { spec+: { ingress+: { spec+: { ingressClassName: ingressClassName } } } },
        '#withRules':: d.fn(help='', args=[d.arg(name='rules', type=d.T.array)]),
        withRules(rules): { spec+: { ingress+: { spec+: { rules: if std.isArray(v=rules) then rules else [rules] } } } },
        '#withRulesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
        withRulesMixin(rules): { spec+: { ingress+: { spec+: { rules+: if std.isArray(v=rules) then rules else [rules] } } } },
        '#withTls':: d.fn(help='', args=[d.arg(name='tls', type=d.T.array)]),
        withTls(tls): { spec+: { ingress+: { spec+: { tls: if std.isArray(v=tls) then tls else [tls] } } } },
        '#withTlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tls', type=d.T.array)]),
        withTlsMixin(tls): { spec+: { ingress+: { spec+: { tls+: if std.isArray(v=tls) then tls else [tls] } } } },
      },
      '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
      withAnnotations(annotations): { spec+: { ingress+: { annotations: annotations } } },
      '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
      withAnnotationsMixin(annotations): { spec+: { ingress+: { annotations+: annotations } } },
    },
    '#nodeAffinity':: d.obj(help=''),
    nodeAffinity: {
      '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
      preferredDuringSchedulingIgnoredDuringExecution: {
        '#preference':: d.obj(help=''),
        preference: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#matchFields':: d.obj(help=''),
          matchFields: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
          '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
          withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
          '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
          withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
        },
        '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
        withWeight(weight): { weight: weight },
      },
      '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
      requiredDuringSchedulingIgnoredDuringExecution: {
        '#nodeSelectorTerms':: d.obj(help=''),
        nodeSelectorTerms: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#matchFields':: d.obj(help=''),
          matchFields: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
          '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
          withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
          '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
          withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
        },
        '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
        withNodeSelectorTerms(nodeSelectorTerms): { spec+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } },
        '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
        withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } },
      },
      '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
      '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
    },
    '#resources':: d.obj(help=''),
    resources: {
      '#bankVaults':: d.obj(help=''),
      bankVaults: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { resources+: { bankVaults+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { resources+: { bankVaults+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { resources+: { bankVaults+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { resources+: { bankVaults+: { requests+: requests } } } },
      },
      '#fluentd':: d.obj(help=''),
      fluentd: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { resources+: { fluentd+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { resources+: { fluentd+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { resources+: { fluentd+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { resources+: { fluentd+: { requests+: requests } } } },
      },
      '#hsmDaemon':: d.obj(help=''),
      hsmDaemon: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { resources+: { hsmDaemon+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { resources+: { hsmDaemon+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { resources+: { hsmDaemon+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { resources+: { hsmDaemon+: { requests+: requests } } } },
      },
      '#prometheusExporter':: d.obj(help=''),
      prometheusExporter: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { resources+: { prometheusExporter+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { resources+: { prometheusExporter+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { resources+: { prometheusExporter+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { resources+: { prometheusExporter+: { requests+: requests } } } },
      },
      '#vault':: d.obj(help=''),
      vault: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { resources+: { vault+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { resources+: { vault+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { resources+: { vault+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { resources+: { vault+: { requests+: requests } } } },
      },
    },
    '#securityContext':: d.obj(help=''),
    securityContext: {
      '#seLinuxOptions':: d.obj(help=''),
      seLinuxOptions: {
        '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
        withLevel(level): { spec+: { securityContext+: { seLinuxOptions+: { level: level } } } },
        '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
        withRole(role): { spec+: { securityContext+: { seLinuxOptions+: { role: role } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { securityContext+: { seLinuxOptions+: { type: type } } } },
        '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
        withUser(user): { spec+: { securityContext+: { seLinuxOptions+: { user: user } } } },
      },
      '#seccompProfile':: d.obj(help=''),
      seccompProfile: {
        '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
        withLocalhostProfile(localhostProfile): { spec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { securityContext+: { seccompProfile+: { type: type } } } },
      },
      '#sysctls':: d.obj(help=''),
      sysctls: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#windowsOptions':: d.obj(help=''),
      windowsOptions: {
        '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
        withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } },
        '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
        withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } },
        '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
        withRunAsUserName(runAsUserName): { spec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } },
      },
      '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
      withFsGroup(fsGroup): { spec+: { securityContext+: { fsGroup: fsGroup } } },
      '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
      withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } },
      '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
      withRunAsGroup(runAsGroup): { spec+: { securityContext+: { runAsGroup: runAsGroup } } },
      '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
      withRunAsNonRoot(runAsNonRoot): { spec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } },
      '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
      withRunAsUser(runAsUser): { spec+: { securityContext+: { runAsUser: runAsUser } } },
      '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
      withSupplementalGroups(supplementalGroups): { spec+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } },
      '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
      withSupplementalGroupsMixin(supplementalGroups): { spec+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } },
      '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
      withSysctls(sysctls): { spec+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } },
      '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
      withSysctlsMixin(sysctls): { spec+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } },
    },
    '#sidecarEnvsConfig':: d.obj(help=''),
    sidecarEnvsConfig: {
      '#valueFrom':: d.obj(help=''),
      valueFrom: {
        '#configMapKeyRef':: d.obj(help=''),
        configMapKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
        },
        '#fieldRef':: d.obj(help=''),
        fieldRef: {
          '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
          '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
        },
        '#resourceFieldRef':: d.obj(help=''),
        resourceFieldRef: {
          '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
          withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
          '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
          withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
          '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
          withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
        },
        '#secretKeyRef':: d.obj(help=''),
        secretKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
        },
      },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
      withValue(value): { value: value },
    },
    '#tolerations':: d.obj(help=''),
    tolerations: {
      '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
      withEffect(effect): { effect: effect },
      '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { key: key },
      '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
      withOperator(operator): { operator: operator },
      '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
      withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
      withValue(value): { value: value },
    },
    '#unsealConfig':: d.obj(help=''),
    unsealConfig: {
      '#alibaba':: d.obj(help=''),
      alibaba: {
        '#withKmsKeyId':: d.fn(help='', args=[d.arg(name='kmsKeyId', type=d.T.string)]),
        withKmsKeyId(kmsKeyId): { spec+: { unsealConfig+: { alibaba+: { kmsKeyId: kmsKeyId } } } },
        '#withKmsRegion':: d.fn(help='', args=[d.arg(name='kmsRegion', type=d.T.string)]),
        withKmsRegion(kmsRegion): { spec+: { unsealConfig+: { alibaba+: { kmsRegion: kmsRegion } } } },
        '#withOssBucket':: d.fn(help='', args=[d.arg(name='ossBucket', type=d.T.string)]),
        withOssBucket(ossBucket): { spec+: { unsealConfig+: { alibaba+: { ossBucket: ossBucket } } } },
        '#withOssEndpoint':: d.fn(help='', args=[d.arg(name='ossEndpoint', type=d.T.string)]),
        withOssEndpoint(ossEndpoint): { spec+: { unsealConfig+: { alibaba+: { ossEndpoint: ossEndpoint } } } },
        '#withOssPrefix':: d.fn(help='', args=[d.arg(name='ossPrefix', type=d.T.string)]),
        withOssPrefix(ossPrefix): { spec+: { unsealConfig+: { alibaba+: { ossPrefix: ossPrefix } } } },
      },
      '#aws':: d.obj(help=''),
      aws: {
        '#withKmsKeyId':: d.fn(help='', args=[d.arg(name='kmsKeyId', type=d.T.string)]),
        withKmsKeyId(kmsKeyId): { spec+: { unsealConfig+: { aws+: { kmsKeyId: kmsKeyId } } } },
        '#withKmsRegion':: d.fn(help='', args=[d.arg(name='kmsRegion', type=d.T.string)]),
        withKmsRegion(kmsRegion): { spec+: { unsealConfig+: { aws+: { kmsRegion: kmsRegion } } } },
        '#withS3Bucket':: d.fn(help='', args=[d.arg(name='s3Bucket', type=d.T.string)]),
        withS3Bucket(s3Bucket): { spec+: { unsealConfig+: { aws+: { s3Bucket: s3Bucket } } } },
        '#withS3Prefix':: d.fn(help='', args=[d.arg(name='s3Prefix', type=d.T.string)]),
        withS3Prefix(s3Prefix): { spec+: { unsealConfig+: { aws+: { s3Prefix: s3Prefix } } } },
        '#withS3Region':: d.fn(help='', args=[d.arg(name='s3Region', type=d.T.string)]),
        withS3Region(s3Region): { spec+: { unsealConfig+: { aws+: { s3Region: s3Region } } } },
        '#withS3SSE':: d.fn(help='', args=[d.arg(name='s3SSE', type=d.T.string)]),
        withS3SSE(s3SSE): { spec+: { unsealConfig+: { aws+: { s3SSE: s3SSE } } } },
      },
      '#azure':: d.obj(help=''),
      azure: {
        '#withKeyVaultName':: d.fn(help='', args=[d.arg(name='keyVaultName', type=d.T.string)]),
        withKeyVaultName(keyVaultName): { spec+: { unsealConfig+: { azure+: { keyVaultName: keyVaultName } } } },
      },
      '#google':: d.obj(help=''),
      google: {
        '#withKmsCryptoKey':: d.fn(help='', args=[d.arg(name='kmsCryptoKey', type=d.T.string)]),
        withKmsCryptoKey(kmsCryptoKey): { spec+: { unsealConfig+: { google+: { kmsCryptoKey: kmsCryptoKey } } } },
        '#withKmsKeyRing':: d.fn(help='', args=[d.arg(name='kmsKeyRing', type=d.T.string)]),
        withKmsKeyRing(kmsKeyRing): { spec+: { unsealConfig+: { google+: { kmsKeyRing: kmsKeyRing } } } },
        '#withKmsLocation':: d.fn(help='', args=[d.arg(name='kmsLocation', type=d.T.string)]),
        withKmsLocation(kmsLocation): { spec+: { unsealConfig+: { google+: { kmsLocation: kmsLocation } } } },
        '#withKmsProject':: d.fn(help='', args=[d.arg(name='kmsProject', type=d.T.string)]),
        withKmsProject(kmsProject): { spec+: { unsealConfig+: { google+: { kmsProject: kmsProject } } } },
        '#withStorageBucket':: d.fn(help='', args=[d.arg(name='storageBucket', type=d.T.string)]),
        withStorageBucket(storageBucket): { spec+: { unsealConfig+: { google+: { storageBucket: storageBucket } } } },
      },
      '#hsm':: d.obj(help=''),
      hsm: {
        '#withDaemon':: d.fn(help='', args=[d.arg(name='daemon', type=d.T.boolean)]),
        withDaemon(daemon): { spec+: { unsealConfig+: { hsm+: { daemon: daemon } } } },
        '#withKeyLabel':: d.fn(help='', args=[d.arg(name='keyLabel', type=d.T.string)]),
        withKeyLabel(keyLabel): { spec+: { unsealConfig+: { hsm+: { keyLabel: keyLabel } } } },
        '#withModulePath':: d.fn(help='', args=[d.arg(name='modulePath', type=d.T.string)]),
        withModulePath(modulePath): { spec+: { unsealConfig+: { hsm+: { modulePath: modulePath } } } },
        '#withPin':: d.fn(help='', args=[d.arg(name='pin', type=d.T.string)]),
        withPin(pin): { spec+: { unsealConfig+: { hsm+: { pin: pin } } } },
        '#withSlotId':: d.fn(help='', args=[d.arg(name='slotId', type=d.T.integer)]),
        withSlotId(slotId): { spec+: { unsealConfig+: { hsm+: { slotId: slotId } } } },
        '#withTokenLabel':: d.fn(help='', args=[d.arg(name='tokenLabel', type=d.T.string)]),
        withTokenLabel(tokenLabel): { spec+: { unsealConfig+: { hsm+: { tokenLabel: tokenLabel } } } },
      },
      '#kubernetes':: d.obj(help=''),
      kubernetes: {
        '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { unsealConfig+: { kubernetes+: { secretName: secretName } } } },
        '#withSecretNamespace':: d.fn(help='', args=[d.arg(name='secretNamespace', type=d.T.string)]),
        withSecretNamespace(secretNamespace): { spec+: { unsealConfig+: { kubernetes+: { secretNamespace: secretNamespace } } } },
      },
      '#options':: d.obj(help=''),
      options: {
        '#withPreFlightChecks':: d.fn(help='', args=[d.arg(name='preFlightChecks', type=d.T.boolean)]),
        withPreFlightChecks(preFlightChecks): { spec+: { unsealConfig+: { options+: { preFlightChecks: preFlightChecks } } } },
        '#withStoreRootToken':: d.fn(help='', args=[d.arg(name='storeRootToken', type=d.T.boolean)]),
        withStoreRootToken(storeRootToken): { spec+: { unsealConfig+: { options+: { storeRootToken: storeRootToken } } } },
      },
      '#vault':: d.obj(help=''),
      vault: {
        '#withAddress':: d.fn(help='', args=[d.arg(name='address', type=d.T.string)]),
        withAddress(address): { spec+: { unsealConfig+: { vault+: { address: address } } } },
        '#withAuthPath':: d.fn(help='', args=[d.arg(name='authPath', type=d.T.string)]),
        withAuthPath(authPath): { spec+: { unsealConfig+: { vault+: { authPath: authPath } } } },
        '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
        withRole(role): { spec+: { unsealConfig+: { vault+: { role: role } } } },
        '#withToken':: d.fn(help='', args=[d.arg(name='token', type=d.T.string)]),
        withToken(token): { spec+: { unsealConfig+: { vault+: { token: token } } } },
        '#withTokenPath':: d.fn(help='', args=[d.arg(name='tokenPath', type=d.T.string)]),
        withTokenPath(tokenPath): { spec+: { unsealConfig+: { vault+: { tokenPath: tokenPath } } } },
        '#withUnsealKeysPath':: d.fn(help='', args=[d.arg(name='unsealKeysPath', type=d.T.string)]),
        withUnsealKeysPath(unsealKeysPath): { spec+: { unsealConfig+: { vault+: { unsealKeysPath: unsealKeysPath } } } },
      },
    },
    '#vaultConfigurerPodSpec':: d.obj(help=''),
    vaultConfigurerPodSpec: {
      '#affinity':: d.obj(help=''),
      affinity: {
        '#nodeAffinity':: d.obj(help=''),
        nodeAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#preference':: d.obj(help=''),
            preference: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#matchFields':: d.obj(help=''),
              matchFields: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
              '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
            },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { weight: weight },
          },
          '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          requiredDuringSchedulingIgnoredDuringExecution: {
            '#nodeSelectorTerms':: d.obj(help=''),
            nodeSelectorTerms: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#matchFields':: d.obj(help=''),
              matchFields: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
              '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
              '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
            },
            '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
            withNodeSelectorTerms(nodeSelectorTerms): { spec+: { vaultConfigurerPodSpec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } },
            '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
            withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { vaultConfigurerPodSpec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } },
          },
          '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
        },
        '#podAffinity':: d.obj(help=''),
        podAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#podAffinityTerm':: d.obj(help=''),
            podAffinityTerm: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
              },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
            },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { weight: weight },
          },
          '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          requiredDuringSchedulingIgnoredDuringExecution: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
            },
            '#namespaceSelector':: d.obj(help=''),
            namespaceSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
            },
            '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { topologyKey: topologyKey },
          },
          '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
        },
        '#podAntiAffinity':: d.obj(help=''),
        podAntiAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#podAffinityTerm':: d.obj(help=''),
            podAffinityTerm: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
              },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
            },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { weight: weight },
          },
          '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          requiredDuringSchedulingIgnoredDuringExecution: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
            },
            '#namespaceSelector':: d.obj(help=''),
            namespaceSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
            },
            '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { topologyKey: topologyKey },
          },
          '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultConfigurerPodSpec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
        },
      },
      '#containers':: d.obj(help=''),
      containers: {
        '#env':: d.obj(help=''),
        env: {
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help=''),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
            },
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
            },
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
            },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#envFrom':: d.obj(help=''),
        envFrom: {
          '#configMapRef':: d.obj(help=''),
          configMapRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMapRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMapRef+: { optional: optional } },
          },
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secretRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secretRef+: { optional: optional } },
          },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
        },
        '#lifecycle':: d.obj(help=''),
        lifecycle: {
          '#postStart':: d.obj(help=''),
          postStart: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
            },
          },
          '#preStop':: d.obj(help=''),
          preStop: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
            },
          },
        },
        '#livenessProbe':: d.obj(help=''),
        livenessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#ports':: d.obj(help=''),
        ports: {
          '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
          withContainerPort(containerPort): { containerPort: containerPort },
          '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
          withHostIP(hostIP): { hostIP: hostIP },
          '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
          withHostPort(hostPort): { hostPort: hostPort },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
        },
        '#readinessProbe':: d.obj(help=''),
        readinessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { resources+: { limits: limits } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { resources+: { limits+: limits } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { resources+: { requests: requests } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { resources+: { requests+: requests } },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seccompProfile+: { type: type } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { securityContext+: { privileged: privileged } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { securityContext+: { procMount: procMount } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
        },
        '#startupProbe':: d.obj(help=''),
        startupProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { startupProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#volumeDevices':: d.obj(help=''),
        volumeDevices: {
          '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
          withDevicePath(devicePath): { devicePath: devicePath },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#volumeMounts':: d.obj(help=''),
        volumeMounts: {
          '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
          withMountPath(mountPath): { mountPath: mountPath },
          '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
          withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { readOnly: readOnly },
          '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
          withSubPath(subPath): { subPath: subPath },
          '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
          withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
        },
        '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
        withArgs(args): { args: if std.isArray(v=args) then args else [args] },
        '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
        withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
        '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
        withCommand(command): { command: if std.isArray(v=command) then command else [command] },
        '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
        withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
        '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { env: if std.isArray(v=env) then env else [env] },
        '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { image: image },
        '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
        '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
        withStdin(stdin): { stdin: stdin },
        '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
        withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
        '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
        withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
        '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
        withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
        '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
        withTty(tty): { tty: tty },
        '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
        withWorkingDir(workingDir): { workingDir: workingDir },
      },
      '#dnsConfig':: d.obj(help=''),
      dnsConfig: {
        '#options':: d.obj(help=''),
        options: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withNameservers':: d.fn(help='', args=[d.arg(name='nameservers', type=d.T.array)]),
        withNameservers(nameservers): { spec+: { vaultConfigurerPodSpec+: { dnsConfig+: { nameservers: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } },
        '#withNameserversMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nameservers', type=d.T.array)]),
        withNameserversMixin(nameservers): { spec+: { vaultConfigurerPodSpec+: { dnsConfig+: { nameservers+: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } },
        '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.array)]),
        withOptions(options): { spec+: { vaultConfigurerPodSpec+: { dnsConfig+: { options: if std.isArray(v=options) then options else [options] } } } },
        '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.array)]),
        withOptionsMixin(options): { spec+: { vaultConfigurerPodSpec+: { dnsConfig+: { options+: if std.isArray(v=options) then options else [options] } } } },
        '#withSearches':: d.fn(help='', args=[d.arg(name='searches', type=d.T.array)]),
        withSearches(searches): { spec+: { vaultConfigurerPodSpec+: { dnsConfig+: { searches: if std.isArray(v=searches) then searches else [searches] } } } },
        '#withSearchesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='searches', type=d.T.array)]),
        withSearchesMixin(searches): { spec+: { vaultConfigurerPodSpec+: { dnsConfig+: { searches+: if std.isArray(v=searches) then searches else [searches] } } } },
      },
      '#ephemeralContainers':: d.obj(help=''),
      ephemeralContainers: {
        '#env':: d.obj(help=''),
        env: {
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help=''),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
            },
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
            },
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
            },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#envFrom':: d.obj(help=''),
        envFrom: {
          '#configMapRef':: d.obj(help=''),
          configMapRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMapRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMapRef+: { optional: optional } },
          },
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secretRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secretRef+: { optional: optional } },
          },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
        },
        '#lifecycle':: d.obj(help=''),
        lifecycle: {
          '#postStart':: d.obj(help=''),
          postStart: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
            },
          },
          '#preStop':: d.obj(help=''),
          preStop: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
            },
          },
        },
        '#livenessProbe':: d.obj(help=''),
        livenessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#ports':: d.obj(help=''),
        ports: {
          '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
          withContainerPort(containerPort): { containerPort: containerPort },
          '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
          withHostIP(hostIP): { hostIP: hostIP },
          '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
          withHostPort(hostPort): { hostPort: hostPort },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
        },
        '#readinessProbe':: d.obj(help=''),
        readinessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { resources+: { limits: limits } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { resources+: { limits+: limits } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { resources+: { requests: requests } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { resources+: { requests+: requests } },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seccompProfile+: { type: type } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { securityContext+: { privileged: privileged } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { securityContext+: { procMount: procMount } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
        },
        '#startupProbe':: d.obj(help=''),
        startupProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { startupProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#volumeDevices':: d.obj(help=''),
        volumeDevices: {
          '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
          withDevicePath(devicePath): { devicePath: devicePath },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#volumeMounts':: d.obj(help=''),
        volumeMounts: {
          '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
          withMountPath(mountPath): { mountPath: mountPath },
          '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
          withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { readOnly: readOnly },
          '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
          withSubPath(subPath): { subPath: subPath },
          '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
          withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
        },
        '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
        withArgs(args): { args: if std.isArray(v=args) then args else [args] },
        '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
        withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
        '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
        withCommand(command): { command: if std.isArray(v=command) then command else [command] },
        '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
        withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
        '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { env: if std.isArray(v=env) then env else [env] },
        '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { image: image },
        '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
        '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
        withStdin(stdin): { stdin: stdin },
        '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
        withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
        '#withTargetContainerName':: d.fn(help='', args=[d.arg(name='targetContainerName', type=d.T.string)]),
        withTargetContainerName(targetContainerName): { targetContainerName: targetContainerName },
        '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
        withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
        '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
        withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
        '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
        withTty(tty): { tty: tty },
        '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
        withWorkingDir(workingDir): { workingDir: workingDir },
      },
      '#hostAliases':: d.obj(help=''),
      hostAliases: {
        '#withHostnames':: d.fn(help='', args=[d.arg(name='hostnames', type=d.T.array)]),
        withHostnames(hostnames): { hostnames: if std.isArray(v=hostnames) then hostnames else [hostnames] },
        '#withHostnamesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostnames', type=d.T.array)]),
        withHostnamesMixin(hostnames): { hostnames+: if std.isArray(v=hostnames) then hostnames else [hostnames] },
        '#withIp':: d.fn(help='', args=[d.arg(name='ip', type=d.T.string)]),
        withIp(ip): { ip: ip },
      },
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#initContainers':: d.obj(help=''),
      initContainers: {
        '#env':: d.obj(help=''),
        env: {
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help=''),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
            },
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
            },
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
            },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#envFrom':: d.obj(help=''),
        envFrom: {
          '#configMapRef':: d.obj(help=''),
          configMapRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMapRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMapRef+: { optional: optional } },
          },
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secretRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secretRef+: { optional: optional } },
          },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
        },
        '#lifecycle':: d.obj(help=''),
        lifecycle: {
          '#postStart':: d.obj(help=''),
          postStart: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
            },
          },
          '#preStop':: d.obj(help=''),
          preStop: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
            },
          },
        },
        '#livenessProbe':: d.obj(help=''),
        livenessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#ports':: d.obj(help=''),
        ports: {
          '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
          withContainerPort(containerPort): { containerPort: containerPort },
          '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
          withHostIP(hostIP): { hostIP: hostIP },
          '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
          withHostPort(hostPort): { hostPort: hostPort },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
        },
        '#readinessProbe':: d.obj(help=''),
        readinessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { resources+: { limits: limits } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { resources+: { limits+: limits } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { resources+: { requests: requests } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { resources+: { requests+: requests } },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seccompProfile+: { type: type } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { securityContext+: { privileged: privileged } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { securityContext+: { procMount: procMount } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
        },
        '#startupProbe':: d.obj(help=''),
        startupProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { startupProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#volumeDevices':: d.obj(help=''),
        volumeDevices: {
          '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
          withDevicePath(devicePath): { devicePath: devicePath },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#volumeMounts':: d.obj(help=''),
        volumeMounts: {
          '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
          withMountPath(mountPath): { mountPath: mountPath },
          '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
          withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { readOnly: readOnly },
          '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
          withSubPath(subPath): { subPath: subPath },
          '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
          withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
        },
        '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
        withArgs(args): { args: if std.isArray(v=args) then args else [args] },
        '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
        withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
        '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
        withCommand(command): { command: if std.isArray(v=command) then command else [command] },
        '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
        withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
        '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { env: if std.isArray(v=env) then env else [env] },
        '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { image: image },
        '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
        '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
        withStdin(stdin): { stdin: stdin },
        '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
        withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
        '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
        withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
        '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
        withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
        '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
        withTty(tty): { tty: tty },
        '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
        withWorkingDir(workingDir): { workingDir: workingDir },
      },
      '#readinessGates':: d.obj(help=''),
      readinessGates: {
        '#withConditionType':: d.fn(help='', args=[d.arg(name='conditionType', type=d.T.string)]),
        withConditionType(conditionType): { conditionType: conditionType },
      },
      '#securityContext':: d.obj(help=''),
      securityContext: {
        '#seLinuxOptions':: d.obj(help=''),
        seLinuxOptions: {
          '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
          withLevel(level): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { seLinuxOptions+: { level: level } } } } },
          '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
          withRole(role): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { seLinuxOptions+: { role: role } } } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { seLinuxOptions+: { type: type } } } } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { seLinuxOptions+: { user: user } } } } },
        },
        '#seccompProfile':: d.obj(help=''),
        seccompProfile: {
          '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
          withLocalhostProfile(localhostProfile): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { seccompProfile+: { type: type } } } } },
        },
        '#sysctls':: d.obj(help=''),
        sysctls: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#windowsOptions':: d.obj(help=''),
        windowsOptions: {
          '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
          withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } },
          '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
          withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } },
          '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
          withRunAsUserName(runAsUserName): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } },
        },
        '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
        withFsGroup(fsGroup): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { fsGroup: fsGroup } } } },
        '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
        withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } },
        '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
        withRunAsGroup(runAsGroup): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { runAsGroup: runAsGroup } } } },
        '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
        withRunAsNonRoot(runAsNonRoot): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } },
        '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
        withRunAsUser(runAsUser): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { runAsUser: runAsUser } } } },
        '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
        withSupplementalGroups(supplementalGroups): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } },
        '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
        withSupplementalGroupsMixin(supplementalGroups): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } },
        '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
        withSysctls(sysctls): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } },
        '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
        withSysctlsMixin(sysctls): { spec+: { vaultConfigurerPodSpec+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } },
      },
      '#tolerations':: d.obj(help=''),
      tolerations: {
        '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#topologySpreadConstraints':: d.obj(help=''),
      topologySpreadConstraints: {
        '#labelSelector':: d.obj(help=''),
        labelSelector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
        },
        '#withMaxSkew':: d.fn(help='', args=[d.arg(name='maxSkew', type=d.T.integer)]),
        withMaxSkew(maxSkew): { maxSkew: maxSkew },
        '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
        withTopologyKey(topologyKey): { topologyKey: topologyKey },
        '#withWhenUnsatisfiable':: d.fn(help='', args=[d.arg(name='whenUnsatisfiable', type=d.T.string)]),
        withWhenUnsatisfiable(whenUnsatisfiable): { whenUnsatisfiable: whenUnsatisfiable },
      },
      '#volumes':: d.obj(help=''),
      volumes: {
        '#awsElasticBlockStore':: d.obj(help=''),
        awsElasticBlockStore: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { awsElasticBlockStore+: { fsType: fsType } },
          '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
          withPartition(partition): { awsElasticBlockStore+: { partition: partition } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { awsElasticBlockStore+: { readOnly: readOnly } },
          '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
          withVolumeID(volumeID): { awsElasticBlockStore+: { volumeID: volumeID } },
        },
        '#azureDisk':: d.obj(help=''),
        azureDisk: {
          '#withCachingMode':: d.fn(help='', args=[d.arg(name='cachingMode', type=d.T.string)]),
          withCachingMode(cachingMode): { azureDisk+: { cachingMode: cachingMode } },
          '#withDiskName':: d.fn(help='', args=[d.arg(name='diskName', type=d.T.string)]),
          withDiskName(diskName): { azureDisk+: { diskName: diskName } },
          '#withDiskURI':: d.fn(help='', args=[d.arg(name='diskURI', type=d.T.string)]),
          withDiskURI(diskURI): { azureDisk+: { diskURI: diskURI } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { azureDisk+: { fsType: fsType } },
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { azureDisk+: { kind: kind } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { azureDisk+: { readOnly: readOnly } },
        },
        '#azureFile':: d.obj(help=''),
        azureFile: {
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { azureFile+: { readOnly: readOnly } },
          '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
          withSecretName(secretName): { azureFile+: { secretName: secretName } },
          '#withShareName':: d.fn(help='', args=[d.arg(name='shareName', type=d.T.string)]),
          withShareName(shareName): { azureFile+: { shareName: shareName } },
        },
        '#cephfs':: d.obj(help=''),
        cephfs: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { cephfs+: { secretRef+: { name: name } } },
          },
          '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitors(monitors): { cephfs+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitorsMixin(monitors): { cephfs+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { cephfs+: { path: path } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { cephfs+: { readOnly: readOnly } },
          '#withSecretFile':: d.fn(help='', args=[d.arg(name='secretFile', type=d.T.string)]),
          withSecretFile(secretFile): { cephfs+: { secretFile: secretFile } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { cephfs+: { user: user } },
        },
        '#cinder':: d.obj(help=''),
        cinder: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { cinder+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { cinder+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { cinder+: { readOnly: readOnly } },
          '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
          withVolumeID(volumeID): { cinder+: { volumeID: volumeID } },
        },
        '#configMap':: d.obj(help=''),
        configMap: {
          '#items':: d.obj(help=''),
          items: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
            withMode(mode): { mode: mode },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { path: path },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { configMap+: { defaultMode: defaultMode } },
          '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
          withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
          '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
          withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { configMap+: { name: name } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { configMap+: { optional: optional } },
        },
        '#csi':: d.obj(help=''),
        csi: {
          '#nodePublishSecretRef':: d.obj(help=''),
          nodePublishSecretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { csi+: { nodePublishSecretRef+: { name: name } } },
          },
          '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
          withDriver(driver): { csi+: { driver: driver } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { csi+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { csi+: { readOnly: readOnly } },
          '#withVolumeAttributes':: d.fn(help='', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
          withVolumeAttributes(volumeAttributes): { csi+: { volumeAttributes: volumeAttributes } },
          '#withVolumeAttributesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
          withVolumeAttributesMixin(volumeAttributes): { csi+: { volumeAttributes+: volumeAttributes } },
        },
        '#downwardAPI':: d.obj(help=''),
        downwardAPI: {
          '#items':: d.obj(help=''),
          items: {
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { resourceFieldRef+: { resource: resource } },
            },
            '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
            withMode(mode): { mode: mode },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { path: path },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { downwardAPI+: { defaultMode: defaultMode } },
          '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
          withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
          '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
          withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
        },
        '#emptyDir':: d.obj(help=''),
        emptyDir: {
          '#withMedium':: d.fn(help='', args=[d.arg(name='medium', type=d.T.string)]),
          withMedium(medium): { emptyDir+: { medium: medium } },
          '#withSizeLimit':: d.fn(help='', args=[d.arg(name='sizeLimit', type=d.T.any)]),
          withSizeLimit(sizeLimit): { emptyDir+: { sizeLimit: sizeLimit } },
        },
        '#ephemeral':: d.obj(help=''),
        ephemeral: {
          '#volumeClaimTemplate':: d.obj(help=''),
          volumeClaimTemplate: {
            '#spec':: d.obj(help=''),
            spec: {
              '#dataSource':: d.obj(help=''),
              dataSource: {
                '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
                withApiGroup(apiGroup): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { apiGroup: apiGroup } } } } },
                '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                withKind(kind): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { kind: kind } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { name: name } } } } },
              },
              '#resources':: d.obj(help=''),
              resources: {
                '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
                withLimits(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits: limits } } } } },
                '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                withLimitsMixin(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits+: limits } } } } },
                '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
                withRequests(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests: requests } } } } },
                '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                withRequestsMixin(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests+: requests } } } } },
              },
              '#selector':: d.obj(help=''),
              selector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels: matchLabels } } } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels+: matchLabels } } } } },
              },
              '#withAccessModes':: d.fn(help='', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModes(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
              '#withAccessModesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModesMixin(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
              '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
              withStorageClassName(storageClassName): { ephemeral+: { volumeClaimTemplate+: { spec+: { storageClassName: storageClassName } } } },
              '#withVolumeMode':: d.fn(help='', args=[d.arg(name='volumeMode', type=d.T.string)]),
              withVolumeMode(volumeMode): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeMode: volumeMode } } } },
              '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
              withVolumeName(volumeName): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeName: volumeName } } } },
            },
            '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
            withMetadata(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata: metadata } } },
            '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
            withMetadataMixin(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata+: metadata } } },
          },
        },
        '#fc':: d.obj(help=''),
        fc: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { fc+: { fsType: fsType } },
          '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
          withLun(lun): { fc+: { lun: lun } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { fc+: { readOnly: readOnly } },
          '#withTargetWWNs':: d.fn(help='', args=[d.arg(name='targetWWNs', type=d.T.array)]),
          withTargetWWNs(targetWWNs): { fc+: { targetWWNs: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
          '#withTargetWWNsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetWWNs', type=d.T.array)]),
          withTargetWWNsMixin(targetWWNs): { fc+: { targetWWNs+: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
          '#withWwids':: d.fn(help='', args=[d.arg(name='wwids', type=d.T.array)]),
          withWwids(wwids): { fc+: { wwids: if std.isArray(v=wwids) then wwids else [wwids] } },
          '#withWwidsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='wwids', type=d.T.array)]),
          withWwidsMixin(wwids): { fc+: { wwids+: if std.isArray(v=wwids) then wwids else [wwids] } },
        },
        '#flexVolume':: d.obj(help=''),
        flexVolume: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { flexVolume+: { secretRef+: { name: name } } },
          },
          '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
          withDriver(driver): { flexVolume+: { driver: driver } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { flexVolume+: { fsType: fsType } },
          '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.object)]),
          withOptions(options): { flexVolume+: { options: options } },
          '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.object)]),
          withOptionsMixin(options): { flexVolume+: { options+: options } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { flexVolume+: { readOnly: readOnly } },
        },
        '#flocker':: d.obj(help=''),
        flocker: {
          '#withDatasetName':: d.fn(help='', args=[d.arg(name='datasetName', type=d.T.string)]),
          withDatasetName(datasetName): { flocker+: { datasetName: datasetName } },
          '#withDatasetUUID':: d.fn(help='', args=[d.arg(name='datasetUUID', type=d.T.string)]),
          withDatasetUUID(datasetUUID): { flocker+: { datasetUUID: datasetUUID } },
        },
        '#gcePersistentDisk':: d.obj(help=''),
        gcePersistentDisk: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { gcePersistentDisk+: { fsType: fsType } },
          '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
          withPartition(partition): { gcePersistentDisk+: { partition: partition } },
          '#withPdName':: d.fn(help='', args=[d.arg(name='pdName', type=d.T.string)]),
          withPdName(pdName): { gcePersistentDisk+: { pdName: pdName } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { gcePersistentDisk+: { readOnly: readOnly } },
        },
        '#gitRepo':: d.obj(help=''),
        gitRepo: {
          '#withDirectory':: d.fn(help='', args=[d.arg(name='directory', type=d.T.string)]),
          withDirectory(directory): { gitRepo+: { directory: directory } },
          '#withRepository':: d.fn(help='', args=[d.arg(name='repository', type=d.T.string)]),
          withRepository(repository): { gitRepo+: { repository: repository } },
          '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
          withRevision(revision): { gitRepo+: { revision: revision } },
        },
        '#glusterfs':: d.obj(help=''),
        glusterfs: {
          '#withEndpoints':: d.fn(help='', args=[d.arg(name='endpoints', type=d.T.string)]),
          withEndpoints(endpoints): { glusterfs+: { endpoints: endpoints } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { glusterfs+: { path: path } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { glusterfs+: { readOnly: readOnly } },
        },
        '#hostPath':: d.obj(help=''),
        hostPath: {
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { hostPath+: { path: path } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { hostPath+: { type: type } },
        },
        '#iscsi':: d.obj(help=''),
        iscsi: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { iscsi+: { secretRef+: { name: name } } },
          },
          '#withChapAuthDiscovery':: d.fn(help='', args=[d.arg(name='chapAuthDiscovery', type=d.T.boolean)]),
          withChapAuthDiscovery(chapAuthDiscovery): { iscsi+: { chapAuthDiscovery: chapAuthDiscovery } },
          '#withChapAuthSession':: d.fn(help='', args=[d.arg(name='chapAuthSession', type=d.T.boolean)]),
          withChapAuthSession(chapAuthSession): { iscsi+: { chapAuthSession: chapAuthSession } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { iscsi+: { fsType: fsType } },
          '#withInitiatorName':: d.fn(help='', args=[d.arg(name='initiatorName', type=d.T.string)]),
          withInitiatorName(initiatorName): { iscsi+: { initiatorName: initiatorName } },
          '#withIqn':: d.fn(help='', args=[d.arg(name='iqn', type=d.T.string)]),
          withIqn(iqn): { iscsi+: { iqn: iqn } },
          '#withIscsiInterface':: d.fn(help='', args=[d.arg(name='iscsiInterface', type=d.T.string)]),
          withIscsiInterface(iscsiInterface): { iscsi+: { iscsiInterface: iscsiInterface } },
          '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
          withLun(lun): { iscsi+: { lun: lun } },
          '#withPortals':: d.fn(help='', args=[d.arg(name='portals', type=d.T.array)]),
          withPortals(portals): { iscsi+: { portals: if std.isArray(v=portals) then portals else [portals] } },
          '#withPortalsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='portals', type=d.T.array)]),
          withPortalsMixin(portals): { iscsi+: { portals+: if std.isArray(v=portals) then portals else [portals] } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { iscsi+: { readOnly: readOnly } },
          '#withTargetPortal':: d.fn(help='', args=[d.arg(name='targetPortal', type=d.T.string)]),
          withTargetPortal(targetPortal): { iscsi+: { targetPortal: targetPortal } },
        },
        '#nfs':: d.obj(help=''),
        nfs: {
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { nfs+: { path: path } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { nfs+: { readOnly: readOnly } },
          '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
          withServer(server): { nfs+: { server: server } },
        },
        '#persistentVolumeClaim':: d.obj(help=''),
        persistentVolumeClaim: {
          '#withClaimName':: d.fn(help='', args=[d.arg(name='claimName', type=d.T.string)]),
          withClaimName(claimName): { persistentVolumeClaim+: { claimName: claimName } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { persistentVolumeClaim+: { readOnly: readOnly } },
        },
        '#photonPersistentDisk':: d.obj(help=''),
        photonPersistentDisk: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { photonPersistentDisk+: { fsType: fsType } },
          '#withPdID':: d.fn(help='', args=[d.arg(name='pdID', type=d.T.string)]),
          withPdID(pdID): { photonPersistentDisk+: { pdID: pdID } },
        },
        '#portworxVolume':: d.obj(help=''),
        portworxVolume: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { portworxVolume+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { portworxVolume+: { readOnly: readOnly } },
          '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
          withVolumeID(volumeID): { portworxVolume+: { volumeID: volumeID } },
        },
        '#projected':: d.obj(help=''),
        projected: {
          '#sources':: d.obj(help=''),
          sources: {
            '#configMap':: d.obj(help=''),
            configMap: {
              '#items':: d.obj(help=''),
              items: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                withMode(mode): { mode: mode },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { path: path },
              },
              '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
              withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
              '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
              withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { configMap+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { configMap+: { optional: optional } },
            },
            '#downwardAPI':: d.obj(help=''),
            downwardAPI: {
              '#items':: d.obj(help=''),
              items: {
                '#fieldRef':: d.obj(help=''),
                fieldRef: {
                  '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                  withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
                  '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                  withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
                },
                '#resourceFieldRef':: d.obj(help=''),
                resourceFieldRef: {
                  '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                  withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
                  '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                  withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
                  '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                  withResource(resource): { resourceFieldRef+: { resource: resource } },
                },
                '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                withMode(mode): { mode: mode },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { path: path },
              },
              '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
              withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
              '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
              withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
            },
            '#secret':: d.obj(help=''),
            secret: {
              '#items':: d.obj(help=''),
              items: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                withMode(mode): { mode: mode },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { path: path },
              },
              '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
              withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
              '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
              withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { secret+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { secret+: { optional: optional } },
            },
            '#serviceAccountToken':: d.obj(help=''),
            serviceAccountToken: {
              '#withAudience':: d.fn(help='', args=[d.arg(name='audience', type=d.T.string)]),
              withAudience(audience): { serviceAccountToken+: { audience: audience } },
              '#withExpirationSeconds':: d.fn(help='', args=[d.arg(name='expirationSeconds', type=d.T.integer)]),
              withExpirationSeconds(expirationSeconds): { serviceAccountToken+: { expirationSeconds: expirationSeconds } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { serviceAccountToken+: { path: path } },
            },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { projected+: { defaultMode: defaultMode } },
          '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
          withSources(sources): { projected+: { sources: if std.isArray(v=sources) then sources else [sources] } },
          '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
          withSourcesMixin(sources): { projected+: { sources+: if std.isArray(v=sources) then sources else [sources] } },
        },
        '#quobyte':: d.obj(help=''),
        quobyte: {
          '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
          withGroup(group): { quobyte+: { group: group } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { quobyte+: { readOnly: readOnly } },
          '#withRegistry':: d.fn(help='', args=[d.arg(name='registry', type=d.T.string)]),
          withRegistry(registry): { quobyte+: { registry: registry } },
          '#withTenant':: d.fn(help='', args=[d.arg(name='tenant', type=d.T.string)]),
          withTenant(tenant): { quobyte+: { tenant: tenant } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { quobyte+: { user: user } },
          '#withVolume':: d.fn(help='', args=[d.arg(name='volume', type=d.T.string)]),
          withVolume(volume): { quobyte+: { volume: volume } },
        },
        '#rbd':: d.obj(help=''),
        rbd: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { rbd+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { rbd+: { fsType: fsType } },
          '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { rbd+: { image: image } },
          '#withKeyring':: d.fn(help='', args=[d.arg(name='keyring', type=d.T.string)]),
          withKeyring(keyring): { rbd+: { keyring: keyring } },
          '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitors(monitors): { rbd+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitorsMixin(monitors): { rbd+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withPool':: d.fn(help='', args=[d.arg(name='pool', type=d.T.string)]),
          withPool(pool): { rbd+: { pool: pool } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { rbd+: { readOnly: readOnly } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { rbd+: { user: user } },
        },
        '#scaleIO':: d.obj(help=''),
        scaleIO: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { scaleIO+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { scaleIO+: { fsType: fsType } },
          '#withGateway':: d.fn(help='', args=[d.arg(name='gateway', type=d.T.string)]),
          withGateway(gateway): { scaleIO+: { gateway: gateway } },
          '#withProtectionDomain':: d.fn(help='', args=[d.arg(name='protectionDomain', type=d.T.string)]),
          withProtectionDomain(protectionDomain): { scaleIO+: { protectionDomain: protectionDomain } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { scaleIO+: { readOnly: readOnly } },
          '#withSslEnabled':: d.fn(help='', args=[d.arg(name='sslEnabled', type=d.T.boolean)]),
          withSslEnabled(sslEnabled): { scaleIO+: { sslEnabled: sslEnabled } },
          '#withStorageMode':: d.fn(help='', args=[d.arg(name='storageMode', type=d.T.string)]),
          withStorageMode(storageMode): { scaleIO+: { storageMode: storageMode } },
          '#withStoragePool':: d.fn(help='', args=[d.arg(name='storagePool', type=d.T.string)]),
          withStoragePool(storagePool): { scaleIO+: { storagePool: storagePool } },
          '#withSystem':: d.fn(help='', args=[d.arg(name='system', type=d.T.string)]),
          withSystem(system): { scaleIO+: { system: system } },
          '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
          withVolumeName(volumeName): { scaleIO+: { volumeName: volumeName } },
        },
        '#secret':: d.obj(help=''),
        secret: {
          '#items':: d.obj(help=''),
          items: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
            withMode(mode): { mode: mode },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { path: path },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { secret+: { defaultMode: defaultMode } },
          '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
          withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
          '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
          withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { secret+: { optional: optional } },
          '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
          withSecretName(secretName): { secret+: { secretName: secretName } },
        },
        '#storageos':: d.obj(help=''),
        storageos: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { storageos+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { storageos+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { storageos+: { readOnly: readOnly } },
          '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
          withVolumeName(volumeName): { storageos+: { volumeName: volumeName } },
          '#withVolumeNamespace':: d.fn(help='', args=[d.arg(name='volumeNamespace', type=d.T.string)]),
          withVolumeNamespace(volumeNamespace): { storageos+: { volumeNamespace: volumeNamespace } },
        },
        '#vsphereVolume':: d.obj(help=''),
        vsphereVolume: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { vsphereVolume+: { fsType: fsType } },
          '#withStoragePolicyID':: d.fn(help='', args=[d.arg(name='storagePolicyID', type=d.T.string)]),
          withStoragePolicyID(storagePolicyID): { vsphereVolume+: { storagePolicyID: storagePolicyID } },
          '#withStoragePolicyName':: d.fn(help='', args=[d.arg(name='storagePolicyName', type=d.T.string)]),
          withStoragePolicyName(storagePolicyName): { vsphereVolume+: { storagePolicyName: storagePolicyName } },
          '#withVolumePath':: d.fn(help='', args=[d.arg(name='volumePath', type=d.T.string)]),
          withVolumePath(volumePath): { vsphereVolume+: { volumePath: volumePath } },
        },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#withActiveDeadlineSeconds':: d.fn(help='', args=[d.arg(name='activeDeadlineSeconds', type=d.T.integer)]),
      withActiveDeadlineSeconds(activeDeadlineSeconds): { spec+: { vaultConfigurerPodSpec+: { activeDeadlineSeconds: activeDeadlineSeconds } } },
      '#withAutomountServiceAccountToken':: d.fn(help='', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
      withAutomountServiceAccountToken(automountServiceAccountToken): { spec+: { vaultConfigurerPodSpec+: { automountServiceAccountToken: automountServiceAccountToken } } },
      '#withContainers':: d.fn(help='', args=[d.arg(name='containers', type=d.T.array)]),
      withContainers(containers): { spec+: { vaultConfigurerPodSpec+: { containers: if std.isArray(v=containers) then containers else [containers] } } },
      '#withContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='containers', type=d.T.array)]),
      withContainersMixin(containers): { spec+: { vaultConfigurerPodSpec+: { containers+: if std.isArray(v=containers) then containers else [containers] } } },
      '#withDnsPolicy':: d.fn(help='', args=[d.arg(name='dnsPolicy', type=d.T.string)]),
      withDnsPolicy(dnsPolicy): { spec+: { vaultConfigurerPodSpec+: { dnsPolicy: dnsPolicy } } },
      '#withEnableServiceLinks':: d.fn(help='', args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
      withEnableServiceLinks(enableServiceLinks): { spec+: { vaultConfigurerPodSpec+: { enableServiceLinks: enableServiceLinks } } },
      '#withEphemeralContainers':: d.fn(help='', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
      withEphemeralContainers(ephemeralContainers): { spec+: { vaultConfigurerPodSpec+: { ephemeralContainers: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } },
      '#withEphemeralContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
      withEphemeralContainersMixin(ephemeralContainers): { spec+: { vaultConfigurerPodSpec+: { ephemeralContainers+: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } },
      '#withHostAliases':: d.fn(help='', args=[d.arg(name='hostAliases', type=d.T.array)]),
      withHostAliases(hostAliases): { spec+: { vaultConfigurerPodSpec+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } },
      '#withHostAliasesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostAliases', type=d.T.array)]),
      withHostAliasesMixin(hostAliases): { spec+: { vaultConfigurerPodSpec+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } },
      '#withHostIPC':: d.fn(help='', args=[d.arg(name='hostIPC', type=d.T.boolean)]),
      withHostIPC(hostIPC): { spec+: { vaultConfigurerPodSpec+: { hostIPC: hostIPC } } },
      '#withHostNetwork':: d.fn(help='', args=[d.arg(name='hostNetwork', type=d.T.boolean)]),
      withHostNetwork(hostNetwork): { spec+: { vaultConfigurerPodSpec+: { hostNetwork: hostNetwork } } },
      '#withHostPID':: d.fn(help='', args=[d.arg(name='hostPID', type=d.T.boolean)]),
      withHostPID(hostPID): { spec+: { vaultConfigurerPodSpec+: { hostPID: hostPID } } },
      '#withHostname':: d.fn(help='', args=[d.arg(name='hostname', type=d.T.string)]),
      withHostname(hostname): { spec+: { vaultConfigurerPodSpec+: { hostname: hostname } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { vaultConfigurerPodSpec+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { vaultConfigurerPodSpec+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withInitContainers':: d.fn(help='', args=[d.arg(name='initContainers', type=d.T.array)]),
      withInitContainers(initContainers): { spec+: { vaultConfigurerPodSpec+: { initContainers: if std.isArray(v=initContainers) then initContainers else [initContainers] } } },
      '#withInitContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='initContainers', type=d.T.array)]),
      withInitContainersMixin(initContainers): { spec+: { vaultConfigurerPodSpec+: { initContainers+: if std.isArray(v=initContainers) then initContainers else [initContainers] } } },
      '#withNodeName':: d.fn(help='', args=[d.arg(name='nodeName', type=d.T.string)]),
      withNodeName(nodeName): { spec+: { vaultConfigurerPodSpec+: { nodeName: nodeName } } },
      '#withNodeSelector':: d.fn(help='', args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { vaultConfigurerPodSpec+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { vaultConfigurerPodSpec+: { nodeSelector+: nodeSelector } } },
      '#withOverhead':: d.fn(help='', args=[d.arg(name='overhead', type=d.T.object)]),
      withOverhead(overhead): { spec+: { vaultConfigurerPodSpec+: { overhead: overhead } } },
      '#withOverheadMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overhead', type=d.T.object)]),
      withOverheadMixin(overhead): { spec+: { vaultConfigurerPodSpec+: { overhead+: overhead } } },
      '#withPreemptionPolicy':: d.fn(help='', args=[d.arg(name='preemptionPolicy', type=d.T.string)]),
      withPreemptionPolicy(preemptionPolicy): { spec+: { vaultConfigurerPodSpec+: { preemptionPolicy: preemptionPolicy } } },
      '#withPriority':: d.fn(help='', args=[d.arg(name='priority', type=d.T.integer)]),
      withPriority(priority): { spec+: { vaultConfigurerPodSpec+: { priority: priority } } },
      '#withPriorityClassName':: d.fn(help='', args=[d.arg(name='priorityClassName', type=d.T.string)]),
      withPriorityClassName(priorityClassName): { spec+: { vaultConfigurerPodSpec+: { priorityClassName: priorityClassName } } },
      '#withReadinessGates':: d.fn(help='', args=[d.arg(name='readinessGates', type=d.T.array)]),
      withReadinessGates(readinessGates): { spec+: { vaultConfigurerPodSpec+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
      '#withReadinessGatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='readinessGates', type=d.T.array)]),
      withReadinessGatesMixin(readinessGates): { spec+: { vaultConfigurerPodSpec+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
      '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
      withRestartPolicy(restartPolicy): { spec+: { vaultConfigurerPodSpec+: { restartPolicy: restartPolicy } } },
      '#withRuntimeClassName':: d.fn(help='', args=[d.arg(name='runtimeClassName', type=d.T.string)]),
      withRuntimeClassName(runtimeClassName): { spec+: { vaultConfigurerPodSpec+: { runtimeClassName: runtimeClassName } } },
      '#withSchedulerName':: d.fn(help='', args=[d.arg(name='schedulerName', type=d.T.string)]),
      withSchedulerName(schedulerName): { spec+: { vaultConfigurerPodSpec+: { schedulerName: schedulerName } } },
      '#withServiceAccount':: d.fn(help='', args=[d.arg(name='serviceAccount', type=d.T.string)]),
      withServiceAccount(serviceAccount): { spec+: { vaultConfigurerPodSpec+: { serviceAccount: serviceAccount } } },
      '#withServiceAccountName':: d.fn(help='', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { vaultConfigurerPodSpec+: { serviceAccountName: serviceAccountName } } },
      '#withSetHostnameAsFQDN':: d.fn(help='', args=[d.arg(name='setHostnameAsFQDN', type=d.T.boolean)]),
      withSetHostnameAsFQDN(setHostnameAsFQDN): { spec+: { vaultConfigurerPodSpec+: { setHostnameAsFQDN: setHostnameAsFQDN } } },
      '#withShareProcessNamespace':: d.fn(help='', args=[d.arg(name='shareProcessNamespace', type=d.T.boolean)]),
      withShareProcessNamespace(shareProcessNamespace): { spec+: { vaultConfigurerPodSpec+: { shareProcessNamespace: shareProcessNamespace } } },
      '#withSubdomain':: d.fn(help='', args=[d.arg(name='subdomain', type=d.T.string)]),
      withSubdomain(subdomain): { spec+: { vaultConfigurerPodSpec+: { subdomain: subdomain } } },
      '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
      withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { vaultConfigurerPodSpec+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } },
      '#withTolerations':: d.fn(help='', args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { vaultConfigurerPodSpec+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { vaultConfigurerPodSpec+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTopologySpreadConstraints':: d.fn(help='', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
      withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { vaultConfigurerPodSpec+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } },
      '#withTopologySpreadConstraintsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
      withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { vaultConfigurerPodSpec+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } },
      '#withVolumes':: d.fn(help='', args=[d.arg(name='volumes', type=d.T.array)]),
      withVolumes(volumes): { spec+: { vaultConfigurerPodSpec+: { volumes: if std.isArray(v=volumes) then volumes else [volumes] } } },
      '#withVolumesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
      withVolumesMixin(volumes): { spec+: { vaultConfigurerPodSpec+: { volumes+: if std.isArray(v=volumes) then volumes else [volumes] } } },
    },
    '#vaultContainerSpec':: d.obj(help=''),
    vaultContainerSpec: {
      '#env':: d.obj(help=''),
      env: {
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help=''),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
          },
          '#fieldRef':: d.obj(help=''),
          fieldRef: {
            '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
            '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
          },
          '#resourceFieldRef':: d.obj(help=''),
          resourceFieldRef: {
            '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
            withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
            '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
            withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
            '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
            withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
          },
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
          },
        },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#envFrom':: d.obj(help=''),
      envFrom: {
        '#configMapRef':: d.obj(help=''),
        configMapRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { configMapRef+: { name: name } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { configMapRef+: { optional: optional } },
        },
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { secretRef+: { name: name } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { secretRef+: { optional: optional } },
        },
        '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
        withPrefix(prefix): { prefix: prefix },
      },
      '#lifecycle':: d.obj(help=''),
      lifecycle: {
        '#postStart':: d.obj(help=''),
        postStart: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { httpGet+: { host: host } } } } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { httpGet+: { path: path } } } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { httpGet+: { port: port } } } } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { spec+: { vaultContainerSpec+: { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } } } },
          },
        },
        '#preStop':: d.obj(help=''),
        preStop: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { httpGet+: { host: host } } } } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { httpGet+: { path: path } } } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { httpGet+: { port: port } } } } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { spec+: { vaultContainerSpec+: { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } } } },
          },
        },
      },
      '#livenessProbe':: d.obj(help=''),
      livenessProbe: {
        '#exec':: d.obj(help=''),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { spec+: { vaultContainerSpec+: { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { spec+: { vaultContainerSpec+: { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help=''),
        httpGet: {
          '#httpHeaders':: d.obj(help=''),
          httpHeaders: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { vaultContainerSpec+: { livenessProbe+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { spec+: { vaultContainerSpec+: { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { spec+: { vaultContainerSpec+: { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { spec+: { vaultContainerSpec+: { livenessProbe+: { httpGet+: { path: path } } } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { spec+: { vaultContainerSpec+: { livenessProbe+: { httpGet+: { port: port } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { spec+: { vaultContainerSpec+: { livenessProbe+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { vaultContainerSpec+: { livenessProbe+: { tcpSocket+: { host: host } } } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { spec+: { vaultContainerSpec+: { livenessProbe+: { tcpSocket+: { port: port } } } } },
        },
        '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { vaultContainerSpec+: { livenessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { vaultContainerSpec+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { vaultContainerSpec+: { livenessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { vaultContainerSpec+: { livenessProbe+: { successThreshold: successThreshold } } } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { vaultContainerSpec+: { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } },
        '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { vaultContainerSpec+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#ports':: d.obj(help=''),
      ports: {
        '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
        withContainerPort(containerPort): { containerPort: containerPort },
        '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
        withHostIP(hostIP): { hostIP: hostIP },
        '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
        withHostPort(hostPort): { hostPort: hostPort },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
        withProtocol(protocol): { protocol: protocol },
      },
      '#readinessProbe':: d.obj(help=''),
      readinessProbe: {
        '#exec':: d.obj(help=''),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { spec+: { vaultContainerSpec+: { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { spec+: { vaultContainerSpec+: { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help=''),
        httpGet: {
          '#httpHeaders':: d.obj(help=''),
          httpHeaders: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { vaultContainerSpec+: { readinessProbe+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { spec+: { vaultContainerSpec+: { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { spec+: { vaultContainerSpec+: { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { spec+: { vaultContainerSpec+: { readinessProbe+: { httpGet+: { path: path } } } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { spec+: { vaultContainerSpec+: { readinessProbe+: { httpGet+: { port: port } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { spec+: { vaultContainerSpec+: { readinessProbe+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { vaultContainerSpec+: { readinessProbe+: { tcpSocket+: { host: host } } } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { spec+: { vaultContainerSpec+: { readinessProbe+: { tcpSocket+: { port: port } } } } },
        },
        '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { vaultContainerSpec+: { readinessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { vaultContainerSpec+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { vaultContainerSpec+: { readinessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { vaultContainerSpec+: { readinessProbe+: { successThreshold: successThreshold } } } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { vaultContainerSpec+: { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } },
        '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { vaultContainerSpec+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#resources':: d.obj(help=''),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { spec+: { vaultContainerSpec+: { resources+: { limits: limits } } } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { spec+: { vaultContainerSpec+: { resources+: { limits+: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { spec+: { vaultContainerSpec+: { resources+: { requests: requests } } } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { spec+: { vaultContainerSpec+: { resources+: { requests+: requests } } } },
      },
      '#securityContext':: d.obj(help=''),
      securityContext: {
        '#capabilities':: d.obj(help=''),
        capabilities: {
          '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
          withAdd(add): { spec+: { vaultContainerSpec+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } },
          '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
          withAddMixin(add): { spec+: { vaultContainerSpec+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } },
          '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
          withDrop(drop): { spec+: { vaultContainerSpec+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } },
          '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
          withDropMixin(drop): { spec+: { vaultContainerSpec+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } },
        },
        '#seLinuxOptions':: d.obj(help=''),
        seLinuxOptions: {
          '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
          withLevel(level): { spec+: { vaultContainerSpec+: { securityContext+: { seLinuxOptions+: { level: level } } } } },
          '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
          withRole(role): { spec+: { vaultContainerSpec+: { securityContext+: { seLinuxOptions+: { role: role } } } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { vaultContainerSpec+: { securityContext+: { seLinuxOptions+: { type: type } } } } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { spec+: { vaultContainerSpec+: { securityContext+: { seLinuxOptions+: { user: user } } } } },
        },
        '#seccompProfile':: d.obj(help=''),
        seccompProfile: {
          '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
          withLocalhostProfile(localhostProfile): { spec+: { vaultContainerSpec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { vaultContainerSpec+: { securityContext+: { seccompProfile+: { type: type } } } } },
        },
        '#windowsOptions':: d.obj(help=''),
        windowsOptions: {
          '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
          withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { vaultContainerSpec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } },
          '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
          withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { vaultContainerSpec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } },
          '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
          withRunAsUserName(runAsUserName): { spec+: { vaultContainerSpec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } },
        },
        '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
        withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { vaultContainerSpec+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } },
        '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
        withPrivileged(privileged): { spec+: { vaultContainerSpec+: { securityContext+: { privileged: privileged } } } },
        '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
        withProcMount(procMount): { spec+: { vaultContainerSpec+: { securityContext+: { procMount: procMount } } } },
        '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
        withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { vaultContainerSpec+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } },
        '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
        withRunAsGroup(runAsGroup): { spec+: { vaultContainerSpec+: { securityContext+: { runAsGroup: runAsGroup } } } },
        '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
        withRunAsNonRoot(runAsNonRoot): { spec+: { vaultContainerSpec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } },
        '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
        withRunAsUser(runAsUser): { spec+: { vaultContainerSpec+: { securityContext+: { runAsUser: runAsUser } } } },
      },
      '#startupProbe':: d.obj(help=''),
      startupProbe: {
        '#exec':: d.obj(help=''),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { spec+: { vaultContainerSpec+: { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { spec+: { vaultContainerSpec+: { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help=''),
        httpGet: {
          '#httpHeaders':: d.obj(help=''),
          httpHeaders: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { vaultContainerSpec+: { startupProbe+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { spec+: { vaultContainerSpec+: { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { spec+: { vaultContainerSpec+: { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { spec+: { vaultContainerSpec+: { startupProbe+: { httpGet+: { path: path } } } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { spec+: { vaultContainerSpec+: { startupProbe+: { httpGet+: { port: port } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { spec+: { vaultContainerSpec+: { startupProbe+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { spec+: { vaultContainerSpec+: { startupProbe+: { tcpSocket+: { host: host } } } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { spec+: { vaultContainerSpec+: { startupProbe+: { tcpSocket+: { port: port } } } } },
        },
        '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { vaultContainerSpec+: { startupProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { vaultContainerSpec+: { startupProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { vaultContainerSpec+: { startupProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { vaultContainerSpec+: { startupProbe+: { successThreshold: successThreshold } } } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { vaultContainerSpec+: { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } },
        '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { vaultContainerSpec+: { startupProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#volumeDevices':: d.obj(help=''),
      volumeDevices: {
        '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
        withDevicePath(devicePath): { devicePath: devicePath },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#volumeMounts':: d.obj(help=''),
      volumeMounts: {
        '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
        withMountPath(mountPath): { mountPath: mountPath },
        '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
        withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { readOnly: readOnly },
        '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
        withSubPath(subPath): { subPath: subPath },
        '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
        withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
      },
      '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
      withArgs(args): { spec+: { vaultContainerSpec+: { args: if std.isArray(v=args) then args else [args] } } },
      '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
      withArgsMixin(args): { spec+: { vaultContainerSpec+: { args+: if std.isArray(v=args) then args else [args] } } },
      '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
      withCommand(command): { spec+: { vaultContainerSpec+: { command: if std.isArray(v=command) then command else [command] } } },
      '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
      withCommandMixin(command): { spec+: { vaultContainerSpec+: { command+: if std.isArray(v=command) then command else [command] } } },
      '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
      withEnv(env): { spec+: { vaultContainerSpec+: { env: if std.isArray(v=env) then env else [env] } } },
      '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
      withEnvFrom(envFrom): { spec+: { vaultContainerSpec+: { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] } } },
      '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
      withEnvFromMixin(envFrom): { spec+: { vaultContainerSpec+: { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] } } },
      '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
      withEnvMixin(env): { spec+: { vaultContainerSpec+: { env+: if std.isArray(v=env) then env else [env] } } },
      '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { vaultContainerSpec+: { image: image } } },
      '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { spec+: { vaultContainerSpec+: { imagePullPolicy: imagePullPolicy } } },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { vaultContainerSpec+: { name: name } } },
      '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
      withPorts(ports): { spec+: { vaultContainerSpec+: { ports: if std.isArray(v=ports) then ports else [ports] } } },
      '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
      withPortsMixin(ports): { spec+: { vaultContainerSpec+: { ports+: if std.isArray(v=ports) then ports else [ports] } } },
      '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
      withStdin(stdin): { spec+: { vaultContainerSpec+: { stdin: stdin } } },
      '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
      withStdinOnce(stdinOnce): { spec+: { vaultContainerSpec+: { stdinOnce: stdinOnce } } },
      '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
      withTerminationMessagePath(terminationMessagePath): { spec+: { vaultContainerSpec+: { terminationMessagePath: terminationMessagePath } } },
      '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
      withTerminationMessagePolicy(terminationMessagePolicy): { spec+: { vaultContainerSpec+: { terminationMessagePolicy: terminationMessagePolicy } } },
      '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
      withTty(tty): { spec+: { vaultContainerSpec+: { tty: tty } } },
      '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
      withVolumeDevices(volumeDevices): { spec+: { vaultContainerSpec+: { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] } } },
      '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
      withVolumeDevicesMixin(volumeDevices): { spec+: { vaultContainerSpec+: { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] } } },
      '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
      withVolumeMounts(volumeMounts): { spec+: { vaultContainerSpec+: { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } } },
      '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
      withVolumeMountsMixin(volumeMounts): { spec+: { vaultContainerSpec+: { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } } },
      '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
      withWorkingDir(workingDir): { spec+: { vaultContainerSpec+: { workingDir: workingDir } } },
    },
    '#vaultEnvsConfig':: d.obj(help=''),
    vaultEnvsConfig: {
      '#valueFrom':: d.obj(help=''),
      valueFrom: {
        '#configMapKeyRef':: d.obj(help=''),
        configMapKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
        },
        '#fieldRef':: d.obj(help=''),
        fieldRef: {
          '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
          withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
          '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
          withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
        },
        '#resourceFieldRef':: d.obj(help=''),
        resourceFieldRef: {
          '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
          withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
          '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
          withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
          '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
          withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
        },
        '#secretKeyRef':: d.obj(help=''),
        secretKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
        },
      },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
      withValue(value): { value: value },
    },
    '#vaultInitContainers':: d.obj(help=''),
    vaultInitContainers: {
      '#env':: d.obj(help=''),
      env: {
        '#valueFrom':: d.obj(help=''),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help=''),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
          },
          '#fieldRef':: d.obj(help=''),
          fieldRef: {
            '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
            '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
          },
          '#resourceFieldRef':: d.obj(help=''),
          resourceFieldRef: {
            '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
            withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
            '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
            withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
            '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
            withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
          },
          '#secretKeyRef':: d.obj(help=''),
          secretKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
          },
        },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#envFrom':: d.obj(help=''),
      envFrom: {
        '#configMapRef':: d.obj(help=''),
        configMapRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { configMapRef+: { name: name } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { configMapRef+: { optional: optional } },
        },
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { secretRef+: { name: name } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { secretRef+: { optional: optional } },
        },
        '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
        withPrefix(prefix): { prefix: prefix },
      },
      '#lifecycle':: d.obj(help=''),
      lifecycle: {
        '#postStart':: d.obj(help=''),
        postStart: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
          },
        },
        '#preStop':: d.obj(help=''),
        preStop: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
          },
        },
      },
      '#livenessProbe':: d.obj(help=''),
      livenessProbe: {
        '#exec':: d.obj(help=''),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
        },
        '#httpGet':: d.obj(help=''),
        httpGet: {
          '#httpHeaders':: d.obj(help=''),
          httpHeaders: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
        },
        '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
        '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
        '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
        '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
        '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
      },
      '#ports':: d.obj(help=''),
      ports: {
        '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
        withContainerPort(containerPort): { containerPort: containerPort },
        '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
        withHostIP(hostIP): { hostIP: hostIP },
        '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
        withHostPort(hostPort): { hostPort: hostPort },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
        withProtocol(protocol): { protocol: protocol },
      },
      '#readinessProbe':: d.obj(help=''),
      readinessProbe: {
        '#exec':: d.obj(help=''),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
        },
        '#httpGet':: d.obj(help=''),
        httpGet: {
          '#httpHeaders':: d.obj(help=''),
          httpHeaders: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
        },
        '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
        '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
        '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
        '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
        '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
      },
      '#resources':: d.obj(help=''),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
        withLimits(limits): { resources+: { limits: limits } },
        '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
        withLimitsMixin(limits): { resources+: { limits+: limits } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
        withRequests(requests): { resources+: { requests: requests } },
        '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
        withRequestsMixin(requests): { resources+: { requests+: requests } },
      },
      '#securityContext':: d.obj(help=''),
      securityContext: {
        '#capabilities':: d.obj(help=''),
        capabilities: {
          '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
          withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
          '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
          withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
          '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
          withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
          '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
          withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
        },
        '#seLinuxOptions':: d.obj(help=''),
        seLinuxOptions: {
          '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
          withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
          '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
          withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
        },
        '#seccompProfile':: d.obj(help=''),
        seccompProfile: {
          '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
          withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { securityContext+: { seccompProfile+: { type: type } } },
        },
        '#windowsOptions':: d.obj(help=''),
        windowsOptions: {
          '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
          withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
          '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
          withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
          '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
          withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
        },
        '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
        withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
        '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
        withPrivileged(privileged): { securityContext+: { privileged: privileged } },
        '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
        withProcMount(procMount): { securityContext+: { procMount: procMount } },
        '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
        withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
        '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
        withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
        '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
        withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
        '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
        withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
      },
      '#startupProbe':: d.obj(help=''),
      startupProbe: {
        '#exec':: d.obj(help=''),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
        },
        '#httpGet':: d.obj(help=''),
        httpGet: {
          '#httpHeaders':: d.obj(help=''),
          httpHeaders: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { startupProbe+: { httpGet+: { host: host } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { startupProbe+: { httpGet+: { path: path } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { startupProbe+: { httpGet+: { port: port } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
          '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
          withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
        },
        '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
        '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
        '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
        '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
        '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
      },
      '#volumeDevices':: d.obj(help=''),
      volumeDevices: {
        '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
        withDevicePath(devicePath): { devicePath: devicePath },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#volumeMounts':: d.obj(help=''),
      volumeMounts: {
        '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
        withMountPath(mountPath): { mountPath: mountPath },
        '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
        withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { readOnly: readOnly },
        '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
        withSubPath(subPath): { subPath: subPath },
        '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
        withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
      },
      '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
      withArgs(args): { args: if std.isArray(v=args) then args else [args] },
      '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
      withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
      '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
      withCommand(command): { command: if std.isArray(v=command) then command else [command] },
      '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
      withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
      '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
      withEnv(env): { env: if std.isArray(v=env) then env else [env] },
      '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
      withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
      '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
      withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
      '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
      withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
      '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { image: image },
      '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
      withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
      withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
      '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
      withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
      '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
      withStdin(stdin): { stdin: stdin },
      '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
      withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
      '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
      withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
      '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
      withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
      '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
      withTty(tty): { tty: tty },
      '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
      withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
      '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
      withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
      '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
      withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
      '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
      withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
      '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
      withWorkingDir(workingDir): { workingDir: workingDir },
    },
    '#vaultPodSpec':: d.obj(help=''),
    vaultPodSpec: {
      '#affinity':: d.obj(help=''),
      affinity: {
        '#nodeAffinity':: d.obj(help=''),
        nodeAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#preference':: d.obj(help=''),
            preference: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#matchFields':: d.obj(help=''),
              matchFields: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
              '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
            },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { weight: weight },
          },
          '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          requiredDuringSchedulingIgnoredDuringExecution: {
            '#nodeSelectorTerms':: d.obj(help=''),
            nodeSelectorTerms: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#matchFields':: d.obj(help=''),
              matchFields: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
              '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
              '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
              withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
            },
            '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
            withNodeSelectorTerms(nodeSelectorTerms): { spec+: { vaultPodSpec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } },
            '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
            withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { vaultPodSpec+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } },
          },
          '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
        },
        '#podAffinity':: d.obj(help=''),
        podAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#podAffinityTerm':: d.obj(help=''),
            podAffinityTerm: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
              },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
            },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { weight: weight },
          },
          '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          requiredDuringSchedulingIgnoredDuringExecution: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
            },
            '#namespaceSelector':: d.obj(help=''),
            namespaceSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
            },
            '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { topologyKey: topologyKey },
          },
          '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
        },
        '#podAntiAffinity':: d.obj(help=''),
        podAntiAffinity: {
          '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          preferredDuringSchedulingIgnoredDuringExecution: {
            '#podAffinityTerm':: d.obj(help=''),
            podAffinityTerm: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
              },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
            },
            '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
            withWeight(weight): { weight: weight },
          },
          '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
          requiredDuringSchedulingIgnoredDuringExecution: {
            '#labelSelector':: d.obj(help=''),
            labelSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
            },
            '#namespaceSelector':: d.obj(help=''),
            namespaceSelector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
            },
            '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
            withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
            '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
            withTopologyKey(topologyKey): { topologyKey: topologyKey },
          },
          '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
          '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
          withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { vaultPodSpec+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } },
        },
      },
      '#containers':: d.obj(help=''),
      containers: {
        '#env':: d.obj(help=''),
        env: {
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help=''),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
            },
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
            },
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
            },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#envFrom':: d.obj(help=''),
        envFrom: {
          '#configMapRef':: d.obj(help=''),
          configMapRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMapRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMapRef+: { optional: optional } },
          },
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secretRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secretRef+: { optional: optional } },
          },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
        },
        '#lifecycle':: d.obj(help=''),
        lifecycle: {
          '#postStart':: d.obj(help=''),
          postStart: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
            },
          },
          '#preStop':: d.obj(help=''),
          preStop: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
            },
          },
        },
        '#livenessProbe':: d.obj(help=''),
        livenessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#ports':: d.obj(help=''),
        ports: {
          '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
          withContainerPort(containerPort): { containerPort: containerPort },
          '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
          withHostIP(hostIP): { hostIP: hostIP },
          '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
          withHostPort(hostPort): { hostPort: hostPort },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
        },
        '#readinessProbe':: d.obj(help=''),
        readinessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { resources+: { limits: limits } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { resources+: { limits+: limits } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { resources+: { requests: requests } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { resources+: { requests+: requests } },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seccompProfile+: { type: type } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { securityContext+: { privileged: privileged } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { securityContext+: { procMount: procMount } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
        },
        '#startupProbe':: d.obj(help=''),
        startupProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { startupProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#volumeDevices':: d.obj(help=''),
        volumeDevices: {
          '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
          withDevicePath(devicePath): { devicePath: devicePath },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#volumeMounts':: d.obj(help=''),
        volumeMounts: {
          '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
          withMountPath(mountPath): { mountPath: mountPath },
          '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
          withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { readOnly: readOnly },
          '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
          withSubPath(subPath): { subPath: subPath },
          '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
          withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
        },
        '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
        withArgs(args): { args: if std.isArray(v=args) then args else [args] },
        '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
        withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
        '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
        withCommand(command): { command: if std.isArray(v=command) then command else [command] },
        '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
        withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
        '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { env: if std.isArray(v=env) then env else [env] },
        '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { image: image },
        '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
        '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
        withStdin(stdin): { stdin: stdin },
        '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
        withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
        '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
        withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
        '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
        withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
        '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
        withTty(tty): { tty: tty },
        '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
        withWorkingDir(workingDir): { workingDir: workingDir },
      },
      '#dnsConfig':: d.obj(help=''),
      dnsConfig: {
        '#options':: d.obj(help=''),
        options: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withNameservers':: d.fn(help='', args=[d.arg(name='nameservers', type=d.T.array)]),
        withNameservers(nameservers): { spec+: { vaultPodSpec+: { dnsConfig+: { nameservers: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } },
        '#withNameserversMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nameservers', type=d.T.array)]),
        withNameserversMixin(nameservers): { spec+: { vaultPodSpec+: { dnsConfig+: { nameservers+: if std.isArray(v=nameservers) then nameservers else [nameservers] } } } },
        '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.array)]),
        withOptions(options): { spec+: { vaultPodSpec+: { dnsConfig+: { options: if std.isArray(v=options) then options else [options] } } } },
        '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.array)]),
        withOptionsMixin(options): { spec+: { vaultPodSpec+: { dnsConfig+: { options+: if std.isArray(v=options) then options else [options] } } } },
        '#withSearches':: d.fn(help='', args=[d.arg(name='searches', type=d.T.array)]),
        withSearches(searches): { spec+: { vaultPodSpec+: { dnsConfig+: { searches: if std.isArray(v=searches) then searches else [searches] } } } },
        '#withSearchesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='searches', type=d.T.array)]),
        withSearchesMixin(searches): { spec+: { vaultPodSpec+: { dnsConfig+: { searches+: if std.isArray(v=searches) then searches else [searches] } } } },
      },
      '#ephemeralContainers':: d.obj(help=''),
      ephemeralContainers: {
        '#env':: d.obj(help=''),
        env: {
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help=''),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
            },
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
            },
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
            },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#envFrom':: d.obj(help=''),
        envFrom: {
          '#configMapRef':: d.obj(help=''),
          configMapRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMapRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMapRef+: { optional: optional } },
          },
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secretRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secretRef+: { optional: optional } },
          },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
        },
        '#lifecycle':: d.obj(help=''),
        lifecycle: {
          '#postStart':: d.obj(help=''),
          postStart: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
            },
          },
          '#preStop':: d.obj(help=''),
          preStop: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
            },
          },
        },
        '#livenessProbe':: d.obj(help=''),
        livenessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#ports':: d.obj(help=''),
        ports: {
          '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
          withContainerPort(containerPort): { containerPort: containerPort },
          '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
          withHostIP(hostIP): { hostIP: hostIP },
          '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
          withHostPort(hostPort): { hostPort: hostPort },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
        },
        '#readinessProbe':: d.obj(help=''),
        readinessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { resources+: { limits: limits } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { resources+: { limits+: limits } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { resources+: { requests: requests } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { resources+: { requests+: requests } },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seccompProfile+: { type: type } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { securityContext+: { privileged: privileged } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { securityContext+: { procMount: procMount } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
        },
        '#startupProbe':: d.obj(help=''),
        startupProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { startupProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#volumeDevices':: d.obj(help=''),
        volumeDevices: {
          '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
          withDevicePath(devicePath): { devicePath: devicePath },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#volumeMounts':: d.obj(help=''),
        volumeMounts: {
          '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
          withMountPath(mountPath): { mountPath: mountPath },
          '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
          withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { readOnly: readOnly },
          '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
          withSubPath(subPath): { subPath: subPath },
          '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
          withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
        },
        '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
        withArgs(args): { args: if std.isArray(v=args) then args else [args] },
        '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
        withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
        '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
        withCommand(command): { command: if std.isArray(v=command) then command else [command] },
        '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
        withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
        '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { env: if std.isArray(v=env) then env else [env] },
        '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { image: image },
        '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
        '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
        withStdin(stdin): { stdin: stdin },
        '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
        withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
        '#withTargetContainerName':: d.fn(help='', args=[d.arg(name='targetContainerName', type=d.T.string)]),
        withTargetContainerName(targetContainerName): { targetContainerName: targetContainerName },
        '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
        withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
        '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
        withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
        '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
        withTty(tty): { tty: tty },
        '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
        withWorkingDir(workingDir): { workingDir: workingDir },
      },
      '#hostAliases':: d.obj(help=''),
      hostAliases: {
        '#withHostnames':: d.fn(help='', args=[d.arg(name='hostnames', type=d.T.array)]),
        withHostnames(hostnames): { hostnames: if std.isArray(v=hostnames) then hostnames else [hostnames] },
        '#withHostnamesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostnames', type=d.T.array)]),
        withHostnamesMixin(hostnames): { hostnames+: if std.isArray(v=hostnames) then hostnames else [hostnames] },
        '#withIp':: d.fn(help='', args=[d.arg(name='ip', type=d.T.string)]),
        withIp(ip): { ip: ip },
      },
      '#imagePullSecrets':: d.obj(help=''),
      imagePullSecrets: {
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#initContainers':: d.obj(help=''),
      initContainers: {
        '#env':: d.obj(help=''),
        env: {
          '#valueFrom':: d.obj(help=''),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help=''),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { configMapKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { configMapKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { configMapKeyRef+: { optional: optional } } },
            },
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { valueFrom+: { fieldRef+: { apiVersion: apiVersion } } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { valueFrom+: { fieldRef+: { fieldPath: fieldPath } } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { valueFrom+: { resourceFieldRef+: { containerName: containerName } } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { valueFrom+: { resourceFieldRef+: { divisor: divisor } } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { valueFrom+: { resourceFieldRef+: { resource: resource } } },
            },
            '#secretKeyRef':: d.obj(help=''),
            secretKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { valueFrom+: { secretKeyRef+: { key: key } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { valueFrom+: { secretKeyRef+: { name: name } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { valueFrom+: { secretKeyRef+: { optional: optional } } },
            },
          },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#envFrom':: d.obj(help=''),
        envFrom: {
          '#configMapRef':: d.obj(help=''),
          configMapRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMapRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMapRef+: { optional: optional } },
          },
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secretRef+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secretRef+: { optional: optional } },
          },
          '#withPrefix':: d.fn(help='', args=[d.arg(name='prefix', type=d.T.string)]),
          withPrefix(prefix): { prefix: prefix },
        },
        '#lifecycle':: d.obj(help=''),
        lifecycle: {
          '#postStart':: d.obj(help=''),
          postStart: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { postStart+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { postStart+: { tcpSocket+: { port: port } } } },
            },
          },
          '#preStop':: d.obj(help=''),
          preStop: {
            '#exec':: d.obj(help=''),
            exec: {
              '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
              withCommand(command): { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } },
              '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
              withCommandMixin(command): { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } },
            },
            '#httpGet':: d.obj(help=''),
            httpGet: {
              '#httpHeaders':: d.obj(help=''),
              httpHeaders: {
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { name: name },
                '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
                withValue(value): { value: value },
              },
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { httpGet+: { host: host } } } },
              '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeaders(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
              withHttpHeadersMixin(httpHeaders): { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { lifecycle+: { preStop+: { httpGet+: { path: path } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { httpGet+: { port: port } } } },
              '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
              withScheme(scheme): { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } },
            },
            '#tcpSocket':: d.obj(help=''),
            tcpSocket: {
              '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
              withHost(host): { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } },
              '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
              withPort(port): { lifecycle+: { preStop+: { tcpSocket+: { port: port } } } },
            },
          },
        },
        '#livenessProbe':: d.obj(help=''),
        livenessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { livenessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { livenessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { livenessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { livenessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { livenessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { livenessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { livenessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { livenessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { livenessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { livenessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { livenessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { livenessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#ports':: d.obj(help=''),
        ports: {
          '#withContainerPort':: d.fn(help='', args=[d.arg(name='containerPort', type=d.T.integer)]),
          withContainerPort(containerPort): { containerPort: containerPort },
          '#withHostIP':: d.fn(help='', args=[d.arg(name='hostIP', type=d.T.string)]),
          withHostIP(hostIP): { hostIP: hostIP },
          '#withHostPort':: d.fn(help='', args=[d.arg(name='hostPort', type=d.T.integer)]),
          withHostPort(hostPort): { hostPort: hostPort },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
        },
        '#readinessProbe':: d.obj(help=''),
        readinessProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { readinessProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { readinessProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { readinessProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { readinessProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { readinessProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { readinessProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { readinessProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { readinessProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { readinessProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { readinessProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { readinessProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { readinessProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { resources+: { limits: limits } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { resources+: { limits+: limits } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { resources+: { requests: requests } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { resources+: { requests+: requests } },
        },
        '#securityContext':: d.obj(help=''),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { securityContext+: { seccompProfile+: { type: type } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { securityContext+: { privileged: privileged } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { securityContext+: { procMount: procMount } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
        },
        '#startupProbe':: d.obj(help=''),
        startupProbe: {
          '#exec':: d.obj(help=''),
          exec: {
            '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
            withCommand(command): { startupProbe+: { exec+: { command: if std.isArray(v=command) then command else [command] } } },
            '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
            withCommandMixin(command): { startupProbe+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } },
          },
          '#httpGet':: d.obj(help=''),
          httpGet: {
            '#httpHeaders':: d.obj(help=''),
            httpHeaders: {
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { name: name },
              '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
              withValue(value): { value: value },
            },
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { httpGet+: { host: host } } },
            '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeaders(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
            withHttpHeadersMixin(httpHeaders): { startupProbe+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { startupProbe+: { httpGet+: { path: path } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { httpGet+: { port: port } } },
            '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
            withScheme(scheme): { startupProbe+: { httpGet+: { scheme: scheme } } },
          },
          '#tcpSocket':: d.obj(help=''),
          tcpSocket: {
            '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
            withHost(host): { startupProbe+: { tcpSocket+: { host: host } } },
            '#withPort':: d.fn(help='', args=[d.arg(name='port', type=d.T.any)]),
            withPort(port): { startupProbe+: { tcpSocket+: { port: port } } },
          },
          '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { startupProbe+: { failureThreshold: failureThreshold } },
          '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { startupProbe+: { initialDelaySeconds: initialDelaySeconds } },
          '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { startupProbe+: { periodSeconds: periodSeconds } },
          '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { startupProbe+: { successThreshold: successThreshold } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { startupProbe+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } },
          '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { startupProbe+: { timeoutSeconds: timeoutSeconds } },
        },
        '#volumeDevices':: d.obj(help=''),
        volumeDevices: {
          '#withDevicePath':: d.fn(help='', args=[d.arg(name='devicePath', type=d.T.string)]),
          withDevicePath(devicePath): { devicePath: devicePath },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#volumeMounts':: d.obj(help=''),
        volumeMounts: {
          '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
          withMountPath(mountPath): { mountPath: mountPath },
          '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
          withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { readOnly: readOnly },
          '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
          withSubPath(subPath): { subPath: subPath },
          '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
          withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
        },
        '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
        withArgs(args): { args: if std.isArray(v=args) then args else [args] },
        '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
        withArgsMixin(args): { args+: if std.isArray(v=args) then args else [args] },
        '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
        withCommand(command): { command: if std.isArray(v=command) then command else [command] },
        '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
        withCommandMixin(command): { command+: if std.isArray(v=command) then command else [command] },
        '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { env: if std.isArray(v=env) then env else [env] },
        '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFrom(envFrom): { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
        withEnvFromMixin(envFrom): { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] },
        '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { env+: if std.isArray(v=env) then env else [env] },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { image: image },
        '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
        withImagePullPolicy(imagePullPolicy): { imagePullPolicy: imagePullPolicy },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
        withPorts(ports): { ports: if std.isArray(v=ports) then ports else [ports] },
        '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
        withPortsMixin(ports): { ports+: if std.isArray(v=ports) then ports else [ports] },
        '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
        withStdin(stdin): { stdin: stdin },
        '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
        withStdinOnce(stdinOnce): { stdinOnce: stdinOnce },
        '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
        withTerminationMessagePath(terminationMessagePath): { terminationMessagePath: terminationMessagePath },
        '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
        withTerminationMessagePolicy(terminationMessagePolicy): { terminationMessagePolicy: terminationMessagePolicy },
        '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
        withTty(tty): { tty: tty },
        '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevices(volumeDevices): { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
        withVolumeDevicesMixin(volumeDevices): { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] },
        '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMounts(volumeMounts): { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
        withVolumeMountsMixin(volumeMounts): { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] },
        '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
        withWorkingDir(workingDir): { workingDir: workingDir },
      },
      '#readinessGates':: d.obj(help=''),
      readinessGates: {
        '#withConditionType':: d.fn(help='', args=[d.arg(name='conditionType', type=d.T.string)]),
        withConditionType(conditionType): { conditionType: conditionType },
      },
      '#securityContext':: d.obj(help=''),
      securityContext: {
        '#seLinuxOptions':: d.obj(help=''),
        seLinuxOptions: {
          '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
          withLevel(level): { spec+: { vaultPodSpec+: { securityContext+: { seLinuxOptions+: { level: level } } } } },
          '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
          withRole(role): { spec+: { vaultPodSpec+: { securityContext+: { seLinuxOptions+: { role: role } } } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { vaultPodSpec+: { securityContext+: { seLinuxOptions+: { type: type } } } } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { spec+: { vaultPodSpec+: { securityContext+: { seLinuxOptions+: { user: user } } } } },
        },
        '#seccompProfile':: d.obj(help=''),
        seccompProfile: {
          '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
          withLocalhostProfile(localhostProfile): { spec+: { vaultPodSpec+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { vaultPodSpec+: { securityContext+: { seccompProfile+: { type: type } } } } },
        },
        '#sysctls':: d.obj(help=''),
        sysctls: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#windowsOptions':: d.obj(help=''),
        windowsOptions: {
          '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
          withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { vaultPodSpec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } },
          '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
          withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { vaultPodSpec+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } },
          '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
          withRunAsUserName(runAsUserName): { spec+: { vaultPodSpec+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } },
        },
        '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
        withFsGroup(fsGroup): { spec+: { vaultPodSpec+: { securityContext+: { fsGroup: fsGroup } } } },
        '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
        withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { vaultPodSpec+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } },
        '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
        withRunAsGroup(runAsGroup): { spec+: { vaultPodSpec+: { securityContext+: { runAsGroup: runAsGroup } } } },
        '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
        withRunAsNonRoot(runAsNonRoot): { spec+: { vaultPodSpec+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } },
        '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
        withRunAsUser(runAsUser): { spec+: { vaultPodSpec+: { securityContext+: { runAsUser: runAsUser } } } },
        '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
        withSupplementalGroups(supplementalGroups): { spec+: { vaultPodSpec+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } },
        '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
        withSupplementalGroupsMixin(supplementalGroups): { spec+: { vaultPodSpec+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } },
        '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
        withSysctls(sysctls): { spec+: { vaultPodSpec+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } },
        '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
        withSysctlsMixin(sysctls): { spec+: { vaultPodSpec+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } },
      },
      '#tolerations':: d.obj(help=''),
      tolerations: {
        '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
        withEffect(effect): { effect: effect },
        '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { key: key },
        '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
        withOperator(operator): { operator: operator },
        '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
        withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
        '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#topologySpreadConstraints':: d.obj(help=''),
      topologySpreadConstraints: {
        '#labelSelector':: d.obj(help=''),
        labelSelector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
        },
        '#withMaxSkew':: d.fn(help='', args=[d.arg(name='maxSkew', type=d.T.integer)]),
        withMaxSkew(maxSkew): { maxSkew: maxSkew },
        '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
        withTopologyKey(topologyKey): { topologyKey: topologyKey },
        '#withWhenUnsatisfiable':: d.fn(help='', args=[d.arg(name='whenUnsatisfiable', type=d.T.string)]),
        withWhenUnsatisfiable(whenUnsatisfiable): { whenUnsatisfiable: whenUnsatisfiable },
      },
      '#volumes':: d.obj(help=''),
      volumes: {
        '#awsElasticBlockStore':: d.obj(help=''),
        awsElasticBlockStore: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { awsElasticBlockStore+: { fsType: fsType } },
          '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
          withPartition(partition): { awsElasticBlockStore+: { partition: partition } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { awsElasticBlockStore+: { readOnly: readOnly } },
          '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
          withVolumeID(volumeID): { awsElasticBlockStore+: { volumeID: volumeID } },
        },
        '#azureDisk':: d.obj(help=''),
        azureDisk: {
          '#withCachingMode':: d.fn(help='', args=[d.arg(name='cachingMode', type=d.T.string)]),
          withCachingMode(cachingMode): { azureDisk+: { cachingMode: cachingMode } },
          '#withDiskName':: d.fn(help='', args=[d.arg(name='diskName', type=d.T.string)]),
          withDiskName(diskName): { azureDisk+: { diskName: diskName } },
          '#withDiskURI':: d.fn(help='', args=[d.arg(name='diskURI', type=d.T.string)]),
          withDiskURI(diskURI): { azureDisk+: { diskURI: diskURI } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { azureDisk+: { fsType: fsType } },
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { azureDisk+: { kind: kind } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { azureDisk+: { readOnly: readOnly } },
        },
        '#azureFile':: d.obj(help=''),
        azureFile: {
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { azureFile+: { readOnly: readOnly } },
          '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
          withSecretName(secretName): { azureFile+: { secretName: secretName } },
          '#withShareName':: d.fn(help='', args=[d.arg(name='shareName', type=d.T.string)]),
          withShareName(shareName): { azureFile+: { shareName: shareName } },
        },
        '#cephfs':: d.obj(help=''),
        cephfs: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { cephfs+: { secretRef+: { name: name } } },
          },
          '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitors(monitors): { cephfs+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitorsMixin(monitors): { cephfs+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { cephfs+: { path: path } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { cephfs+: { readOnly: readOnly } },
          '#withSecretFile':: d.fn(help='', args=[d.arg(name='secretFile', type=d.T.string)]),
          withSecretFile(secretFile): { cephfs+: { secretFile: secretFile } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { cephfs+: { user: user } },
        },
        '#cinder':: d.obj(help=''),
        cinder: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { cinder+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { cinder+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { cinder+: { readOnly: readOnly } },
          '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
          withVolumeID(volumeID): { cinder+: { volumeID: volumeID } },
        },
        '#configMap':: d.obj(help=''),
        configMap: {
          '#items':: d.obj(help=''),
          items: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
            withMode(mode): { mode: mode },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { path: path },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { configMap+: { defaultMode: defaultMode } },
          '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
          withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
          '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
          withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { configMap+: { name: name } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { configMap+: { optional: optional } },
        },
        '#csi':: d.obj(help=''),
        csi: {
          '#nodePublishSecretRef':: d.obj(help=''),
          nodePublishSecretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { csi+: { nodePublishSecretRef+: { name: name } } },
          },
          '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
          withDriver(driver): { csi+: { driver: driver } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { csi+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { csi+: { readOnly: readOnly } },
          '#withVolumeAttributes':: d.fn(help='', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
          withVolumeAttributes(volumeAttributes): { csi+: { volumeAttributes: volumeAttributes } },
          '#withVolumeAttributesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
          withVolumeAttributesMixin(volumeAttributes): { csi+: { volumeAttributes+: volumeAttributes } },
        },
        '#downwardAPI':: d.obj(help=''),
        downwardAPI: {
          '#items':: d.obj(help=''),
          items: {
            '#fieldRef':: d.obj(help=''),
            fieldRef: {
              '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
              withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
              '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
              withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
            },
            '#resourceFieldRef':: d.obj(help=''),
            resourceFieldRef: {
              '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
              withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
              '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
              withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
              '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
              withResource(resource): { resourceFieldRef+: { resource: resource } },
            },
            '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
            withMode(mode): { mode: mode },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { path: path },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { downwardAPI+: { defaultMode: defaultMode } },
          '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
          withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
          '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
          withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
        },
        '#emptyDir':: d.obj(help=''),
        emptyDir: {
          '#withMedium':: d.fn(help='', args=[d.arg(name='medium', type=d.T.string)]),
          withMedium(medium): { emptyDir+: { medium: medium } },
          '#withSizeLimit':: d.fn(help='', args=[d.arg(name='sizeLimit', type=d.T.any)]),
          withSizeLimit(sizeLimit): { emptyDir+: { sizeLimit: sizeLimit } },
        },
        '#ephemeral':: d.obj(help=''),
        ephemeral: {
          '#volumeClaimTemplate':: d.obj(help=''),
          volumeClaimTemplate: {
            '#spec':: d.obj(help=''),
            spec: {
              '#dataSource':: d.obj(help=''),
              dataSource: {
                '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
                withApiGroup(apiGroup): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { apiGroup: apiGroup } } } } },
                '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
                withKind(kind): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { kind: kind } } } } },
                '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
                withName(name): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { name: name } } } } },
              },
              '#resources':: d.obj(help=''),
              resources: {
                '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
                withLimits(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits: limits } } } } },
                '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
                withLimitsMixin(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits+: limits } } } } },
                '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
                withRequests(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests: requests } } } } },
                '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
                withRequestsMixin(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests+: requests } } } } },
              },
              '#selector':: d.obj(help=''),
              selector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels: matchLabels } } } } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels+: matchLabels } } } } },
              },
              '#withAccessModes':: d.fn(help='', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModes(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
              '#withAccessModesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
              withAccessModesMixin(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
              '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
              withStorageClassName(storageClassName): { ephemeral+: { volumeClaimTemplate+: { spec+: { storageClassName: storageClassName } } } },
              '#withVolumeMode':: d.fn(help='', args=[d.arg(name='volumeMode', type=d.T.string)]),
              withVolumeMode(volumeMode): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeMode: volumeMode } } } },
              '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
              withVolumeName(volumeName): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeName: volumeName } } } },
            },
            '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
            withMetadata(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata: metadata } } },
            '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
            withMetadataMixin(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata+: metadata } } },
          },
        },
        '#fc':: d.obj(help=''),
        fc: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { fc+: { fsType: fsType } },
          '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
          withLun(lun): { fc+: { lun: lun } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { fc+: { readOnly: readOnly } },
          '#withTargetWWNs':: d.fn(help='', args=[d.arg(name='targetWWNs', type=d.T.array)]),
          withTargetWWNs(targetWWNs): { fc+: { targetWWNs: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
          '#withTargetWWNsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetWWNs', type=d.T.array)]),
          withTargetWWNsMixin(targetWWNs): { fc+: { targetWWNs+: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
          '#withWwids':: d.fn(help='', args=[d.arg(name='wwids', type=d.T.array)]),
          withWwids(wwids): { fc+: { wwids: if std.isArray(v=wwids) then wwids else [wwids] } },
          '#withWwidsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='wwids', type=d.T.array)]),
          withWwidsMixin(wwids): { fc+: { wwids+: if std.isArray(v=wwids) then wwids else [wwids] } },
        },
        '#flexVolume':: d.obj(help=''),
        flexVolume: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { flexVolume+: { secretRef+: { name: name } } },
          },
          '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
          withDriver(driver): { flexVolume+: { driver: driver } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { flexVolume+: { fsType: fsType } },
          '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.object)]),
          withOptions(options): { flexVolume+: { options: options } },
          '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.object)]),
          withOptionsMixin(options): { flexVolume+: { options+: options } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { flexVolume+: { readOnly: readOnly } },
        },
        '#flocker':: d.obj(help=''),
        flocker: {
          '#withDatasetName':: d.fn(help='', args=[d.arg(name='datasetName', type=d.T.string)]),
          withDatasetName(datasetName): { flocker+: { datasetName: datasetName } },
          '#withDatasetUUID':: d.fn(help='', args=[d.arg(name='datasetUUID', type=d.T.string)]),
          withDatasetUUID(datasetUUID): { flocker+: { datasetUUID: datasetUUID } },
        },
        '#gcePersistentDisk':: d.obj(help=''),
        gcePersistentDisk: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { gcePersistentDisk+: { fsType: fsType } },
          '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
          withPartition(partition): { gcePersistentDisk+: { partition: partition } },
          '#withPdName':: d.fn(help='', args=[d.arg(name='pdName', type=d.T.string)]),
          withPdName(pdName): { gcePersistentDisk+: { pdName: pdName } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { gcePersistentDisk+: { readOnly: readOnly } },
        },
        '#gitRepo':: d.obj(help=''),
        gitRepo: {
          '#withDirectory':: d.fn(help='', args=[d.arg(name='directory', type=d.T.string)]),
          withDirectory(directory): { gitRepo+: { directory: directory } },
          '#withRepository':: d.fn(help='', args=[d.arg(name='repository', type=d.T.string)]),
          withRepository(repository): { gitRepo+: { repository: repository } },
          '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
          withRevision(revision): { gitRepo+: { revision: revision } },
        },
        '#glusterfs':: d.obj(help=''),
        glusterfs: {
          '#withEndpoints':: d.fn(help='', args=[d.arg(name='endpoints', type=d.T.string)]),
          withEndpoints(endpoints): { glusterfs+: { endpoints: endpoints } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { glusterfs+: { path: path } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { glusterfs+: { readOnly: readOnly } },
        },
        '#hostPath':: d.obj(help=''),
        hostPath: {
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { hostPath+: { path: path } },
          '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { hostPath+: { type: type } },
        },
        '#iscsi':: d.obj(help=''),
        iscsi: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { iscsi+: { secretRef+: { name: name } } },
          },
          '#withChapAuthDiscovery':: d.fn(help='', args=[d.arg(name='chapAuthDiscovery', type=d.T.boolean)]),
          withChapAuthDiscovery(chapAuthDiscovery): { iscsi+: { chapAuthDiscovery: chapAuthDiscovery } },
          '#withChapAuthSession':: d.fn(help='', args=[d.arg(name='chapAuthSession', type=d.T.boolean)]),
          withChapAuthSession(chapAuthSession): { iscsi+: { chapAuthSession: chapAuthSession } },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { iscsi+: { fsType: fsType } },
          '#withInitiatorName':: d.fn(help='', args=[d.arg(name='initiatorName', type=d.T.string)]),
          withInitiatorName(initiatorName): { iscsi+: { initiatorName: initiatorName } },
          '#withIqn':: d.fn(help='', args=[d.arg(name='iqn', type=d.T.string)]),
          withIqn(iqn): { iscsi+: { iqn: iqn } },
          '#withIscsiInterface':: d.fn(help='', args=[d.arg(name='iscsiInterface', type=d.T.string)]),
          withIscsiInterface(iscsiInterface): { iscsi+: { iscsiInterface: iscsiInterface } },
          '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
          withLun(lun): { iscsi+: { lun: lun } },
          '#withPortals':: d.fn(help='', args=[d.arg(name='portals', type=d.T.array)]),
          withPortals(portals): { iscsi+: { portals: if std.isArray(v=portals) then portals else [portals] } },
          '#withPortalsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='portals', type=d.T.array)]),
          withPortalsMixin(portals): { iscsi+: { portals+: if std.isArray(v=portals) then portals else [portals] } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { iscsi+: { readOnly: readOnly } },
          '#withTargetPortal':: d.fn(help='', args=[d.arg(name='targetPortal', type=d.T.string)]),
          withTargetPortal(targetPortal): { iscsi+: { targetPortal: targetPortal } },
        },
        '#nfs':: d.obj(help=''),
        nfs: {
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { nfs+: { path: path } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { nfs+: { readOnly: readOnly } },
          '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
          withServer(server): { nfs+: { server: server } },
        },
        '#persistentVolumeClaim':: d.obj(help=''),
        persistentVolumeClaim: {
          '#withClaimName':: d.fn(help='', args=[d.arg(name='claimName', type=d.T.string)]),
          withClaimName(claimName): { persistentVolumeClaim+: { claimName: claimName } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { persistentVolumeClaim+: { readOnly: readOnly } },
        },
        '#photonPersistentDisk':: d.obj(help=''),
        photonPersistentDisk: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { photonPersistentDisk+: { fsType: fsType } },
          '#withPdID':: d.fn(help='', args=[d.arg(name='pdID', type=d.T.string)]),
          withPdID(pdID): { photonPersistentDisk+: { pdID: pdID } },
        },
        '#portworxVolume':: d.obj(help=''),
        portworxVolume: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { portworxVolume+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { portworxVolume+: { readOnly: readOnly } },
          '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
          withVolumeID(volumeID): { portworxVolume+: { volumeID: volumeID } },
        },
        '#projected':: d.obj(help=''),
        projected: {
          '#sources':: d.obj(help=''),
          sources: {
            '#configMap':: d.obj(help=''),
            configMap: {
              '#items':: d.obj(help=''),
              items: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                withMode(mode): { mode: mode },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { path: path },
              },
              '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
              withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
              '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
              withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { configMap+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { configMap+: { optional: optional } },
            },
            '#downwardAPI':: d.obj(help=''),
            downwardAPI: {
              '#items':: d.obj(help=''),
              items: {
                '#fieldRef':: d.obj(help=''),
                fieldRef: {
                  '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                  withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
                  '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                  withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
                },
                '#resourceFieldRef':: d.obj(help=''),
                resourceFieldRef: {
                  '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                  withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
                  '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                  withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
                  '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                  withResource(resource): { resourceFieldRef+: { resource: resource } },
                },
                '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                withMode(mode): { mode: mode },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { path: path },
              },
              '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
              withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
              '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
              withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
            },
            '#secret':: d.obj(help=''),
            secret: {
              '#items':: d.obj(help=''),
              items: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
                withMode(mode): { mode: mode },
                '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
                withPath(path): { path: path },
              },
              '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
              withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
              '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
              withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { secret+: { name: name } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { secret+: { optional: optional } },
            },
            '#serviceAccountToken':: d.obj(help=''),
            serviceAccountToken: {
              '#withAudience':: d.fn(help='', args=[d.arg(name='audience', type=d.T.string)]),
              withAudience(audience): { serviceAccountToken+: { audience: audience } },
              '#withExpirationSeconds':: d.fn(help='', args=[d.arg(name='expirationSeconds', type=d.T.integer)]),
              withExpirationSeconds(expirationSeconds): { serviceAccountToken+: { expirationSeconds: expirationSeconds } },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { serviceAccountToken+: { path: path } },
            },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { projected+: { defaultMode: defaultMode } },
          '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
          withSources(sources): { projected+: { sources: if std.isArray(v=sources) then sources else [sources] } },
          '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
          withSourcesMixin(sources): { projected+: { sources+: if std.isArray(v=sources) then sources else [sources] } },
        },
        '#quobyte':: d.obj(help=''),
        quobyte: {
          '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
          withGroup(group): { quobyte+: { group: group } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { quobyte+: { readOnly: readOnly } },
          '#withRegistry':: d.fn(help='', args=[d.arg(name='registry', type=d.T.string)]),
          withRegistry(registry): { quobyte+: { registry: registry } },
          '#withTenant':: d.fn(help='', args=[d.arg(name='tenant', type=d.T.string)]),
          withTenant(tenant): { quobyte+: { tenant: tenant } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { quobyte+: { user: user } },
          '#withVolume':: d.fn(help='', args=[d.arg(name='volume', type=d.T.string)]),
          withVolume(volume): { quobyte+: { volume: volume } },
        },
        '#rbd':: d.obj(help=''),
        rbd: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { rbd+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { rbd+: { fsType: fsType } },
          '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
          withImage(image): { rbd+: { image: image } },
          '#withKeyring':: d.fn(help='', args=[d.arg(name='keyring', type=d.T.string)]),
          withKeyring(keyring): { rbd+: { keyring: keyring } },
          '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitors(monitors): { rbd+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
          withMonitorsMixin(monitors): { rbd+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
          '#withPool':: d.fn(help='', args=[d.arg(name='pool', type=d.T.string)]),
          withPool(pool): { rbd+: { pool: pool } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { rbd+: { readOnly: readOnly } },
          '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
          withUser(user): { rbd+: { user: user } },
        },
        '#scaleIO':: d.obj(help=''),
        scaleIO: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { scaleIO+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { scaleIO+: { fsType: fsType } },
          '#withGateway':: d.fn(help='', args=[d.arg(name='gateway', type=d.T.string)]),
          withGateway(gateway): { scaleIO+: { gateway: gateway } },
          '#withProtectionDomain':: d.fn(help='', args=[d.arg(name='protectionDomain', type=d.T.string)]),
          withProtectionDomain(protectionDomain): { scaleIO+: { protectionDomain: protectionDomain } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { scaleIO+: { readOnly: readOnly } },
          '#withSslEnabled':: d.fn(help='', args=[d.arg(name='sslEnabled', type=d.T.boolean)]),
          withSslEnabled(sslEnabled): { scaleIO+: { sslEnabled: sslEnabled } },
          '#withStorageMode':: d.fn(help='', args=[d.arg(name='storageMode', type=d.T.string)]),
          withStorageMode(storageMode): { scaleIO+: { storageMode: storageMode } },
          '#withStoragePool':: d.fn(help='', args=[d.arg(name='storagePool', type=d.T.string)]),
          withStoragePool(storagePool): { scaleIO+: { storagePool: storagePool } },
          '#withSystem':: d.fn(help='', args=[d.arg(name='system', type=d.T.string)]),
          withSystem(system): { scaleIO+: { system: system } },
          '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
          withVolumeName(volumeName): { scaleIO+: { volumeName: volumeName } },
        },
        '#secret':: d.obj(help=''),
        secret: {
          '#items':: d.obj(help=''),
          items: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
            withMode(mode): { mode: mode },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { path: path },
          },
          '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
          withDefaultMode(defaultMode): { secret+: { defaultMode: defaultMode } },
          '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
          withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
          '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
          withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { secret+: { optional: optional } },
          '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
          withSecretName(secretName): { secret+: { secretName: secretName } },
        },
        '#storageos':: d.obj(help=''),
        storageos: {
          '#secretRef':: d.obj(help=''),
          secretRef: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { storageos+: { secretRef+: { name: name } } },
          },
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { storageos+: { fsType: fsType } },
          '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
          withReadOnly(readOnly): { storageos+: { readOnly: readOnly } },
          '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
          withVolumeName(volumeName): { storageos+: { volumeName: volumeName } },
          '#withVolumeNamespace':: d.fn(help='', args=[d.arg(name='volumeNamespace', type=d.T.string)]),
          withVolumeNamespace(volumeNamespace): { storageos+: { volumeNamespace: volumeNamespace } },
        },
        '#vsphereVolume':: d.obj(help=''),
        vsphereVolume: {
          '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
          withFsType(fsType): { vsphereVolume+: { fsType: fsType } },
          '#withStoragePolicyID':: d.fn(help='', args=[d.arg(name='storagePolicyID', type=d.T.string)]),
          withStoragePolicyID(storagePolicyID): { vsphereVolume+: { storagePolicyID: storagePolicyID } },
          '#withStoragePolicyName':: d.fn(help='', args=[d.arg(name='storagePolicyName', type=d.T.string)]),
          withStoragePolicyName(storagePolicyName): { vsphereVolume+: { storagePolicyName: storagePolicyName } },
          '#withVolumePath':: d.fn(help='', args=[d.arg(name='volumePath', type=d.T.string)]),
          withVolumePath(volumePath): { vsphereVolume+: { volumePath: volumePath } },
        },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#withActiveDeadlineSeconds':: d.fn(help='', args=[d.arg(name='activeDeadlineSeconds', type=d.T.integer)]),
      withActiveDeadlineSeconds(activeDeadlineSeconds): { spec+: { vaultPodSpec+: { activeDeadlineSeconds: activeDeadlineSeconds } } },
      '#withAutomountServiceAccountToken':: d.fn(help='', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
      withAutomountServiceAccountToken(automountServiceAccountToken): { spec+: { vaultPodSpec+: { automountServiceAccountToken: automountServiceAccountToken } } },
      '#withContainers':: d.fn(help='', args=[d.arg(name='containers', type=d.T.array)]),
      withContainers(containers): { spec+: { vaultPodSpec+: { containers: if std.isArray(v=containers) then containers else [containers] } } },
      '#withContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='containers', type=d.T.array)]),
      withContainersMixin(containers): { spec+: { vaultPodSpec+: { containers+: if std.isArray(v=containers) then containers else [containers] } } },
      '#withDnsPolicy':: d.fn(help='', args=[d.arg(name='dnsPolicy', type=d.T.string)]),
      withDnsPolicy(dnsPolicy): { spec+: { vaultPodSpec+: { dnsPolicy: dnsPolicy } } },
      '#withEnableServiceLinks':: d.fn(help='', args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
      withEnableServiceLinks(enableServiceLinks): { spec+: { vaultPodSpec+: { enableServiceLinks: enableServiceLinks } } },
      '#withEphemeralContainers':: d.fn(help='', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
      withEphemeralContainers(ephemeralContainers): { spec+: { vaultPodSpec+: { ephemeralContainers: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } },
      '#withEphemeralContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ephemeralContainers', type=d.T.array)]),
      withEphemeralContainersMixin(ephemeralContainers): { spec+: { vaultPodSpec+: { ephemeralContainers+: if std.isArray(v=ephemeralContainers) then ephemeralContainers else [ephemeralContainers] } } },
      '#withHostAliases':: d.fn(help='', args=[d.arg(name='hostAliases', type=d.T.array)]),
      withHostAliases(hostAliases): { spec+: { vaultPodSpec+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } },
      '#withHostAliasesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostAliases', type=d.T.array)]),
      withHostAliasesMixin(hostAliases): { spec+: { vaultPodSpec+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } },
      '#withHostIPC':: d.fn(help='', args=[d.arg(name='hostIPC', type=d.T.boolean)]),
      withHostIPC(hostIPC): { spec+: { vaultPodSpec+: { hostIPC: hostIPC } } },
      '#withHostNetwork':: d.fn(help='', args=[d.arg(name='hostNetwork', type=d.T.boolean)]),
      withHostNetwork(hostNetwork): { spec+: { vaultPodSpec+: { hostNetwork: hostNetwork } } },
      '#withHostPID':: d.fn(help='', args=[d.arg(name='hostPID', type=d.T.boolean)]),
      withHostPID(hostPID): { spec+: { vaultPodSpec+: { hostPID: hostPID } } },
      '#withHostname':: d.fn(help='', args=[d.arg(name='hostname', type=d.T.string)]),
      withHostname(hostname): { spec+: { vaultPodSpec+: { hostname: hostname } } },
      '#withImagePullSecrets':: d.fn(help='', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecrets(imagePullSecrets): { spec+: { vaultPodSpec+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withImagePullSecretsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
      withImagePullSecretsMixin(imagePullSecrets): { spec+: { vaultPodSpec+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } },
      '#withInitContainers':: d.fn(help='', args=[d.arg(name='initContainers', type=d.T.array)]),
      withInitContainers(initContainers): { spec+: { vaultPodSpec+: { initContainers: if std.isArray(v=initContainers) then initContainers else [initContainers] } } },
      '#withInitContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='initContainers', type=d.T.array)]),
      withInitContainersMixin(initContainers): { spec+: { vaultPodSpec+: { initContainers+: if std.isArray(v=initContainers) then initContainers else [initContainers] } } },
      '#withNodeName':: d.fn(help='', args=[d.arg(name='nodeName', type=d.T.string)]),
      withNodeName(nodeName): { spec+: { vaultPodSpec+: { nodeName: nodeName } } },
      '#withNodeSelector':: d.fn(help='', args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelector(nodeSelector): { spec+: { vaultPodSpec+: { nodeSelector: nodeSelector } } },
      '#withNodeSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
      withNodeSelectorMixin(nodeSelector): { spec+: { vaultPodSpec+: { nodeSelector+: nodeSelector } } },
      '#withOverhead':: d.fn(help='', args=[d.arg(name='overhead', type=d.T.object)]),
      withOverhead(overhead): { spec+: { vaultPodSpec+: { overhead: overhead } } },
      '#withOverheadMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overhead', type=d.T.object)]),
      withOverheadMixin(overhead): { spec+: { vaultPodSpec+: { overhead+: overhead } } },
      '#withPreemptionPolicy':: d.fn(help='', args=[d.arg(name='preemptionPolicy', type=d.T.string)]),
      withPreemptionPolicy(preemptionPolicy): { spec+: { vaultPodSpec+: { preemptionPolicy: preemptionPolicy } } },
      '#withPriority':: d.fn(help='', args=[d.arg(name='priority', type=d.T.integer)]),
      withPriority(priority): { spec+: { vaultPodSpec+: { priority: priority } } },
      '#withPriorityClassName':: d.fn(help='', args=[d.arg(name='priorityClassName', type=d.T.string)]),
      withPriorityClassName(priorityClassName): { spec+: { vaultPodSpec+: { priorityClassName: priorityClassName } } },
      '#withReadinessGates':: d.fn(help='', args=[d.arg(name='readinessGates', type=d.T.array)]),
      withReadinessGates(readinessGates): { spec+: { vaultPodSpec+: { readinessGates: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
      '#withReadinessGatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='readinessGates', type=d.T.array)]),
      withReadinessGatesMixin(readinessGates): { spec+: { vaultPodSpec+: { readinessGates+: if std.isArray(v=readinessGates) then readinessGates else [readinessGates] } } },
      '#withRestartPolicy':: d.fn(help='', args=[d.arg(name='restartPolicy', type=d.T.string)]),
      withRestartPolicy(restartPolicy): { spec+: { vaultPodSpec+: { restartPolicy: restartPolicy } } },
      '#withRuntimeClassName':: d.fn(help='', args=[d.arg(name='runtimeClassName', type=d.T.string)]),
      withRuntimeClassName(runtimeClassName): { spec+: { vaultPodSpec+: { runtimeClassName: runtimeClassName } } },
      '#withSchedulerName':: d.fn(help='', args=[d.arg(name='schedulerName', type=d.T.string)]),
      withSchedulerName(schedulerName): { spec+: { vaultPodSpec+: { schedulerName: schedulerName } } },
      '#withServiceAccount':: d.fn(help='', args=[d.arg(name='serviceAccount', type=d.T.string)]),
      withServiceAccount(serviceAccount): { spec+: { vaultPodSpec+: { serviceAccount: serviceAccount } } },
      '#withServiceAccountName':: d.fn(help='', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
      withServiceAccountName(serviceAccountName): { spec+: { vaultPodSpec+: { serviceAccountName: serviceAccountName } } },
      '#withSetHostnameAsFQDN':: d.fn(help='', args=[d.arg(name='setHostnameAsFQDN', type=d.T.boolean)]),
      withSetHostnameAsFQDN(setHostnameAsFQDN): { spec+: { vaultPodSpec+: { setHostnameAsFQDN: setHostnameAsFQDN } } },
      '#withShareProcessNamespace':: d.fn(help='', args=[d.arg(name='shareProcessNamespace', type=d.T.boolean)]),
      withShareProcessNamespace(shareProcessNamespace): { spec+: { vaultPodSpec+: { shareProcessNamespace: shareProcessNamespace } } },
      '#withSubdomain':: d.fn(help='', args=[d.arg(name='subdomain', type=d.T.string)]),
      withSubdomain(subdomain): { spec+: { vaultPodSpec+: { subdomain: subdomain } } },
      '#withTerminationGracePeriodSeconds':: d.fn(help='', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
      withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { vaultPodSpec+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } },
      '#withTolerations':: d.fn(help='', args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerations(tolerations): { spec+: { vaultPodSpec+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTolerationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
      withTolerationsMixin(tolerations): { spec+: { vaultPodSpec+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } },
      '#withTopologySpreadConstraints':: d.fn(help='', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
      withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { vaultPodSpec+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } },
      '#withTopologySpreadConstraintsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
      withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { vaultPodSpec+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } },
      '#withVolumes':: d.fn(help='', args=[d.arg(name='volumes', type=d.T.array)]),
      withVolumes(volumes): { spec+: { vaultPodSpec+: { volumes: if std.isArray(v=volumes) then volumes else [volumes] } } },
      '#withVolumesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
      withVolumesMixin(volumes): { spec+: { vaultPodSpec+: { volumes+: if std.isArray(v=volumes) then volumes else [volumes] } } },
    },
    '#volumeClaimTemplates':: d.obj(help=''),
    volumeClaimTemplates: {
      '#metadata':: d.obj(help=''),
      metadata: {
        '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { metadata+: { annotations: annotations } },
        '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
        '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { metadata+: { labels: labels } },
        '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { metadata+: { labels+: labels } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { metadata+: { name: name } },
      },
      '#spec':: d.obj(help=''),
      spec: {
        '#dataSource':: d.obj(help=''),
        dataSource: {
          '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
          withApiGroup(apiGroup): { spec+: { dataSource+: { apiGroup: apiGroup } } },
          '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
          withKind(kind): { spec+: { dataSource+: { kind: kind } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { dataSource+: { name: name } } },
        },
        '#resources':: d.obj(help=''),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
          withLimits(limits): { spec+: { resources+: { limits: limits } } },
          '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
          withLimitsMixin(limits): { spec+: { resources+: { limits+: limits } } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
          withRequests(requests): { spec+: { resources+: { requests: requests } } },
          '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
          withRequestsMixin(requests): { spec+: { resources+: { requests+: requests } } },
        },
        '#selector':: d.obj(help=''),
        selector: {
          '#matchExpressions':: d.obj(help=''),
          matchExpressions: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { key: key },
            '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
            withOperator(operator): { operator: operator },
            '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
            withValues(values): { values: if std.isArray(v=values) then values else [values] },
            '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
            withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
          },
          '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressions(matchExpressions): { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
          '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
          withMatchExpressionsMixin(matchExpressions): { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
          '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { spec+: { selector+: { matchLabels: matchLabels } } },
          '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { spec+: { selector+: { matchLabels+: matchLabels } } },
        },
        '#withAccessModes':: d.fn(help='', args=[d.arg(name='accessModes', type=d.T.array)]),
        withAccessModes(accessModes): { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } },
        '#withAccessModesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
        withAccessModesMixin(accessModes): { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } },
        '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
        withStorageClassName(storageClassName): { spec+: { storageClassName: storageClassName } },
        '#withVolumeMode':: d.fn(help='', args=[d.arg(name='volumeMode', type=d.T.string)]),
        withVolumeMode(volumeMode): { spec+: { volumeMode: volumeMode } },
        '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
        withVolumeName(volumeName): { spec+: { volumeName: volumeName } },
      },
      '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
      withApiVersion(apiVersion): { apiVersion: apiVersion },
      '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
      withKind(kind): { kind: kind },
    },
    '#volumeMounts':: d.obj(help=''),
    volumeMounts: {
      '#withMountPath':: d.fn(help='', args=[d.arg(name='mountPath', type=d.T.string)]),
      withMountPath(mountPath): { mountPath: mountPath },
      '#withMountPropagation':: d.fn(help='', args=[d.arg(name='mountPropagation', type=d.T.string)]),
      withMountPropagation(mountPropagation): { mountPropagation: mountPropagation },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
      '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
      withReadOnly(readOnly): { readOnly: readOnly },
      '#withSubPath':: d.fn(help='', args=[d.arg(name='subPath', type=d.T.string)]),
      withSubPath(subPath): { subPath: subPath },
      '#withSubPathExpr':: d.fn(help='', args=[d.arg(name='subPathExpr', type=d.T.string)]),
      withSubPathExpr(subPathExpr): { subPathExpr: subPathExpr },
    },
    '#volumes':: d.obj(help=''),
    volumes: {
      '#awsElasticBlockStore':: d.obj(help=''),
      awsElasticBlockStore: {
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { awsElasticBlockStore+: { fsType: fsType } },
        '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
        withPartition(partition): { awsElasticBlockStore+: { partition: partition } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { awsElasticBlockStore+: { readOnly: readOnly } },
        '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
        withVolumeID(volumeID): { awsElasticBlockStore+: { volumeID: volumeID } },
      },
      '#azureDisk':: d.obj(help=''),
      azureDisk: {
        '#withCachingMode':: d.fn(help='', args=[d.arg(name='cachingMode', type=d.T.string)]),
        withCachingMode(cachingMode): { azureDisk+: { cachingMode: cachingMode } },
        '#withDiskName':: d.fn(help='', args=[d.arg(name='diskName', type=d.T.string)]),
        withDiskName(diskName): { azureDisk+: { diskName: diskName } },
        '#withDiskURI':: d.fn(help='', args=[d.arg(name='diskURI', type=d.T.string)]),
        withDiskURI(diskURI): { azureDisk+: { diskURI: diskURI } },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { azureDisk+: { fsType: fsType } },
        '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { azureDisk+: { kind: kind } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { azureDisk+: { readOnly: readOnly } },
      },
      '#azureFile':: d.obj(help=''),
      azureFile: {
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { azureFile+: { readOnly: readOnly } },
        '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { azureFile+: { secretName: secretName } },
        '#withShareName':: d.fn(help='', args=[d.arg(name='shareName', type=d.T.string)]),
        withShareName(shareName): { azureFile+: { shareName: shareName } },
      },
      '#cephfs':: d.obj(help=''),
      cephfs: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { cephfs+: { secretRef+: { name: name } } },
        },
        '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
        withMonitors(monitors): { cephfs+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
        '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
        withMonitorsMixin(monitors): { cephfs+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { cephfs+: { path: path } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { cephfs+: { readOnly: readOnly } },
        '#withSecretFile':: d.fn(help='', args=[d.arg(name='secretFile', type=d.T.string)]),
        withSecretFile(secretFile): { cephfs+: { secretFile: secretFile } },
        '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
        withUser(user): { cephfs+: { user: user } },
      },
      '#cinder':: d.obj(help=''),
      cinder: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { cinder+: { secretRef+: { name: name } } },
        },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { cinder+: { fsType: fsType } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { cinder+: { readOnly: readOnly } },
        '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
        withVolumeID(volumeID): { cinder+: { volumeID: volumeID } },
      },
      '#configMap':: d.obj(help=''),
      configMap: {
        '#items':: d.obj(help=''),
        items: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
          withMode(mode): { mode: mode },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
        },
        '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
        withDefaultMode(defaultMode): { configMap+: { defaultMode: defaultMode } },
        '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
        withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
        '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
        withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
        '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { configMap+: { name: name } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { configMap+: { optional: optional } },
      },
      '#csi':: d.obj(help=''),
      csi: {
        '#nodePublishSecretRef':: d.obj(help=''),
        nodePublishSecretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { csi+: { nodePublishSecretRef+: { name: name } } },
        },
        '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
        withDriver(driver): { csi+: { driver: driver } },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { csi+: { fsType: fsType } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { csi+: { readOnly: readOnly } },
        '#withVolumeAttributes':: d.fn(help='', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
        withVolumeAttributes(volumeAttributes): { csi+: { volumeAttributes: volumeAttributes } },
        '#withVolumeAttributesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeAttributes', type=d.T.object)]),
        withVolumeAttributesMixin(volumeAttributes): { csi+: { volumeAttributes+: volumeAttributes } },
      },
      '#downwardAPI':: d.obj(help=''),
      downwardAPI: {
        '#items':: d.obj(help=''),
        items: {
          '#fieldRef':: d.obj(help=''),
          fieldRef: {
            '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
            withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
            '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
            withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
          },
          '#resourceFieldRef':: d.obj(help=''),
          resourceFieldRef: {
            '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
            withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
            '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
            withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
            '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
            withResource(resource): { resourceFieldRef+: { resource: resource } },
          },
          '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
          withMode(mode): { mode: mode },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
        },
        '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
        withDefaultMode(defaultMode): { downwardAPI+: { defaultMode: defaultMode } },
        '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
        withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
        '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
        withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
      },
      '#emptyDir':: d.obj(help=''),
      emptyDir: {
        '#withMedium':: d.fn(help='', args=[d.arg(name='medium', type=d.T.string)]),
        withMedium(medium): { emptyDir+: { medium: medium } },
        '#withSizeLimit':: d.fn(help='', args=[d.arg(name='sizeLimit', type=d.T.any)]),
        withSizeLimit(sizeLimit): { emptyDir+: { sizeLimit: sizeLimit } },
      },
      '#ephemeral':: d.obj(help=''),
      ephemeral: {
        '#volumeClaimTemplate':: d.obj(help=''),
        volumeClaimTemplate: {
          '#spec':: d.obj(help=''),
          spec: {
            '#dataSource':: d.obj(help=''),
            dataSource: {
              '#withApiGroup':: d.fn(help='', args=[d.arg(name='apiGroup', type=d.T.string)]),
              withApiGroup(apiGroup): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { apiGroup: apiGroup } } } } },
              '#withKind':: d.fn(help='', args=[d.arg(name='kind', type=d.T.string)]),
              withKind(kind): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { kind: kind } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { ephemeral+: { volumeClaimTemplate+: { spec+: { dataSource+: { name: name } } } } },
            },
            '#resources':: d.obj(help=''),
            resources: {
              '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
              withLimits(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits: limits } } } } },
              '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
              withLimitsMixin(limits): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { limits+: limits } } } } },
              '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
              withRequests(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests: requests } } } } },
              '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
              withRequestsMixin(requests): { ephemeral+: { volumeClaimTemplate+: { spec+: { resources+: { requests+: requests } } } } },
            },
            '#selector':: d.obj(help=''),
            selector: {
              '#matchExpressions':: d.obj(help=''),
              matchExpressions: {
                '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                withKey(key): { key: key },
                '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                withOperator(operator): { operator: operator },
                '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                withValues(values): { values: if std.isArray(v=values) then values else [values] },
                '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
              },
              '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressions(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
              '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
              withMatchExpressionsMixin(matchExpressions): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } } } },
              '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabels(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels: matchLabels } } } } },
              '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
              withMatchLabelsMixin(matchLabels): { ephemeral+: { volumeClaimTemplate+: { spec+: { selector+: { matchLabels+: matchLabels } } } } },
            },
            '#withAccessModes':: d.fn(help='', args=[d.arg(name='accessModes', type=d.T.array)]),
            withAccessModes(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
            '#withAccessModesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='accessModes', type=d.T.array)]),
            withAccessModesMixin(accessModes): { ephemeral+: { volumeClaimTemplate+: { spec+: { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] } } } },
            '#withStorageClassName':: d.fn(help='', args=[d.arg(name='storageClassName', type=d.T.string)]),
            withStorageClassName(storageClassName): { ephemeral+: { volumeClaimTemplate+: { spec+: { storageClassName: storageClassName } } } },
            '#withVolumeMode':: d.fn(help='', args=[d.arg(name='volumeMode', type=d.T.string)]),
            withVolumeMode(volumeMode): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeMode: volumeMode } } } },
            '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
            withVolumeName(volumeName): { ephemeral+: { volumeClaimTemplate+: { spec+: { volumeName: volumeName } } } },
          },
          '#withMetadata':: d.fn(help='', args=[d.arg(name='metadata', type=d.T.object)]),
          withMetadata(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata: metadata } } },
          '#withMetadataMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='metadata', type=d.T.object)]),
          withMetadataMixin(metadata): { ephemeral+: { volumeClaimTemplate+: { metadata+: metadata } } },
        },
      },
      '#fc':: d.obj(help=''),
      fc: {
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { fc+: { fsType: fsType } },
        '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
        withLun(lun): { fc+: { lun: lun } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { fc+: { readOnly: readOnly } },
        '#withTargetWWNs':: d.fn(help='', args=[d.arg(name='targetWWNs', type=d.T.array)]),
        withTargetWWNs(targetWWNs): { fc+: { targetWWNs: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
        '#withTargetWWNsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='targetWWNs', type=d.T.array)]),
        withTargetWWNsMixin(targetWWNs): { fc+: { targetWWNs+: if std.isArray(v=targetWWNs) then targetWWNs else [targetWWNs] } },
        '#withWwids':: d.fn(help='', args=[d.arg(name='wwids', type=d.T.array)]),
        withWwids(wwids): { fc+: { wwids: if std.isArray(v=wwids) then wwids else [wwids] } },
        '#withWwidsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='wwids', type=d.T.array)]),
        withWwidsMixin(wwids): { fc+: { wwids+: if std.isArray(v=wwids) then wwids else [wwids] } },
      },
      '#flexVolume':: d.obj(help=''),
      flexVolume: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { flexVolume+: { secretRef+: { name: name } } },
        },
        '#withDriver':: d.fn(help='', args=[d.arg(name='driver', type=d.T.string)]),
        withDriver(driver): { flexVolume+: { driver: driver } },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { flexVolume+: { fsType: fsType } },
        '#withOptions':: d.fn(help='', args=[d.arg(name='options', type=d.T.object)]),
        withOptions(options): { flexVolume+: { options: options } },
        '#withOptionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='options', type=d.T.object)]),
        withOptionsMixin(options): { flexVolume+: { options+: options } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { flexVolume+: { readOnly: readOnly } },
      },
      '#flocker':: d.obj(help=''),
      flocker: {
        '#withDatasetName':: d.fn(help='', args=[d.arg(name='datasetName', type=d.T.string)]),
        withDatasetName(datasetName): { flocker+: { datasetName: datasetName } },
        '#withDatasetUUID':: d.fn(help='', args=[d.arg(name='datasetUUID', type=d.T.string)]),
        withDatasetUUID(datasetUUID): { flocker+: { datasetUUID: datasetUUID } },
      },
      '#gcePersistentDisk':: d.obj(help=''),
      gcePersistentDisk: {
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { gcePersistentDisk+: { fsType: fsType } },
        '#withPartition':: d.fn(help='', args=[d.arg(name='partition', type=d.T.integer)]),
        withPartition(partition): { gcePersistentDisk+: { partition: partition } },
        '#withPdName':: d.fn(help='', args=[d.arg(name='pdName', type=d.T.string)]),
        withPdName(pdName): { gcePersistentDisk+: { pdName: pdName } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { gcePersistentDisk+: { readOnly: readOnly } },
      },
      '#gitRepo':: d.obj(help=''),
      gitRepo: {
        '#withDirectory':: d.fn(help='', args=[d.arg(name='directory', type=d.T.string)]),
        withDirectory(directory): { gitRepo+: { directory: directory } },
        '#withRepository':: d.fn(help='', args=[d.arg(name='repository', type=d.T.string)]),
        withRepository(repository): { gitRepo+: { repository: repository } },
        '#withRevision':: d.fn(help='', args=[d.arg(name='revision', type=d.T.string)]),
        withRevision(revision): { gitRepo+: { revision: revision } },
      },
      '#glusterfs':: d.obj(help=''),
      glusterfs: {
        '#withEndpoints':: d.fn(help='', args=[d.arg(name='endpoints', type=d.T.string)]),
        withEndpoints(endpoints): { glusterfs+: { endpoints: endpoints } },
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { glusterfs+: { path: path } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { glusterfs+: { readOnly: readOnly } },
      },
      '#hostPath':: d.obj(help=''),
      hostPath: {
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { hostPath+: { path: path } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { hostPath+: { type: type } },
      },
      '#iscsi':: d.obj(help=''),
      iscsi: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { iscsi+: { secretRef+: { name: name } } },
        },
        '#withChapAuthDiscovery':: d.fn(help='', args=[d.arg(name='chapAuthDiscovery', type=d.T.boolean)]),
        withChapAuthDiscovery(chapAuthDiscovery): { iscsi+: { chapAuthDiscovery: chapAuthDiscovery } },
        '#withChapAuthSession':: d.fn(help='', args=[d.arg(name='chapAuthSession', type=d.T.boolean)]),
        withChapAuthSession(chapAuthSession): { iscsi+: { chapAuthSession: chapAuthSession } },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { iscsi+: { fsType: fsType } },
        '#withInitiatorName':: d.fn(help='', args=[d.arg(name='initiatorName', type=d.T.string)]),
        withInitiatorName(initiatorName): { iscsi+: { initiatorName: initiatorName } },
        '#withIqn':: d.fn(help='', args=[d.arg(name='iqn', type=d.T.string)]),
        withIqn(iqn): { iscsi+: { iqn: iqn } },
        '#withIscsiInterface':: d.fn(help='', args=[d.arg(name='iscsiInterface', type=d.T.string)]),
        withIscsiInterface(iscsiInterface): { iscsi+: { iscsiInterface: iscsiInterface } },
        '#withLun':: d.fn(help='', args=[d.arg(name='lun', type=d.T.integer)]),
        withLun(lun): { iscsi+: { lun: lun } },
        '#withPortals':: d.fn(help='', args=[d.arg(name='portals', type=d.T.array)]),
        withPortals(portals): { iscsi+: { portals: if std.isArray(v=portals) then portals else [portals] } },
        '#withPortalsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='portals', type=d.T.array)]),
        withPortalsMixin(portals): { iscsi+: { portals+: if std.isArray(v=portals) then portals else [portals] } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { iscsi+: { readOnly: readOnly } },
        '#withTargetPortal':: d.fn(help='', args=[d.arg(name='targetPortal', type=d.T.string)]),
        withTargetPortal(targetPortal): { iscsi+: { targetPortal: targetPortal } },
      },
      '#nfs':: d.obj(help=''),
      nfs: {
        '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
        withPath(path): { nfs+: { path: path } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { nfs+: { readOnly: readOnly } },
        '#withServer':: d.fn(help='', args=[d.arg(name='server', type=d.T.string)]),
        withServer(server): { nfs+: { server: server } },
      },
      '#persistentVolumeClaim':: d.obj(help=''),
      persistentVolumeClaim: {
        '#withClaimName':: d.fn(help='', args=[d.arg(name='claimName', type=d.T.string)]),
        withClaimName(claimName): { persistentVolumeClaim+: { claimName: claimName } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { persistentVolumeClaim+: { readOnly: readOnly } },
      },
      '#photonPersistentDisk':: d.obj(help=''),
      photonPersistentDisk: {
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { photonPersistentDisk+: { fsType: fsType } },
        '#withPdID':: d.fn(help='', args=[d.arg(name='pdID', type=d.T.string)]),
        withPdID(pdID): { photonPersistentDisk+: { pdID: pdID } },
      },
      '#portworxVolume':: d.obj(help=''),
      portworxVolume: {
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { portworxVolume+: { fsType: fsType } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { portworxVolume+: { readOnly: readOnly } },
        '#withVolumeID':: d.fn(help='', args=[d.arg(name='volumeID', type=d.T.string)]),
        withVolumeID(volumeID): { portworxVolume+: { volumeID: volumeID } },
      },
      '#projected':: d.obj(help=''),
      projected: {
        '#sources':: d.obj(help=''),
        sources: {
          '#configMap':: d.obj(help=''),
          configMap: {
            '#items':: d.obj(help=''),
            items: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
              withMode(mode): { mode: mode },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
            withItems(items): { configMap+: { items: if std.isArray(v=items) then items else [items] } },
            '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
            withItemsMixin(items): { configMap+: { items+: if std.isArray(v=items) then items else [items] } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { configMap+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { configMap+: { optional: optional } },
          },
          '#downwardAPI':: d.obj(help=''),
          downwardAPI: {
            '#items':: d.obj(help=''),
            items: {
              '#fieldRef':: d.obj(help=''),
              fieldRef: {
                '#withApiVersion':: d.fn(help='', args=[d.arg(name='apiVersion', type=d.T.string)]),
                withApiVersion(apiVersion): { fieldRef+: { apiVersion: apiVersion } },
                '#withFieldPath':: d.fn(help='', args=[d.arg(name='fieldPath', type=d.T.string)]),
                withFieldPath(fieldPath): { fieldRef+: { fieldPath: fieldPath } },
              },
              '#resourceFieldRef':: d.obj(help=''),
              resourceFieldRef: {
                '#withContainerName':: d.fn(help='', args=[d.arg(name='containerName', type=d.T.string)]),
                withContainerName(containerName): { resourceFieldRef+: { containerName: containerName } },
                '#withDivisor':: d.fn(help='', args=[d.arg(name='divisor', type=d.T.any)]),
                withDivisor(divisor): { resourceFieldRef+: { divisor: divisor } },
                '#withResource':: d.fn(help='', args=[d.arg(name='resource', type=d.T.string)]),
                withResource(resource): { resourceFieldRef+: { resource: resource } },
              },
              '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
              withMode(mode): { mode: mode },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
            withItems(items): { downwardAPI+: { items: if std.isArray(v=items) then items else [items] } },
            '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
            withItemsMixin(items): { downwardAPI+: { items+: if std.isArray(v=items) then items else [items] } },
          },
          '#secret':: d.obj(help=''),
          secret: {
            '#items':: d.obj(help=''),
            items: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
              withMode(mode): { mode: mode },
              '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
              withPath(path): { path: path },
            },
            '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
            withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
            '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
            withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { secret+: { name: name } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { secret+: { optional: optional } },
          },
          '#serviceAccountToken':: d.obj(help=''),
          serviceAccountToken: {
            '#withAudience':: d.fn(help='', args=[d.arg(name='audience', type=d.T.string)]),
            withAudience(audience): { serviceAccountToken+: { audience: audience } },
            '#withExpirationSeconds':: d.fn(help='', args=[d.arg(name='expirationSeconds', type=d.T.integer)]),
            withExpirationSeconds(expirationSeconds): { serviceAccountToken+: { expirationSeconds: expirationSeconds } },
            '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
            withPath(path): { serviceAccountToken+: { path: path } },
          },
        },
        '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
        withDefaultMode(defaultMode): { projected+: { defaultMode: defaultMode } },
        '#withSources':: d.fn(help='', args=[d.arg(name='sources', type=d.T.array)]),
        withSources(sources): { projected+: { sources: if std.isArray(v=sources) then sources else [sources] } },
        '#withSourcesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sources', type=d.T.array)]),
        withSourcesMixin(sources): { projected+: { sources+: if std.isArray(v=sources) then sources else [sources] } },
      },
      '#quobyte':: d.obj(help=''),
      quobyte: {
        '#withGroup':: d.fn(help='', args=[d.arg(name='group', type=d.T.string)]),
        withGroup(group): { quobyte+: { group: group } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { quobyte+: { readOnly: readOnly } },
        '#withRegistry':: d.fn(help='', args=[d.arg(name='registry', type=d.T.string)]),
        withRegistry(registry): { quobyte+: { registry: registry } },
        '#withTenant':: d.fn(help='', args=[d.arg(name='tenant', type=d.T.string)]),
        withTenant(tenant): { quobyte+: { tenant: tenant } },
        '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
        withUser(user): { quobyte+: { user: user } },
        '#withVolume':: d.fn(help='', args=[d.arg(name='volume', type=d.T.string)]),
        withVolume(volume): { quobyte+: { volume: volume } },
      },
      '#rbd':: d.obj(help=''),
      rbd: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { rbd+: { secretRef+: { name: name } } },
        },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { rbd+: { fsType: fsType } },
        '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { rbd+: { image: image } },
        '#withKeyring':: d.fn(help='', args=[d.arg(name='keyring', type=d.T.string)]),
        withKeyring(keyring): { rbd+: { keyring: keyring } },
        '#withMonitors':: d.fn(help='', args=[d.arg(name='monitors', type=d.T.array)]),
        withMonitors(monitors): { rbd+: { monitors: if std.isArray(v=monitors) then monitors else [monitors] } },
        '#withMonitorsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monitors', type=d.T.array)]),
        withMonitorsMixin(monitors): { rbd+: { monitors+: if std.isArray(v=monitors) then monitors else [monitors] } },
        '#withPool':: d.fn(help='', args=[d.arg(name='pool', type=d.T.string)]),
        withPool(pool): { rbd+: { pool: pool } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { rbd+: { readOnly: readOnly } },
        '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
        withUser(user): { rbd+: { user: user } },
      },
      '#scaleIO':: d.obj(help=''),
      scaleIO: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { scaleIO+: { secretRef+: { name: name } } },
        },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { scaleIO+: { fsType: fsType } },
        '#withGateway':: d.fn(help='', args=[d.arg(name='gateway', type=d.T.string)]),
        withGateway(gateway): { scaleIO+: { gateway: gateway } },
        '#withProtectionDomain':: d.fn(help='', args=[d.arg(name='protectionDomain', type=d.T.string)]),
        withProtectionDomain(protectionDomain): { scaleIO+: { protectionDomain: protectionDomain } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { scaleIO+: { readOnly: readOnly } },
        '#withSslEnabled':: d.fn(help='', args=[d.arg(name='sslEnabled', type=d.T.boolean)]),
        withSslEnabled(sslEnabled): { scaleIO+: { sslEnabled: sslEnabled } },
        '#withStorageMode':: d.fn(help='', args=[d.arg(name='storageMode', type=d.T.string)]),
        withStorageMode(storageMode): { scaleIO+: { storageMode: storageMode } },
        '#withStoragePool':: d.fn(help='', args=[d.arg(name='storagePool', type=d.T.string)]),
        withStoragePool(storagePool): { scaleIO+: { storagePool: storagePool } },
        '#withSystem':: d.fn(help='', args=[d.arg(name='system', type=d.T.string)]),
        withSystem(system): { scaleIO+: { system: system } },
        '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
        withVolumeName(volumeName): { scaleIO+: { volumeName: volumeName } },
      },
      '#secret':: d.obj(help=''),
      secret: {
        '#items':: d.obj(help=''),
        items: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withMode':: d.fn(help='', args=[d.arg(name='mode', type=d.T.integer)]),
          withMode(mode): { mode: mode },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { path: path },
        },
        '#withDefaultMode':: d.fn(help='', args=[d.arg(name='defaultMode', type=d.T.integer)]),
        withDefaultMode(defaultMode): { secret+: { defaultMode: defaultMode } },
        '#withItems':: d.fn(help='', args=[d.arg(name='items', type=d.T.array)]),
        withItems(items): { secret+: { items: if std.isArray(v=items) then items else [items] } },
        '#withItemsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='items', type=d.T.array)]),
        withItemsMixin(items): { secret+: { items+: if std.isArray(v=items) then items else [items] } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { secret+: { optional: optional } },
        '#withSecretName':: d.fn(help='', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { secret+: { secretName: secretName } },
      },
      '#storageos':: d.obj(help=''),
      storageos: {
        '#secretRef':: d.obj(help=''),
        secretRef: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { storageos+: { secretRef+: { name: name } } },
        },
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { storageos+: { fsType: fsType } },
        '#withReadOnly':: d.fn(help='', args=[d.arg(name='readOnly', type=d.T.boolean)]),
        withReadOnly(readOnly): { storageos+: { readOnly: readOnly } },
        '#withVolumeName':: d.fn(help='', args=[d.arg(name='volumeName', type=d.T.string)]),
        withVolumeName(volumeName): { storageos+: { volumeName: volumeName } },
        '#withVolumeNamespace':: d.fn(help='', args=[d.arg(name='volumeNamespace', type=d.T.string)]),
        withVolumeNamespace(volumeNamespace): { storageos+: { volumeNamespace: volumeNamespace } },
      },
      '#vsphereVolume':: d.obj(help=''),
      vsphereVolume: {
        '#withFsType':: d.fn(help='', args=[d.arg(name='fsType', type=d.T.string)]),
        withFsType(fsType): { vsphereVolume+: { fsType: fsType } },
        '#withStoragePolicyID':: d.fn(help='', args=[d.arg(name='storagePolicyID', type=d.T.string)]),
        withStoragePolicyID(storagePolicyID): { vsphereVolume+: { storagePolicyID: storagePolicyID } },
        '#withStoragePolicyName':: d.fn(help='', args=[d.arg(name='storagePolicyName', type=d.T.string)]),
        withStoragePolicyName(storagePolicyName): { vsphereVolume+: { storagePolicyName: storagePolicyName } },
        '#withVolumePath':: d.fn(help='', args=[d.arg(name='volumePath', type=d.T.string)]),
        withVolumePath(volumePath): { vsphereVolume+: { volumePath: volumePath } },
      },
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { name: name },
    },
    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { spec+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { spec+: { annotations+: annotations } },
    '#withBankVaultsImage':: d.fn(help='', args=[d.arg(name='bankVaultsImage', type=d.T.string)]),
    withBankVaultsImage(bankVaultsImage): { spec+: { bankVaultsImage: bankVaultsImage } },
    '#withBankVaultsVolumeMounts':: d.fn(help='', args=[d.arg(name='bankVaultsVolumeMounts', type=d.T.array)]),
    withBankVaultsVolumeMounts(bankVaultsVolumeMounts): { spec+: { bankVaultsVolumeMounts: if std.isArray(v=bankVaultsVolumeMounts) then bankVaultsVolumeMounts else [bankVaultsVolumeMounts] } },
    '#withBankVaultsVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='bankVaultsVolumeMounts', type=d.T.array)]),
    withBankVaultsVolumeMountsMixin(bankVaultsVolumeMounts): { spec+: { bankVaultsVolumeMounts+: if std.isArray(v=bankVaultsVolumeMounts) then bankVaultsVolumeMounts else [bankVaultsVolumeMounts] } },
    '#withCaNamespaces':: d.fn(help='', args=[d.arg(name='caNamespaces', type=d.T.array)]),
    withCaNamespaces(caNamespaces): { spec+: { caNamespaces: if std.isArray(v=caNamespaces) then caNamespaces else [caNamespaces] } },
    '#withCaNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='caNamespaces', type=d.T.array)]),
    withCaNamespacesMixin(caNamespaces): { spec+: { caNamespaces+: if std.isArray(v=caNamespaces) then caNamespaces else [caNamespaces] } },
    '#withConfig':: d.fn(help='', args=[d.arg(name='config', type=d.T.any)]),
    withConfig(config): { spec+: { config: config } },
    '#withEnvsConfig':: d.fn(help='', args=[d.arg(name='envsConfig', type=d.T.array)]),
    withEnvsConfig(envsConfig): { spec+: { envsConfig: if std.isArray(v=envsConfig) then envsConfig else [envsConfig] } },
    '#withEnvsConfigMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envsConfig', type=d.T.array)]),
    withEnvsConfigMixin(envsConfig): { spec+: { envsConfig+: if std.isArray(v=envsConfig) then envsConfig else [envsConfig] } },
    '#withExistingTlsSecretName':: d.fn(help='', args=[d.arg(name='existingTlsSecretName', type=d.T.string)]),
    withExistingTlsSecretName(existingTlsSecretName): { spec+: { existingTlsSecretName: existingTlsSecretName } },
    '#withExternalConfig':: d.fn(help='', args=[d.arg(name='externalConfig', type=d.T.any)]),
    withExternalConfig(externalConfig): { spec+: { externalConfig: externalConfig } },
    '#withFleuntdConfLocation':: d.fn(help='', args=[d.arg(name='fleuntdConfLocation', type=d.T.string)]),
    withFleuntdConfLocation(fleuntdConfLocation): { spec+: { fleuntdConfLocation: fleuntdConfLocation } },
    '#withFluentdConfFile':: d.fn(help='', args=[d.arg(name='fluentdConfFile', type=d.T.string)]),
    withFluentdConfFile(fluentdConfFile): { spec+: { fluentdConfFile: fluentdConfFile } },
    '#withFluentdConfig':: d.fn(help='', args=[d.arg(name='fluentdConfig', type=d.T.string)]),
    withFluentdConfig(fluentdConfig): { spec+: { fluentdConfig: fluentdConfig } },
    '#withFluentdEnabled':: d.fn(help='', args=[d.arg(name='fluentdEnabled', type=d.T.boolean)]),
    withFluentdEnabled(fluentdEnabled): { spec+: { fluentdEnabled: fluentdEnabled } },
    '#withFluentdImage':: d.fn(help='', args=[d.arg(name='fluentdImage', type=d.T.string)]),
    withFluentdImage(fluentdImage): { spec+: { fluentdImage: fluentdImage } },
    '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
    withImage(image): { spec+: { image: image } },
    '#withIstioEnabled':: d.fn(help='', args=[d.arg(name='istioEnabled', type=d.T.boolean)]),
    withIstioEnabled(istioEnabled): { spec+: { istioEnabled: istioEnabled } },
    '#withLoadBalancerIP':: d.fn(help='', args=[d.arg(name='loadBalancerIP', type=d.T.string)]),
    withLoadBalancerIP(loadBalancerIP): { spec+: { loadBalancerIP: loadBalancerIP } },
    '#withNodeSelector':: d.fn(help='', args=[d.arg(name='nodeSelector', type=d.T.object)]),
    withNodeSelector(nodeSelector): { spec+: { nodeSelector: nodeSelector } },
    '#withNodeSelectorMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
    withNodeSelectorMixin(nodeSelector): { spec+: { nodeSelector+: nodeSelector } },
    '#withPodAntiAffinity':: d.fn(help='', args=[d.arg(name='podAntiAffinity', type=d.T.string)]),
    withPodAntiAffinity(podAntiAffinity): { spec+: { podAntiAffinity: podAntiAffinity } },
    '#withRaftLeaderAddress':: d.fn(help='', args=[d.arg(name='raftLeaderAddress', type=d.T.string)]),
    withRaftLeaderAddress(raftLeaderAddress): { spec+: { raftLeaderAddress: raftLeaderAddress } },
    '#withServiceAccount':: d.fn(help='', args=[d.arg(name='serviceAccount', type=d.T.string)]),
    withServiceAccount(serviceAccount): { spec+: { serviceAccount: serviceAccount } },
    '#withServiceMonitorEnabled':: d.fn(help='', args=[d.arg(name='serviceMonitorEnabled', type=d.T.boolean)]),
    withServiceMonitorEnabled(serviceMonitorEnabled): { spec+: { serviceMonitorEnabled: serviceMonitorEnabled } },
    '#withServicePorts':: d.fn(help='', args=[d.arg(name='servicePorts', type=d.T.object)]),
    withServicePorts(servicePorts): { spec+: { servicePorts: servicePorts } },
    '#withServicePortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='servicePorts', type=d.T.object)]),
    withServicePortsMixin(servicePorts): { spec+: { servicePorts+: servicePorts } },
    '#withServiceRegistrationEnabled':: d.fn(help='', args=[d.arg(name='serviceRegistrationEnabled', type=d.T.boolean)]),
    withServiceRegistrationEnabled(serviceRegistrationEnabled): { spec+: { serviceRegistrationEnabled: serviceRegistrationEnabled } },
    '#withServiceType':: d.fn(help='', args=[d.arg(name='serviceType', type=d.T.string)]),
    withServiceType(serviceType): { spec+: { serviceType: serviceType } },
    '#withSidecarEnvsConfig':: d.fn(help='', args=[d.arg(name='sidecarEnvsConfig', type=d.T.array)]),
    withSidecarEnvsConfig(sidecarEnvsConfig): { spec+: { sidecarEnvsConfig: if std.isArray(v=sidecarEnvsConfig) then sidecarEnvsConfig else [sidecarEnvsConfig] } },
    '#withSidecarEnvsConfigMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sidecarEnvsConfig', type=d.T.array)]),
    withSidecarEnvsConfigMixin(sidecarEnvsConfig): { spec+: { sidecarEnvsConfig+: if std.isArray(v=sidecarEnvsConfig) then sidecarEnvsConfig else [sidecarEnvsConfig] } },
    '#withSize':: d.fn(help='', args=[d.arg(name='size', type=d.T.integer)]),
    withSize(size): { spec+: { size: size } },
    '#withStatsdDisabled':: d.fn(help='', args=[d.arg(name='statsdDisabled', type=d.T.boolean)]),
    withStatsdDisabled(statsdDisabled): { spec+: { statsdDisabled: statsdDisabled } },
    '#withStatsdImage':: d.fn(help='', args=[d.arg(name='statsdImage', type=d.T.string)]),
    withStatsdImage(statsdImage): { spec+: { statsdImage: statsdImage } },
    '#withTlsAdditionalHosts':: d.fn(help='', args=[d.arg(name='tlsAdditionalHosts', type=d.T.array)]),
    withTlsAdditionalHosts(tlsAdditionalHosts): { spec+: { tlsAdditionalHosts: if std.isArray(v=tlsAdditionalHosts) then tlsAdditionalHosts else [tlsAdditionalHosts] } },
    '#withTlsAdditionalHostsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlsAdditionalHosts', type=d.T.array)]),
    withTlsAdditionalHostsMixin(tlsAdditionalHosts): { spec+: { tlsAdditionalHosts+: if std.isArray(v=tlsAdditionalHosts) then tlsAdditionalHosts else [tlsAdditionalHosts] } },
    '#withTlsExpiryThreshold':: d.fn(help='', args=[d.arg(name='tlsExpiryThreshold', type=d.T.string)]),
    withTlsExpiryThreshold(tlsExpiryThreshold): { spec+: { tlsExpiryThreshold: tlsExpiryThreshold } },
    '#withTolerations':: d.fn(help='', args=[d.arg(name='tolerations', type=d.T.array)]),
    withTolerations(tolerations): { spec+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } },
    '#withTolerationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
    withTolerationsMixin(tolerations): { spec+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } },
    '#withVaultAnnotations':: d.fn(help='', args=[d.arg(name='vaultAnnotations', type=d.T.object)]),
    withVaultAnnotations(vaultAnnotations): { spec+: { vaultAnnotations: vaultAnnotations } },
    '#withVaultAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='vaultAnnotations', type=d.T.object)]),
    withVaultAnnotationsMixin(vaultAnnotations): { spec+: { vaultAnnotations+: vaultAnnotations } },
    '#withVaultConfigurerAnnotations':: d.fn(help='', args=[d.arg(name='vaultConfigurerAnnotations', type=d.T.object)]),
    withVaultConfigurerAnnotations(vaultConfigurerAnnotations): { spec+: { vaultConfigurerAnnotations: vaultConfigurerAnnotations } },
    '#withVaultConfigurerAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='vaultConfigurerAnnotations', type=d.T.object)]),
    withVaultConfigurerAnnotationsMixin(vaultConfigurerAnnotations): { spec+: { vaultConfigurerAnnotations+: vaultConfigurerAnnotations } },
    '#withVaultConfigurerLabels':: d.fn(help='', args=[d.arg(name='vaultConfigurerLabels', type=d.T.object)]),
    withVaultConfigurerLabels(vaultConfigurerLabels): { spec+: { vaultConfigurerLabels: vaultConfigurerLabels } },
    '#withVaultConfigurerLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='vaultConfigurerLabels', type=d.T.object)]),
    withVaultConfigurerLabelsMixin(vaultConfigurerLabels): { spec+: { vaultConfigurerLabels+: vaultConfigurerLabels } },
    '#withVaultEnvsConfig':: d.fn(help='', args=[d.arg(name='vaultEnvsConfig', type=d.T.array)]),
    withVaultEnvsConfig(vaultEnvsConfig): { spec+: { vaultEnvsConfig: if std.isArray(v=vaultEnvsConfig) then vaultEnvsConfig else [vaultEnvsConfig] } },
    '#withVaultEnvsConfigMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='vaultEnvsConfig', type=d.T.array)]),
    withVaultEnvsConfigMixin(vaultEnvsConfig): { spec+: { vaultEnvsConfig+: if std.isArray(v=vaultEnvsConfig) then vaultEnvsConfig else [vaultEnvsConfig] } },
    '#withVaultInitContainers':: d.fn(help='', args=[d.arg(name='vaultInitContainers', type=d.T.array)]),
    withVaultInitContainers(vaultInitContainers): { spec+: { vaultInitContainers: if std.isArray(v=vaultInitContainers) then vaultInitContainers else [vaultInitContainers] } },
    '#withVaultInitContainersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='vaultInitContainers', type=d.T.array)]),
    withVaultInitContainersMixin(vaultInitContainers): { spec+: { vaultInitContainers+: if std.isArray(v=vaultInitContainers) then vaultInitContainers else [vaultInitContainers] } },
    '#withVaultLabels':: d.fn(help='', args=[d.arg(name='vaultLabels', type=d.T.object)]),
    withVaultLabels(vaultLabels): { spec+: { vaultLabels: vaultLabels } },
    '#withVaultLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='vaultLabels', type=d.T.object)]),
    withVaultLabelsMixin(vaultLabels): { spec+: { vaultLabels+: vaultLabels } },
    '#withVeleroEnabled':: d.fn(help='', args=[d.arg(name='veleroEnabled', type=d.T.boolean)]),
    withVeleroEnabled(veleroEnabled): { spec+: { veleroEnabled: veleroEnabled } },
    '#withVeleroFsfreezeImage':: d.fn(help='', args=[d.arg(name='veleroFsfreezeImage', type=d.T.string)]),
    withVeleroFsfreezeImage(veleroFsfreezeImage): { spec+: { veleroFsfreezeImage: veleroFsfreezeImage } },
    '#withVolumeClaimTemplates':: d.fn(help='', args=[d.arg(name='volumeClaimTemplates', type=d.T.array)]),
    withVolumeClaimTemplates(volumeClaimTemplates): { spec+: { volumeClaimTemplates: if std.isArray(v=volumeClaimTemplates) then volumeClaimTemplates else [volumeClaimTemplates] } },
    '#withVolumeClaimTemplatesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeClaimTemplates', type=d.T.array)]),
    withVolumeClaimTemplatesMixin(volumeClaimTemplates): { spec+: { volumeClaimTemplates+: if std.isArray(v=volumeClaimTemplates) then volumeClaimTemplates else [volumeClaimTemplates] } },
    '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
    withVolumeMounts(volumeMounts): { spec+: { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } },
    '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
    withVolumeMountsMixin(volumeMounts): { spec+: { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } },
    '#withVolumes':: d.fn(help='', args=[d.arg(name='volumes', type=d.T.array)]),
    withVolumes(volumes): { spec+: { volumes: if std.isArray(v=volumes) then volumes else [volumes] } },
    '#withVolumesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
    withVolumesMixin(volumes): { spec+: { volumes+: if std.isArray(v=volumes) then volumes else [volumes] } },
    '#withWatchedSecretsAnnotations':: d.fn(help='', args=[d.arg(name='watchedSecretsAnnotations', type=d.T.array)]),
    withWatchedSecretsAnnotations(watchedSecretsAnnotations): { spec+: { watchedSecretsAnnotations: if std.isArray(v=watchedSecretsAnnotations) then watchedSecretsAnnotations else [watchedSecretsAnnotations] } },
    '#withWatchedSecretsAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='watchedSecretsAnnotations', type=d.T.array)]),
    withWatchedSecretsAnnotationsMixin(watchedSecretsAnnotations): { spec+: { watchedSecretsAnnotations+: if std.isArray(v=watchedSecretsAnnotations) then watchedSecretsAnnotations else [watchedSecretsAnnotations] } },
    '#withWatchedSecretsLabels':: d.fn(help='', args=[d.arg(name='watchedSecretsLabels', type=d.T.array)]),
    withWatchedSecretsLabels(watchedSecretsLabels): { spec+: { watchedSecretsLabels: if std.isArray(v=watchedSecretsLabels) then watchedSecretsLabels else [watchedSecretsLabels] } },
    '#withWatchedSecretsLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='watchedSecretsLabels', type=d.T.array)]),
    withWatchedSecretsLabelsMixin(watchedSecretsLabels): { spec+: { watchedSecretsLabels+: if std.isArray(v=watchedSecretsLabels) then watchedSecretsLabels else [watchedSecretsLabels] } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
