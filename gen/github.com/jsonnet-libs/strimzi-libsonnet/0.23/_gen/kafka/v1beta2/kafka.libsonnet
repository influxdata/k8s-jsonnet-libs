{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='kafka', url='', help=''),
  '#metadata':: d.obj(help='ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.'),
  metadata: {
    '#withAnnotations':: d.fn(help='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withManagedFields':: d.fn(help="ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.", args=[d.arg(name='managedFields', type=d.T.array)]),
    withManagedFields(managedFields): { metadata+: { managedFields: if std.isArray(v=managedFields) then managedFields else [managedFields] } },
    '#withManagedFieldsMixin':: d.fn(help="ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='managedFields', type=d.T.array)]),
    withManagedFieldsMixin(managedFields): { metadata+: { managedFields+: if std.isArray(v=managedFields) then managedFields else [managedFields] } },
    '#withName':: d.fn(help='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Kafka', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'kafka.strimzi.io/v1beta2',
    kind: 'Kafka',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='The specification of the Kafka and ZooKeeper clusters, and Topic Operator.'),
  spec: {
    '#clientsCa':: d.obj(help='Configuration of the clients certificate authority.'),
    clientsCa: {
      '#withCertificateExpirationPolicy':: d.fn(help='How should CA certificate expiration be handled when `generateCertificateAuthority=true`. The default is for a new CA certificate to be generated reusing the existing private key.', args=[d.arg(name='certificateExpirationPolicy', type=d.T.string)]),
      withCertificateExpirationPolicy(certificateExpirationPolicy): { spec+: { clientsCa+: { certificateExpirationPolicy: certificateExpirationPolicy } } },
      '#withGenerateCertificateAuthority':: d.fn(help='If true then Certificate Authority certificates will be generated automatically. Otherwise the user will need to provide a Secret with the CA certificate. Default is true.', args=[d.arg(name='generateCertificateAuthority', type=d.T.boolean)]),
      withGenerateCertificateAuthority(generateCertificateAuthority): { spec+: { clientsCa+: { generateCertificateAuthority: generateCertificateAuthority } } },
      '#withGenerateSecretOwnerReference':: d.fn(help='If `true`, the Cluster and Client CA Secrets are configured with the `ownerReference` set to the `Kafka` resource. If the `Kafka` resource is deleted when `true`, the CA Secrets are also deleted. If `false`, the `ownerReference` is disabled. If the `Kafka` resource is deleted when `false`, the CA Secrets are retained and available for reuse. Default is `true`.', args=[d.arg(name='generateSecretOwnerReference', type=d.T.boolean)]),
      withGenerateSecretOwnerReference(generateSecretOwnerReference): { spec+: { clientsCa+: { generateSecretOwnerReference: generateSecretOwnerReference } } },
      '#withRenewalDays':: d.fn(help='The number of days in the certificate renewal period. This is the number of days before the a certificate expires during which renewal actions may be performed. When `generateCertificateAuthority` is true, this will cause the generation of a new certificate. When `generateCertificateAuthority` is true, this will cause extra logging at WARN level about the pending certificate expiry. Default is 30.', args=[d.arg(name='renewalDays', type=d.T.integer)]),
      withRenewalDays(renewalDays): { spec+: { clientsCa+: { renewalDays: renewalDays } } },
      '#withValidityDays':: d.fn(help='The number of days generated certificates should be valid for. The default is 365.', args=[d.arg(name='validityDays', type=d.T.integer)]),
      withValidityDays(validityDays): { spec+: { clientsCa+: { validityDays: validityDays } } },
    },
    '#clusterCa':: d.obj(help='Configuration of the cluster certificate authority.'),
    clusterCa: {
      '#withCertificateExpirationPolicy':: d.fn(help='How should CA certificate expiration be handled when `generateCertificateAuthority=true`. The default is for a new CA certificate to be generated reusing the existing private key.', args=[d.arg(name='certificateExpirationPolicy', type=d.T.string)]),
      withCertificateExpirationPolicy(certificateExpirationPolicy): { spec+: { clusterCa+: { certificateExpirationPolicy: certificateExpirationPolicy } } },
      '#withGenerateCertificateAuthority':: d.fn(help='If true then Certificate Authority certificates will be generated automatically. Otherwise the user will need to provide a Secret with the CA certificate. Default is true.', args=[d.arg(name='generateCertificateAuthority', type=d.T.boolean)]),
      withGenerateCertificateAuthority(generateCertificateAuthority): { spec+: { clusterCa+: { generateCertificateAuthority: generateCertificateAuthority } } },
      '#withGenerateSecretOwnerReference':: d.fn(help='If `true`, the Cluster and Client CA Secrets are configured with the `ownerReference` set to the `Kafka` resource. If the `Kafka` resource is deleted when `true`, the CA Secrets are also deleted. If `false`, the `ownerReference` is disabled. If the `Kafka` resource is deleted when `false`, the CA Secrets are retained and available for reuse. Default is `true`.', args=[d.arg(name='generateSecretOwnerReference', type=d.T.boolean)]),
      withGenerateSecretOwnerReference(generateSecretOwnerReference): { spec+: { clusterCa+: { generateSecretOwnerReference: generateSecretOwnerReference } } },
      '#withRenewalDays':: d.fn(help='The number of days in the certificate renewal period. This is the number of days before the a certificate expires during which renewal actions may be performed. When `generateCertificateAuthority` is true, this will cause the generation of a new certificate. When `generateCertificateAuthority` is true, this will cause extra logging at WARN level about the pending certificate expiry. Default is 30.', args=[d.arg(name='renewalDays', type=d.T.integer)]),
      withRenewalDays(renewalDays): { spec+: { clusterCa+: { renewalDays: renewalDays } } },
      '#withValidityDays':: d.fn(help='The number of days generated certificates should be valid for. The default is 365.', args=[d.arg(name='validityDays', type=d.T.integer)]),
      withValidityDays(validityDays): { spec+: { clusterCa+: { validityDays: validityDays } } },
    },
    '#cruiseControl':: d.obj(help='Configuration for Cruise Control deployment. Deploys a Cruise Control instance when specified.'),
    cruiseControl: {
      '#brokerCapacity':: d.obj(help='The Cruise Control `brokerCapacity` configuration.'),
      brokerCapacity: {
        '#withCpuUtilization':: d.fn(help='Broker capacity for CPU resource utilization as a percentage (0 - 100).', args=[d.arg(name='cpuUtilization', type=d.T.integer)]),
        withCpuUtilization(cpuUtilization): { spec+: { cruiseControl+: { brokerCapacity+: { cpuUtilization: cpuUtilization } } } },
        '#withDisk':: d.fn(help='Broker capacity for disk in bytes, for example, 100Gi.', args=[d.arg(name='disk', type=d.T.string)]),
        withDisk(disk): { spec+: { cruiseControl+: { brokerCapacity+: { disk: disk } } } },
        '#withInboundNetwork':: d.fn(help='Broker capacity for inbound network throughput in bytes per second, for example, 10000KB/s.', args=[d.arg(name='inboundNetwork', type=d.T.string)]),
        withInboundNetwork(inboundNetwork): { spec+: { cruiseControl+: { brokerCapacity+: { inboundNetwork: inboundNetwork } } } },
        '#withOutboundNetwork':: d.fn(help='Broker capacity for outbound network throughput in bytes per second, for example 10000KB/s.', args=[d.arg(name='outboundNetwork', type=d.T.string)]),
        withOutboundNetwork(outboundNetwork): { spec+: { cruiseControl+: { brokerCapacity+: { outboundNetwork: outboundNetwork } } } },
      },
      '#jvmOptions':: d.obj(help='JVM Options for the Cruise Control container.'),
      jvmOptions: {
        '#withGcLoggingEnabled':: d.fn(help='Specifies whether the Garbage Collection logging is enabled. The default is false.', args=[d.arg(name='gcLoggingEnabled', type=d.T.boolean)]),
        withGcLoggingEnabled(gcLoggingEnabled): { spec+: { cruiseControl+: { jvmOptions+: { gcLoggingEnabled: gcLoggingEnabled } } } },
        '#withJavaSystemProperties':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
        withJavaSystemProperties(javaSystemProperties): { spec+: { cruiseControl+: { jvmOptions+: { javaSystemProperties: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } },
        '#withJavaSystemPropertiesMixin':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
        withJavaSystemPropertiesMixin(javaSystemProperties): { spec+: { cruiseControl+: { jvmOptions+: { javaSystemProperties+: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } },
        '#withXX':: d.fn(help='A map of -XX options to the JVM.', args=[d.arg(name='XX', type=d.T.any)]),
        withXX(XX): { spec+: { cruiseControl+: { jvmOptions+: { '-XX': XX } } } },
        '#withXms':: d.fn(help='-Xms option to to the JVM.', args=[d.arg(name='Xms', type=d.T.string)]),
        withXms(Xms): { spec+: { cruiseControl+: { jvmOptions+: { '-Xms': Xms } } } },
        '#withXmx':: d.fn(help='-Xmx option to to the JVM.', args=[d.arg(name='Xmx', type=d.T.string)]),
        withXmx(Xmx): { spec+: { cruiseControl+: { jvmOptions+: { '-Xmx': Xmx } } } },
      },
      '#livenessProbe':: d.obj(help='Pod liveness checking for the Cruise Control container.'),
      livenessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { cruiseControl+: { livenessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { cruiseControl+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { cruiseControl+: { livenessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { cruiseControl+: { livenessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { cruiseControl+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#logging':: d.obj(help='Logging configuration (Log4j 2) for Cruise Control.'),
      logging: {
        '#valueFrom':: d.obj(help='`ConfigMap` entry where the logging configuration is stored. '),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { cruiseControl+: { logging+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { cruiseControl+: { logging+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { cruiseControl+: { logging+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withLoggers':: d.fn(help='A Map from logger name to logger level.', args=[d.arg(name='loggers', type=d.T.any)]),
        withLoggers(loggers): { spec+: { cruiseControl+: { logging+: { loggers: loggers } } } },
        '#withType':: d.fn(help="Logging type, must be either 'inline' or 'external'.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { cruiseControl+: { logging+: { type: type } } } },
      },
      '#metricsConfig':: d.obj(help='Metrics configuration.'),
      metricsConfig: {
        '#valueFrom':: d.obj(help='ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.'),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { cruiseControl+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { cruiseControl+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { cruiseControl+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withType':: d.fn(help="Metrics type. Only 'jmxPrometheusExporter' supported currently.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { cruiseControl+: { metricsConfig+: { type: type } } } },
      },
      '#readinessProbe':: d.obj(help='Pod readiness checking for the Cruise Control container.'),
      readinessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { cruiseControl+: { readinessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { cruiseControl+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { cruiseControl+: { readinessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { cruiseControl+: { readinessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { cruiseControl+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#resources':: d.obj(help='CPU and memory resources to reserve for the Cruise Control container.'),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
        withLimits(limits): { spec+: { cruiseControl+: { resources+: { limits: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
        withRequests(requests): { spec+: { cruiseControl+: { resources+: { requests: requests } } } },
      },
      '#template':: d.obj(help='Template to specify how Cruise Control resources, `Deployments` and `Pods`, are generated.'),
      template: {
        '#apiService':: d.obj(help='Template for Cruise Control API `Service`.'),
        apiService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { cruiseControl+: { template+: { apiService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { cruiseControl+: { template+: { apiService+: { metadata+: { labels: labels } } } } } },
          },
          '#withIpFamilies':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamilies(ipFamilies): { spec+: { cruiseControl+: { template+: { apiService+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamiliesMixin':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamiliesMixin(ipFamilies): { spec+: { cruiseControl+: { template+: { apiService+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamilyPolicy':: d.fn(help='Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
          withIpFamilyPolicy(ipFamilyPolicy): { spec+: { cruiseControl+: { template+: { apiService+: { ipFamilyPolicy: ipFamilyPolicy } } } } },
        },
        '#cruiseControlContainer':: d.obj(help='Template for the Cruise Control container.'),
        cruiseControlContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { cruiseControl+: { template+: { cruiseControlContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#deployment':: d.obj(help='Template for Cruise Control `Deployment`.'),
        deployment: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { cruiseControl+: { template+: { deployment+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { cruiseControl+: { template+: { deployment+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#pod':: d.obj(help='Template for Cruise Control `Pods`.'),
        pod: {
          '#affinity':: d.obj(help="The pod's affinity rules."),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { cruiseControl+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
          },
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { cruiseControl+: { template+: { pod+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { cruiseControl+: { template+: { pod+: { metadata+: { labels: labels } } } } } },
          },
          '#securityContext':: d.obj(help='Configures pod-level security attributes and common container settings.'),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { spec+: { cruiseControl+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
          },
          '#withEnableServiceLinks':: d.fn(help="Indicates whether information about services should be injected into Pod's environment variables.", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { spec+: { cruiseControl+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } } },
          '#withHostAliases':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { spec+: { cruiseControl+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withHostAliasesMixin':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { spec+: { cruiseControl+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withImagePullSecrets':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { cruiseControl+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { cruiseControl+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withPriorityClassName':: d.fn(help='The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { spec+: { cruiseControl+: { template+: { pod+: { priorityClassName: priorityClassName } } } } },
          '#withSchedulerName':: d.fn(help='The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { spec+: { cruiseControl+: { template+: { pod+: { schedulerName: schedulerName } } } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { cruiseControl+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } },
          '#withTolerations':: d.fn(help="The pod's tolerations.", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { spec+: { cruiseControl+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTolerationsMixin':: d.fn(help="The pod's tolerations.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { spec+: { cruiseControl+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTopologySpreadConstraints':: d.fn(help="The pod's topology spread constraints.", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { cruiseControl+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help="The pod's topology spread constraints.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { cruiseControl+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
        },
        '#podDisruptionBudget':: d.obj(help='Template for Cruise Control `PodDisruptionBudget`.'),
        podDisruptionBudget: {
          '#metadata':: d.obj(help='Metadata to apply to the `PodDistruptionBugetTemplate` resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { cruiseControl+: { template+: { podDisruptionBudget+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { cruiseControl+: { template+: { podDisruptionBudget+: { metadata+: { labels: labels } } } } } },
          },
          '#withMaxUnavailable':: d.fn(help='Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.', args=[d.arg(name='maxUnavailable', type=d.T.integer)]),
          withMaxUnavailable(maxUnavailable): { spec+: { cruiseControl+: { template+: { podDisruptionBudget+: { maxUnavailable: maxUnavailable } } } } },
        },
        '#tlsSidecarContainer':: d.obj(help='Template for the Cruise Control TLS sidecar container.'),
        tlsSidecarContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { cruiseControl+: { template+: { tlsSidecarContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
      },
      '#tlsSidecar':: d.obj(help='TLS sidecar configuration.'),
      tlsSidecar: {
        '#livenessProbe':: d.obj(help='Pod liveness checking.'),
        livenessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { cruiseControl+: { tlsSidecar+: { livenessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { cruiseControl+: { tlsSidecar+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { cruiseControl+: { tlsSidecar+: { livenessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { cruiseControl+: { tlsSidecar+: { livenessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { cruiseControl+: { tlsSidecar+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#readinessProbe':: d.obj(help='Pod readiness checking.'),
        readinessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { cruiseControl+: { tlsSidecar+: { readinessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { cruiseControl+: { tlsSidecar+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { cruiseControl+: { tlsSidecar+: { readinessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { cruiseControl+: { tlsSidecar+: { readinessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { cruiseControl+: { tlsSidecar+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#resources':: d.obj(help='CPU and memory resources to reserve.'),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
          withLimits(limits): { spec+: { cruiseControl+: { tlsSidecar+: { resources+: { limits: limits } } } } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
          withRequests(requests): { spec+: { cruiseControl+: { tlsSidecar+: { resources+: { requests: requests } } } } },
        },
        '#withImage':: d.fn(help='The docker image for the container.', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { spec+: { cruiseControl+: { tlsSidecar+: { image: image } } } },
        '#withLogLevel':: d.fn(help='The log level for the TLS sidecar. Default value is `notice`.', args=[d.arg(name='logLevel', type=d.T.string)]),
        withLogLevel(logLevel): { spec+: { cruiseControl+: { tlsSidecar+: { logLevel: logLevel } } } },
      },
      '#withConfig':: d.fn(help='The Cruise Control configuration. For a full list of configuration options refer to https://github.com/linkedin/cruise-control/wiki/Configurations. Note that properties with the following prefixes cannot be set: bootstrap.servers, client.id, zookeeper., network., security., failed.brokers.zk.path,webserver.http., webserver.api.urlprefix, webserver.session.path, webserver.accesslog., two.step., request.reason.required,metric.reporter.sampler.bootstrap.servers, metric.reporter.topic, partition.metric.sample.store.topic, broker.metric.sample.store.topic,capacity.config.file, self.healing., anomaly.detection., ssl. (with the exception of: ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols, webserver.http.cors.enabled,webserver.http.cors.origin, webserver.http.cors.exposeheaders).', args=[d.arg(name='config', type=d.T.any)]),
      withConfig(config): { spec+: { cruiseControl+: { config: config } } },
      '#withImage':: d.fn(help='The docker image for the pods.', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { cruiseControl+: { image: image } } },
    },
    '#entityOperator':: d.obj(help='Configuration of the Entity Operator.'),
    entityOperator: {
      '#template':: d.obj(help='Template for Entity Operator resources. The template allows users to specify how is the `Deployment` and `Pods` generated.'),
      template: {
        '#deployment':: d.obj(help='Template for Entity Operator `Deployment`.'),
        deployment: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { entityOperator+: { template+: { deployment+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { entityOperator+: { template+: { deployment+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#pod':: d.obj(help='Template for Entity Operator `Pods`.'),
        pod: {
          '#affinity':: d.obj(help="The pod's affinity rules."),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { entityOperator+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
          },
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { entityOperator+: { template+: { pod+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { entityOperator+: { template+: { pod+: { metadata+: { labels: labels } } } } } },
          },
          '#securityContext':: d.obj(help='Configures pod-level security attributes and common container settings.'),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { spec+: { entityOperator+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
          },
          '#withEnableServiceLinks':: d.fn(help="Indicates whether information about services should be injected into Pod's environment variables.", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { spec+: { entityOperator+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } } },
          '#withHostAliases':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { spec+: { entityOperator+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withHostAliasesMixin':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { spec+: { entityOperator+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withImagePullSecrets':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { entityOperator+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { entityOperator+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withPriorityClassName':: d.fn(help='The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { spec+: { entityOperator+: { template+: { pod+: { priorityClassName: priorityClassName } } } } },
          '#withSchedulerName':: d.fn(help='The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { spec+: { entityOperator+: { template+: { pod+: { schedulerName: schedulerName } } } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { entityOperator+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } },
          '#withTolerations':: d.fn(help="The pod's tolerations.", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { spec+: { entityOperator+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTolerationsMixin':: d.fn(help="The pod's tolerations.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { spec+: { entityOperator+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTopologySpreadConstraints':: d.fn(help="The pod's topology spread constraints.", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { entityOperator+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help="The pod's topology spread constraints.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { entityOperator+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
        },
        '#tlsSidecarContainer':: d.obj(help='Template for the Entity Operator TLS sidecar container.'),
        tlsSidecarContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { entityOperator+: { template+: { tlsSidecarContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#topicOperatorContainer':: d.obj(help='Template for the Entity Topic Operator container.'),
        topicOperatorContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { entityOperator+: { template+: { topicOperatorContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#userOperatorContainer':: d.obj(help='Template for the Entity User Operator container.'),
        userOperatorContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { entityOperator+: { template+: { userOperatorContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
      },
      '#tlsSidecar':: d.obj(help='TLS sidecar configuration.'),
      tlsSidecar: {
        '#livenessProbe':: d.obj(help='Pod liveness checking.'),
        livenessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { tlsSidecar+: { livenessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { tlsSidecar+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { tlsSidecar+: { livenessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { tlsSidecar+: { livenessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { tlsSidecar+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#readinessProbe':: d.obj(help='Pod readiness checking.'),
        readinessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { tlsSidecar+: { readinessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { tlsSidecar+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { tlsSidecar+: { readinessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { tlsSidecar+: { readinessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { tlsSidecar+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#resources':: d.obj(help='CPU and memory resources to reserve.'),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
          withLimits(limits): { spec+: { entityOperator+: { tlsSidecar+: { resources+: { limits: limits } } } } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
          withRequests(requests): { spec+: { entityOperator+: { tlsSidecar+: { resources+: { requests: requests } } } } },
        },
        '#withImage':: d.fn(help='The docker image for the container.', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { spec+: { entityOperator+: { tlsSidecar+: { image: image } } } },
        '#withLogLevel':: d.fn(help='The log level for the TLS sidecar. Default value is `notice`.', args=[d.arg(name='logLevel', type=d.T.string)]),
        withLogLevel(logLevel): { spec+: { entityOperator+: { tlsSidecar+: { logLevel: logLevel } } } },
      },
      '#topicOperator':: d.obj(help='Configuration of the Topic Operator.'),
      topicOperator: {
        '#jvmOptions':: d.obj(help='JVM Options for pods.'),
        jvmOptions: {
          '#withGcLoggingEnabled':: d.fn(help='Specifies whether the Garbage Collection logging is enabled. The default is false.', args=[d.arg(name='gcLoggingEnabled', type=d.T.boolean)]),
          withGcLoggingEnabled(gcLoggingEnabled): { spec+: { entityOperator+: { topicOperator+: { jvmOptions+: { gcLoggingEnabled: gcLoggingEnabled } } } } },
          '#withJavaSystemProperties':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
          withJavaSystemProperties(javaSystemProperties): { spec+: { entityOperator+: { topicOperator+: { jvmOptions+: { javaSystemProperties: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } } },
          '#withJavaSystemPropertiesMixin':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
          withJavaSystemPropertiesMixin(javaSystemProperties): { spec+: { entityOperator+: { topicOperator+: { jvmOptions+: { javaSystemProperties+: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } } },
          '#withXX':: d.fn(help='A map of -XX options to the JVM.', args=[d.arg(name='XX', type=d.T.any)]),
          withXX(XX): { spec+: { entityOperator+: { topicOperator+: { jvmOptions+: { '-XX': XX } } } } },
          '#withXms':: d.fn(help='-Xms option to to the JVM.', args=[d.arg(name='Xms', type=d.T.string)]),
          withXms(Xms): { spec+: { entityOperator+: { topicOperator+: { jvmOptions+: { '-Xms': Xms } } } } },
          '#withXmx':: d.fn(help='-Xmx option to to the JVM.', args=[d.arg(name='Xmx', type=d.T.string)]),
          withXmx(Xmx): { spec+: { entityOperator+: { topicOperator+: { jvmOptions+: { '-Xmx': Xmx } } } } },
        },
        '#livenessProbe':: d.obj(help='Pod liveness checking.'),
        livenessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { topicOperator+: { livenessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { topicOperator+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { topicOperator+: { livenessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { topicOperator+: { livenessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { topicOperator+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#logging':: d.obj(help='Logging configuration.'),
        logging: {
          '#valueFrom':: d.obj(help='`ConfigMap` entry where the logging configuration is stored. '),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { entityOperator+: { topicOperator+: { logging+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { entityOperator+: { topicOperator+: { logging+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { entityOperator+: { topicOperator+: { logging+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withLoggers':: d.fn(help='A Map from logger name to logger level.', args=[d.arg(name='loggers', type=d.T.any)]),
          withLoggers(loggers): { spec+: { entityOperator+: { topicOperator+: { logging+: { loggers: loggers } } } } },
          '#withType':: d.fn(help="Logging type, must be either 'inline' or 'external'.", args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { entityOperator+: { topicOperator+: { logging+: { type: type } } } } },
        },
        '#readinessProbe':: d.obj(help='Pod readiness checking.'),
        readinessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { topicOperator+: { readinessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { topicOperator+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { topicOperator+: { readinessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { topicOperator+: { readinessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { topicOperator+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#resources':: d.obj(help='CPU and memory resources to reserve.'),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
          withLimits(limits): { spec+: { entityOperator+: { topicOperator+: { resources+: { limits: limits } } } } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
          withRequests(requests): { spec+: { entityOperator+: { topicOperator+: { resources+: { requests: requests } } } } },
        },
        '#startupProbe':: d.obj(help='Pod startup checking.'),
        startupProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { topicOperator+: { startupProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { topicOperator+: { startupProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { topicOperator+: { startupProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { topicOperator+: { startupProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { topicOperator+: { startupProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#withImage':: d.fn(help='The image to use for the Topic Operator.', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { spec+: { entityOperator+: { topicOperator+: { image: image } } } },
        '#withReconciliationIntervalSeconds':: d.fn(help='Interval between periodic reconciliations.', args=[d.arg(name='reconciliationIntervalSeconds', type=d.T.integer)]),
        withReconciliationIntervalSeconds(reconciliationIntervalSeconds): { spec+: { entityOperator+: { topicOperator+: { reconciliationIntervalSeconds: reconciliationIntervalSeconds } } } },
        '#withTopicMetadataMaxAttempts':: d.fn(help='The number of attempts at getting topic metadata.', args=[d.arg(name='topicMetadataMaxAttempts', type=d.T.integer)]),
        withTopicMetadataMaxAttempts(topicMetadataMaxAttempts): { spec+: { entityOperator+: { topicOperator+: { topicMetadataMaxAttempts: topicMetadataMaxAttempts } } } },
        '#withWatchedNamespace':: d.fn(help='The namespace the Topic Operator should watch.', args=[d.arg(name='watchedNamespace', type=d.T.string)]),
        withWatchedNamespace(watchedNamespace): { spec+: { entityOperator+: { topicOperator+: { watchedNamespace: watchedNamespace } } } },
        '#withZookeeperSessionTimeoutSeconds':: d.fn(help='Timeout for the ZooKeeper session.', args=[d.arg(name='zookeeperSessionTimeoutSeconds', type=d.T.integer)]),
        withZookeeperSessionTimeoutSeconds(zookeeperSessionTimeoutSeconds): { spec+: { entityOperator+: { topicOperator+: { zookeeperSessionTimeoutSeconds: zookeeperSessionTimeoutSeconds } } } },
      },
      '#userOperator':: d.obj(help='Configuration of the User Operator.'),
      userOperator: {
        '#jvmOptions':: d.obj(help='JVM Options for pods.'),
        jvmOptions: {
          '#withGcLoggingEnabled':: d.fn(help='Specifies whether the Garbage Collection logging is enabled. The default is false.', args=[d.arg(name='gcLoggingEnabled', type=d.T.boolean)]),
          withGcLoggingEnabled(gcLoggingEnabled): { spec+: { entityOperator+: { userOperator+: { jvmOptions+: { gcLoggingEnabled: gcLoggingEnabled } } } } },
          '#withJavaSystemProperties':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
          withJavaSystemProperties(javaSystemProperties): { spec+: { entityOperator+: { userOperator+: { jvmOptions+: { javaSystemProperties: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } } },
          '#withJavaSystemPropertiesMixin':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
          withJavaSystemPropertiesMixin(javaSystemProperties): { spec+: { entityOperator+: { userOperator+: { jvmOptions+: { javaSystemProperties+: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } } },
          '#withXX':: d.fn(help='A map of -XX options to the JVM.', args=[d.arg(name='XX', type=d.T.any)]),
          withXX(XX): { spec+: { entityOperator+: { userOperator+: { jvmOptions+: { '-XX': XX } } } } },
          '#withXms':: d.fn(help='-Xms option to to the JVM.', args=[d.arg(name='Xms', type=d.T.string)]),
          withXms(Xms): { spec+: { entityOperator+: { userOperator+: { jvmOptions+: { '-Xms': Xms } } } } },
          '#withXmx':: d.fn(help='-Xmx option to to the JVM.', args=[d.arg(name='Xmx', type=d.T.string)]),
          withXmx(Xmx): { spec+: { entityOperator+: { userOperator+: { jvmOptions+: { '-Xmx': Xmx } } } } },
        },
        '#livenessProbe':: d.obj(help='Pod liveness checking.'),
        livenessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { userOperator+: { livenessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { userOperator+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { userOperator+: { livenessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { userOperator+: { livenessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { userOperator+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#logging':: d.obj(help='Logging configuration.'),
        logging: {
          '#valueFrom':: d.obj(help='`ConfigMap` entry where the logging configuration is stored. '),
          valueFrom: {
            '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
            configMapKeyRef: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { spec+: { entityOperator+: { userOperator+: { logging+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } } },
              '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
              withName(name): { spec+: { entityOperator+: { userOperator+: { logging+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } } },
              '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
              withOptional(optional): { spec+: { entityOperator+: { userOperator+: { logging+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } } },
            },
          },
          '#withLoggers':: d.fn(help='A Map from logger name to logger level.', args=[d.arg(name='loggers', type=d.T.any)]),
          withLoggers(loggers): { spec+: { entityOperator+: { userOperator+: { logging+: { loggers: loggers } } } } },
          '#withType':: d.fn(help="Logging type, must be either 'inline' or 'external'.", args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { entityOperator+: { userOperator+: { logging+: { type: type } } } } },
        },
        '#readinessProbe':: d.obj(help='Pod readiness checking.'),
        readinessProbe: {
          '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
          withFailureThreshold(failureThreshold): { spec+: { entityOperator+: { userOperator+: { readinessProbe+: { failureThreshold: failureThreshold } } } } },
          '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
          withInitialDelaySeconds(initialDelaySeconds): { spec+: { entityOperator+: { userOperator+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } } },
          '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
          withPeriodSeconds(periodSeconds): { spec+: { entityOperator+: { userOperator+: { readinessProbe+: { periodSeconds: periodSeconds } } } } },
          '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
          withSuccessThreshold(successThreshold): { spec+: { entityOperator+: { userOperator+: { readinessProbe+: { successThreshold: successThreshold } } } } },
          '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
          withTimeoutSeconds(timeoutSeconds): { spec+: { entityOperator+: { userOperator+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } } },
        },
        '#resources':: d.obj(help='CPU and memory resources to reserve.'),
        resources: {
          '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
          withLimits(limits): { spec+: { entityOperator+: { userOperator+: { resources+: { limits: limits } } } } },
          '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
          withRequests(requests): { spec+: { entityOperator+: { userOperator+: { resources+: { requests: requests } } } } },
        },
        '#withImage':: d.fn(help='The image to use for the User Operator.', args=[d.arg(name='image', type=d.T.string)]),
        withImage(image): { spec+: { entityOperator+: { userOperator+: { image: image } } } },
        '#withReconciliationIntervalSeconds':: d.fn(help='Interval between periodic reconciliations.', args=[d.arg(name='reconciliationIntervalSeconds', type=d.T.integer)]),
        withReconciliationIntervalSeconds(reconciliationIntervalSeconds): { spec+: { entityOperator+: { userOperator+: { reconciliationIntervalSeconds: reconciliationIntervalSeconds } } } },
        '#withSecretPrefix':: d.fn(help='The prefix that will be added to the KafkaUser name to be used as the Secret name.', args=[d.arg(name='secretPrefix', type=d.T.string)]),
        withSecretPrefix(secretPrefix): { spec+: { entityOperator+: { userOperator+: { secretPrefix: secretPrefix } } } },
        '#withWatchedNamespace':: d.fn(help='The namespace the User Operator should watch.', args=[d.arg(name='watchedNamespace', type=d.T.string)]),
        withWatchedNamespace(watchedNamespace): { spec+: { entityOperator+: { userOperator+: { watchedNamespace: watchedNamespace } } } },
        '#withZookeeperSessionTimeoutSeconds':: d.fn(help='Timeout for the ZooKeeper session.', args=[d.arg(name='zookeeperSessionTimeoutSeconds', type=d.T.integer)]),
        withZookeeperSessionTimeoutSeconds(zookeeperSessionTimeoutSeconds): { spec+: { entityOperator+: { userOperator+: { zookeeperSessionTimeoutSeconds: zookeeperSessionTimeoutSeconds } } } },
      },
    },
    '#jmxTrans':: d.obj(help='Configuration for JmxTrans. When the property is present a JmxTrans deployment is created for gathering JMX metrics from each Kafka broker. For more information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].'),
    jmxTrans: {
      '#resources':: d.obj(help='CPU and memory resources to reserve.'),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
        withLimits(limits): { spec+: { jmxTrans+: { resources+: { limits: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
        withRequests(requests): { spec+: { jmxTrans+: { resources+: { requests: requests } } } },
      },
      '#template':: d.obj(help='Template for JmxTrans resources.'),
      template: {
        '#container':: d.obj(help='Template for JmxTrans container.'),
        container: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { jmxTrans+: { template+: { container+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { jmxTrans+: { template+: { container+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { jmxTrans+: { template+: { container+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#deployment':: d.obj(help='Template for JmxTrans `Deployment`.'),
        deployment: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { jmxTrans+: { template+: { deployment+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { jmxTrans+: { template+: { deployment+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#pod':: d.obj(help='Template for JmxTrans `Pods`.'),
        pod: {
          '#affinity':: d.obj(help="The pod's affinity rules."),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { jmxTrans+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
          },
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { jmxTrans+: { template+: { pod+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { jmxTrans+: { template+: { pod+: { metadata+: { labels: labels } } } } } },
          },
          '#securityContext':: d.obj(help='Configures pod-level security attributes and common container settings.'),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { spec+: { jmxTrans+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
          },
          '#withEnableServiceLinks':: d.fn(help="Indicates whether information about services should be injected into Pod's environment variables.", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { spec+: { jmxTrans+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } } },
          '#withHostAliases':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { spec+: { jmxTrans+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withHostAliasesMixin':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { spec+: { jmxTrans+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withImagePullSecrets':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { jmxTrans+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { jmxTrans+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withPriorityClassName':: d.fn(help='The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { spec+: { jmxTrans+: { template+: { pod+: { priorityClassName: priorityClassName } } } } },
          '#withSchedulerName':: d.fn(help='The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { spec+: { jmxTrans+: { template+: { pod+: { schedulerName: schedulerName } } } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { jmxTrans+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } },
          '#withTolerations':: d.fn(help="The pod's tolerations.", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { spec+: { jmxTrans+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTolerationsMixin':: d.fn(help="The pod's tolerations.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { spec+: { jmxTrans+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTopologySpreadConstraints':: d.fn(help="The pod's topology spread constraints.", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { jmxTrans+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help="The pod's topology spread constraints.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { jmxTrans+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
        },
      },
      '#withImage':: d.fn(help='The image to use for the JmxTrans.', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { jmxTrans+: { image: image } } },
      '#withKafkaQueries':: d.fn(help='Queries to send to the Kafka brokers to define what data should be read from each broker. For more information on these properties see, xref:type-JmxTransQueryTemplate-reference[`JmxTransQueryTemplate` schema reference].', args=[d.arg(name='kafkaQueries', type=d.T.array)]),
      withKafkaQueries(kafkaQueries): { spec+: { jmxTrans+: { kafkaQueries: if std.isArray(v=kafkaQueries) then kafkaQueries else [kafkaQueries] } } },
      '#withKafkaQueriesMixin':: d.fn(help='Queries to send to the Kafka brokers to define what data should be read from each broker. For more information on these properties see, xref:type-JmxTransQueryTemplate-reference[`JmxTransQueryTemplate` schema reference].\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kafkaQueries', type=d.T.array)]),
      withKafkaQueriesMixin(kafkaQueries): { spec+: { jmxTrans+: { kafkaQueries+: if std.isArray(v=kafkaQueries) then kafkaQueries else [kafkaQueries] } } },
      '#withLogLevel':: d.fn(help='Sets the logging level of the JmxTrans deployment.For more information see, https://github.com/jmxtrans/jmxtrans-agent/wiki/Troubleshooting[JmxTrans Logging Level].', args=[d.arg(name='logLevel', type=d.T.string)]),
      withLogLevel(logLevel): { spec+: { jmxTrans+: { logLevel: logLevel } } },
      '#withOutputDefinitions':: d.fn(help='Defines the output hosts that will be referenced later on. For more information on these properties see, xref:type-JmxTransOutputDefinitionTemplate-reference[`JmxTransOutputDefinitionTemplate` schema reference].', args=[d.arg(name='outputDefinitions', type=d.T.array)]),
      withOutputDefinitions(outputDefinitions): { spec+: { jmxTrans+: { outputDefinitions: if std.isArray(v=outputDefinitions) then outputDefinitions else [outputDefinitions] } } },
      '#withOutputDefinitionsMixin':: d.fn(help='Defines the output hosts that will be referenced later on. For more information on these properties see, xref:type-JmxTransOutputDefinitionTemplate-reference[`JmxTransOutputDefinitionTemplate` schema reference].\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='outputDefinitions', type=d.T.array)]),
      withOutputDefinitionsMixin(outputDefinitions): { spec+: { jmxTrans+: { outputDefinitions+: if std.isArray(v=outputDefinitions) then outputDefinitions else [outputDefinitions] } } },
    },
    '#kafka':: d.obj(help='Configuration of the Kafka cluster.'),
    kafka: {
      '#authorization':: d.obj(help='Authorization configuration for Kafka brokers.'),
      authorization: {
        '#withAllowOnError':: d.fn(help='Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). Defaults to `false` - all actions will be denied.', args=[d.arg(name='allowOnError', type=d.T.boolean)]),
        withAllowOnError(allowOnError): { spec+: { kafka+: { authorization+: { allowOnError: allowOnError } } } },
        '#withAuthorizerClass':: d.fn(help='Authorization implementation class, which must be available in classpath.', args=[d.arg(name='authorizerClass', type=d.T.string)]),
        withAuthorizerClass(authorizerClass): { spec+: { kafka+: { authorization+: { authorizerClass: authorizerClass } } } },
        '#withClientId':: d.fn(help='OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.', args=[d.arg(name='clientId', type=d.T.string)]),
        withClientId(clientId): { spec+: { kafka+: { authorization+: { clientId: clientId } } } },
        '#withDelegateToKafkaAcls':: d.fn(help="Whether authorization decision should be delegated to the 'Simple' authorizer if DENIED by Keycloak Authorization Services policies. Default value is `false`.", args=[d.arg(name='delegateToKafkaAcls', type=d.T.boolean)]),
        withDelegateToKafkaAcls(delegateToKafkaAcls): { spec+: { kafka+: { authorization+: { delegateToKafkaAcls: delegateToKafkaAcls } } } },
        '#withDisableTlsHostnameVerification':: d.fn(help='Enable or disable TLS hostname verification. Default value is `false`.', args=[d.arg(name='disableTlsHostnameVerification', type=d.T.boolean)]),
        withDisableTlsHostnameVerification(disableTlsHostnameVerification): { spec+: { kafka+: { authorization+: { disableTlsHostnameVerification: disableTlsHostnameVerification } } } },
        '#withExpireAfterMs':: d.fn(help='The expiration of the records kept in the local cache to avoid querying the Open Policy Agent for every request. Defines how often the cached authorization decisions are reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.', args=[d.arg(name='expireAfterMs', type=d.T.integer)]),
        withExpireAfterMs(expireAfterMs): { spec+: { kafka+: { authorization+: { expireAfterMs: expireAfterMs } } } },
        '#withGrantsRefreshPeriodSeconds':: d.fn(help='The time between two consecutive grants refresh runs in seconds. The default value is 60.', args=[d.arg(name='grantsRefreshPeriodSeconds', type=d.T.integer)]),
        withGrantsRefreshPeriodSeconds(grantsRefreshPeriodSeconds): { spec+: { kafka+: { authorization+: { grantsRefreshPeriodSeconds: grantsRefreshPeriodSeconds } } } },
        '#withGrantsRefreshPoolSize':: d.fn(help='The number of threads to use to refresh grants for active sessions. The more threads, the more parallelism, so the sooner the job completes. However, using more threads places a heavier load on the authorization server. The default value is 5.', args=[d.arg(name='grantsRefreshPoolSize', type=d.T.integer)]),
        withGrantsRefreshPoolSize(grantsRefreshPoolSize): { spec+: { kafka+: { authorization+: { grantsRefreshPoolSize: grantsRefreshPoolSize } } } },
        '#withInitialCacheCapacity':: d.fn(help='Initial capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request Defaults to `5000`.', args=[d.arg(name='initialCacheCapacity', type=d.T.integer)]),
        withInitialCacheCapacity(initialCacheCapacity): { spec+: { kafka+: { authorization+: { initialCacheCapacity: initialCacheCapacity } } } },
        '#withMaximumCacheSize':: d.fn(help='Maximum capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request. Defaults to `50000`.', args=[d.arg(name='maximumCacheSize', type=d.T.integer)]),
        withMaximumCacheSize(maximumCacheSize): { spec+: { kafka+: { authorization+: { maximumCacheSize: maximumCacheSize } } } },
        '#withSuperUsers':: d.fn(help='List of super users, which are user principals with unlimited access rights.', args=[d.arg(name='superUsers', type=d.T.array)]),
        withSuperUsers(superUsers): { spec+: { kafka+: { authorization+: { superUsers: if std.isArray(v=superUsers) then superUsers else [superUsers] } } } },
        '#withSuperUsersMixin':: d.fn(help='List of super users, which are user principals with unlimited access rights.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='superUsers', type=d.T.array)]),
        withSuperUsersMixin(superUsers): { spec+: { kafka+: { authorization+: { superUsers+: if std.isArray(v=superUsers) then superUsers else [superUsers] } } } },
        '#withTlsTrustedCertificates':: d.fn(help='Trusted certificates for TLS connection to the OAuth server.', args=[d.arg(name='tlsTrustedCertificates', type=d.T.array)]),
        withTlsTrustedCertificates(tlsTrustedCertificates): { spec+: { kafka+: { authorization+: { tlsTrustedCertificates: if std.isArray(v=tlsTrustedCertificates) then tlsTrustedCertificates else [tlsTrustedCertificates] } } } },
        '#withTlsTrustedCertificatesMixin':: d.fn(help='Trusted certificates for TLS connection to the OAuth server.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlsTrustedCertificates', type=d.T.array)]),
        withTlsTrustedCertificatesMixin(tlsTrustedCertificates): { spec+: { kafka+: { authorization+: { tlsTrustedCertificates+: if std.isArray(v=tlsTrustedCertificates) then tlsTrustedCertificates else [tlsTrustedCertificates] } } } },
        '#withTokenEndpointUri':: d.fn(help='Authorization server token endpoint URI.', args=[d.arg(name='tokenEndpointUri', type=d.T.string)]),
        withTokenEndpointUri(tokenEndpointUri): { spec+: { kafka+: { authorization+: { tokenEndpointUri: tokenEndpointUri } } } },
        '#withType':: d.fn(help="Authorization type. Currently, the supported types are `simple`, `keycloak`, `opa` and `custom`. `simple` authorization type uses Kafka's `kafka.security.authorizer.AclAuthorizer` class for authorization. `keycloak` authorization type uses Keycloak Authorization Services for authorization. `opa` authorization type uses Open Policy Agent based authorization.`custom` authorization type uses user-provided implementation for authorization.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kafka+: { authorization+: { type: type } } } },
        '#withUrl':: d.fn(help='The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.', args=[d.arg(name='url', type=d.T.string)]),
        withUrl(url): { spec+: { kafka+: { authorization+: { url: url } } } },
      },
      '#jmxOptions':: d.obj(help='JMX Options for Kafka brokers.'),
      jmxOptions: {
        '#authentication':: d.obj(help='Authentication configuration for connecting to the JMX port.'),
        authentication: {
          '#withType':: d.fn(help='Authentication type. Currently the only supported types are `password`.`password` type creates a username and protected port with no TLS.', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { spec+: { kafka+: { jmxOptions+: { authentication+: { type: type } } } } },
        },
      },
      '#jvmOptions':: d.obj(help='JVM Options for pods.'),
      jvmOptions: {
        '#withGcLoggingEnabled':: d.fn(help='Specifies whether the Garbage Collection logging is enabled. The default is false.', args=[d.arg(name='gcLoggingEnabled', type=d.T.boolean)]),
        withGcLoggingEnabled(gcLoggingEnabled): { spec+: { kafka+: { jvmOptions+: { gcLoggingEnabled: gcLoggingEnabled } } } },
        '#withJavaSystemProperties':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
        withJavaSystemProperties(javaSystemProperties): { spec+: { kafka+: { jvmOptions+: { javaSystemProperties: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } },
        '#withJavaSystemPropertiesMixin':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
        withJavaSystemPropertiesMixin(javaSystemProperties): { spec+: { kafka+: { jvmOptions+: { javaSystemProperties+: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } },
        '#withXX':: d.fn(help='A map of -XX options to the JVM.', args=[d.arg(name='XX', type=d.T.any)]),
        withXX(XX): { spec+: { kafka+: { jvmOptions+: { '-XX': XX } } } },
        '#withXms':: d.fn(help='-Xms option to to the JVM.', args=[d.arg(name='Xms', type=d.T.string)]),
        withXms(Xms): { spec+: { kafka+: { jvmOptions+: { '-Xms': Xms } } } },
        '#withXmx':: d.fn(help='-Xmx option to to the JVM.', args=[d.arg(name='Xmx', type=d.T.string)]),
        withXmx(Xmx): { spec+: { kafka+: { jvmOptions+: { '-Xmx': Xmx } } } },
      },
      '#livenessProbe':: d.obj(help='Pod liveness checking.'),
      livenessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { kafka+: { livenessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { kafka+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { kafka+: { livenessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { kafka+: { livenessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { kafka+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#logging':: d.obj(help='Logging configuration for Kafka.'),
      logging: {
        '#valueFrom':: d.obj(help='`ConfigMap` entry where the logging configuration is stored. '),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { logging+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { logging+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { logging+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withLoggers':: d.fn(help='A Map from logger name to logger level.', args=[d.arg(name='loggers', type=d.T.any)]),
        withLoggers(loggers): { spec+: { kafka+: { logging+: { loggers: loggers } } } },
        '#withType':: d.fn(help="Logging type, must be either 'inline' or 'external'.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kafka+: { logging+: { type: type } } } },
      },
      '#metricsConfig':: d.obj(help='Metrics configuration.'),
      metricsConfig: {
        '#valueFrom':: d.obj(help='ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.'),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { kafka+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { kafka+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { kafka+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withType':: d.fn(help="Metrics type. Only 'jmxPrometheusExporter' supported currently.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kafka+: { metricsConfig+: { type: type } } } },
      },
      '#rack':: d.obj(help='Configuration of the `broker.rack` broker config.'),
      rack: {
        '#withTopologyKey':: d.fn(help="A key that matches labels assigned to the Kubernetes cluster nodes. The value of the label is used to set the broker's `broker.rack` config and `client.rack` in Kafka Connect.", args=[d.arg(name='topologyKey', type=d.T.string)]),
        withTopologyKey(topologyKey): { spec+: { kafka+: { rack+: { topologyKey: topologyKey } } } },
      },
      '#readinessProbe':: d.obj(help='Pod readiness checking.'),
      readinessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { kafka+: { readinessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { kafka+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { kafka+: { readinessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { kafka+: { readinessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { kafka+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#resources':: d.obj(help='CPU and memory resources to reserve.'),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
        withLimits(limits): { spec+: { kafka+: { resources+: { limits: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
        withRequests(requests): { spec+: { kafka+: { resources+: { requests: requests } } } },
      },
      '#storage':: d.obj(help='Storage configuration (disk). Cannot be updated.'),
      storage: {
        '#withClass':: d.fn(help='The storage class to use for dynamic volume allocation.', args=[d.arg(name='class', type=d.T.string)]),
        withClass(class): { spec+: { kafka+: { storage+: { class: class } } } },
        '#withDeleteClaim':: d.fn(help='Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.', args=[d.arg(name='deleteClaim', type=d.T.boolean)]),
        withDeleteClaim(deleteClaim): { spec+: { kafka+: { storage+: { deleteClaim: deleteClaim } } } },
        '#withId':: d.fn(help="Storage identification number. It is mandatory only for storage volumes defined in a storage of type 'jbod'.", args=[d.arg(name='id', type=d.T.integer)]),
        withId(id): { spec+: { kafka+: { storage+: { id: id } } } },
        '#withOverrides':: d.fn(help='Overrides for individual brokers. The `overrides` field allows to specify a different configuration for different brokers.', args=[d.arg(name='overrides', type=d.T.array)]),
        withOverrides(overrides): { spec+: { kafka+: { storage+: { overrides: if std.isArray(v=overrides) then overrides else [overrides] } } } },
        '#withOverridesMixin':: d.fn(help='Overrides for individual brokers. The `overrides` field allows to specify a different configuration for different brokers.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overrides', type=d.T.array)]),
        withOverridesMixin(overrides): { spec+: { kafka+: { storage+: { overrides+: if std.isArray(v=overrides) then overrides else [overrides] } } } },
        '#withSelector':: d.fn(help='Specifies a specific persistent volume to use. It contains key:value pairs representing labels for selecting such a volume.', args=[d.arg(name='selector', type=d.T.any)]),
        withSelector(selector): { spec+: { kafka+: { storage+: { selector: selector } } } },
        '#withSize':: d.fn(help='When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.', args=[d.arg(name='size', type=d.T.string)]),
        withSize(size): { spec+: { kafka+: { storage+: { size: size } } } },
        '#withSizeLimit':: d.fn(help='When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).', args=[d.arg(name='sizeLimit', type=d.T.string)]),
        withSizeLimit(sizeLimit): { spec+: { kafka+: { storage+: { sizeLimit: sizeLimit } } } },
        '#withType':: d.fn(help="Storage type, must be either 'ephemeral', 'persistent-claim', or 'jbod'.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { kafka+: { storage+: { type: type } } } },
        '#withVolumes':: d.fn(help='List of volumes as Storage objects representing the JBOD disks array.', args=[d.arg(name='volumes', type=d.T.array)]),
        withVolumes(volumes): { spec+: { kafka+: { storage+: { volumes: if std.isArray(v=volumes) then volumes else [volumes] } } } },
        '#withVolumesMixin':: d.fn(help='List of volumes as Storage objects representing the JBOD disks array.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
        withVolumesMixin(volumes): { spec+: { kafka+: { storage+: { volumes+: if std.isArray(v=volumes) then volumes else [volumes] } } } },
      },
      '#template':: d.obj(help='Template for Kafka cluster resources. The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.'),
      template: {
        '#bootstrapService':: d.obj(help='Template for Kafka bootstrap `Service`.'),
        bootstrapService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { bootstrapService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { bootstrapService+: { metadata+: { labels: labels } } } } } },
          },
          '#withIpFamilies':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamilies(ipFamilies): { spec+: { kafka+: { template+: { bootstrapService+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamiliesMixin':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamiliesMixin(ipFamilies): { spec+: { kafka+: { template+: { bootstrapService+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamilyPolicy':: d.fn(help='Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
          withIpFamilyPolicy(ipFamilyPolicy): { spec+: { kafka+: { template+: { bootstrapService+: { ipFamilyPolicy: ipFamilyPolicy } } } } },
        },
        '#brokersService':: d.obj(help='Template for Kafka broker `Service`.'),
        brokersService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { brokersService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { brokersService+: { metadata+: { labels: labels } } } } } },
          },
          '#withIpFamilies':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamilies(ipFamilies): { spec+: { kafka+: { template+: { brokersService+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamiliesMixin':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamiliesMixin(ipFamilies): { spec+: { kafka+: { template+: { brokersService+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamilyPolicy':: d.fn(help='Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
          withIpFamilyPolicy(ipFamilyPolicy): { spec+: { kafka+: { template+: { brokersService+: { ipFamilyPolicy: ipFamilyPolicy } } } } },
        },
        '#clusterCaCert':: d.obj(help='Template for Secret with Kafka Cluster certificate public key.'),
        clusterCaCert: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { clusterCaCert+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { clusterCaCert+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#clusterRoleBinding':: d.obj(help='Template for the Kafka ClusterRoleBinding.'),
        clusterRoleBinding: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { clusterRoleBinding+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { clusterRoleBinding+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#externalBootstrapIngress':: d.obj(help='Template for Kafka external bootstrap `Ingress`.'),
        externalBootstrapIngress: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { externalBootstrapIngress+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { externalBootstrapIngress+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#externalBootstrapRoute':: d.obj(help='Template for Kafka external bootstrap `Route`.'),
        externalBootstrapRoute: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { externalBootstrapRoute+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { externalBootstrapRoute+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#externalBootstrapService':: d.obj(help='Template for Kafka external bootstrap `Service`.'),
        externalBootstrapService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { externalBootstrapService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { externalBootstrapService+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#initContainer':: d.obj(help='Template for the Kafka init container.'),
        initContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { kafka+: { template+: { initContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { kafka+: { template+: { initContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { kafka+: { template+: { initContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#kafkaContainer':: d.obj(help='Template for the Kafka broker container.'),
        kafkaContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { kafka+: { template+: { kafkaContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { kafka+: { template+: { kafkaContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { kafka+: { template+: { kafkaContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#perPodIngress':: d.obj(help='Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.'),
        perPodIngress: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { perPodIngress+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { perPodIngress+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#perPodRoute':: d.obj(help='Template for Kafka per-pod `Routes` used for access from outside of OpenShift.'),
        perPodRoute: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { perPodRoute+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { perPodRoute+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#perPodService':: d.obj(help='Template for Kafka per-pod `Services` used for access from outside of Kubernetes.'),
        perPodService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { perPodService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { perPodService+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#persistentVolumeClaim':: d.obj(help='Template for all Kafka `PersistentVolumeClaims`.'),
        persistentVolumeClaim: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { persistentVolumeClaim+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { persistentVolumeClaim+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#pod':: d.obj(help='Template for Kafka `Pods`.'),
        pod: {
          '#affinity':: d.obj(help="The pod's affinity rules."),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { spec+: { kafka+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { kafka+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafka+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
          },
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { pod+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { pod+: { metadata+: { labels: labels } } } } } },
          },
          '#securityContext':: d.obj(help='Configures pod-level security attributes and common container settings.'),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { kafka+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { kafka+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafka+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { kafka+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { kafka+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafka+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { kafka+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { kafka+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { kafka+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { spec+: { kafka+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { kafka+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { kafka+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { kafka+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { kafka+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { spec+: { kafka+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { spec+: { kafka+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { spec+: { kafka+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { spec+: { kafka+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
          },
          '#withEnableServiceLinks':: d.fn(help="Indicates whether information about services should be injected into Pod's environment variables.", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { spec+: { kafka+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } } },
          '#withHostAliases':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { spec+: { kafka+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withHostAliasesMixin':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { spec+: { kafka+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withImagePullSecrets':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { kafka+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { kafka+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withPriorityClassName':: d.fn(help='The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { spec+: { kafka+: { template+: { pod+: { priorityClassName: priorityClassName } } } } },
          '#withSchedulerName':: d.fn(help='The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { spec+: { kafka+: { template+: { pod+: { schedulerName: schedulerName } } } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { kafka+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } },
          '#withTolerations':: d.fn(help="The pod's tolerations.", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { spec+: { kafka+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTolerationsMixin':: d.fn(help="The pod's tolerations.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { spec+: { kafka+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTopologySpreadConstraints':: d.fn(help="The pod's topology spread constraints.", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { kafka+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help="The pod's topology spread constraints.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { kafka+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
        },
        '#podDisruptionBudget':: d.obj(help='Template for Kafka `PodDisruptionBudget`.'),
        podDisruptionBudget: {
          '#metadata':: d.obj(help='Metadata to apply to the `PodDistruptionBugetTemplate` resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { podDisruptionBudget+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { podDisruptionBudget+: { metadata+: { labels: labels } } } } } },
          },
          '#withMaxUnavailable':: d.fn(help='Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.', args=[d.arg(name='maxUnavailable', type=d.T.integer)]),
          withMaxUnavailable(maxUnavailable): { spec+: { kafka+: { template+: { podDisruptionBudget+: { maxUnavailable: maxUnavailable } } } } },
        },
        '#statefulset':: d.obj(help='Template for Kafka `StatefulSet`.'),
        statefulset: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafka+: { template+: { statefulset+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafka+: { template+: { statefulset+: { metadata+: { labels: labels } } } } } },
          },
          '#withPodManagementPolicy':: d.fn(help='PodManagementPolicy which will be used for this StatefulSet. Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.', args=[d.arg(name='podManagementPolicy', type=d.T.string)]),
          withPodManagementPolicy(podManagementPolicy): { spec+: { kafka+: { template+: { statefulset+: { podManagementPolicy: podManagementPolicy } } } } },
        },
      },
      '#withBrokerRackInitImage':: d.fn(help='The image of the init container used for initializing the `broker.rack`.', args=[d.arg(name='brokerRackInitImage', type=d.T.string)]),
      withBrokerRackInitImage(brokerRackInitImage): { spec+: { kafka+: { brokerRackInitImage: brokerRackInitImage } } },
      '#withConfig':: d.fn(help='Kafka broker config properties with the following prefixes cannot be set: listeners, advertised., broker., listener., host.name, port, inter.broker.listener.name, sasl., ssl., security., password., principal.builder.class, log.dir, zookeeper.connect, zookeeper.set.acl, zookeeper.ssl, zookeeper.clientCnxnSocket, authorizer., super.user, cruise.control.metrics.topic, cruise.control.metrics.reporter.bootstrap.servers (with the exception of: zookeeper.connection.timeout.ms, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols,cruise.control.metrics.topic.num.partitions, cruise.control.metrics.topic.replication.factor, cruise.control.metrics.topic.retention.ms,cruise.control.metrics.topic.auto.create.retries, cruise.control.metrics.topic.auto.create.timeout.ms,cruise.control.metrics.topic.min.insync.replicas).', args=[d.arg(name='config', type=d.T.any)]),
      withConfig(config): { spec+: { kafka+: { config: config } } },
      '#withImage':: d.fn(help='The docker image for the pods. The default value depends on the configured `Kafka.spec.kafka.version`.', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { kafka+: { image: image } } },
      '#withListeners':: d.fn(help='', args=[d.arg(name='listeners', type=d.T.array)]),
      withListeners(listeners): { spec+: { kafka+: { listeners: if std.isArray(v=listeners) then listeners else [listeners] } } },
      '#withListenersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='listeners', type=d.T.array)]),
      withListenersMixin(listeners): { spec+: { kafka+: { listeners+: if std.isArray(v=listeners) then listeners else [listeners] } } },
      '#withReplicas':: d.fn(help='The number of pods in the cluster.', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { kafka+: { replicas: replicas } } },
      '#withVersion':: d.fn(help='The kafka broker version. Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.', args=[d.arg(name='version', type=d.T.string)]),
      withVersion(version): { spec+: { kafka+: { version: version } } },
    },
    '#kafkaExporter':: d.obj(help='Configuration of the Kafka Exporter. Kafka Exporter can provide additional metrics, for example lag of consumer group at topic/partition.'),
    kafkaExporter: {
      '#livenessProbe':: d.obj(help='Pod liveness check.'),
      livenessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { kafkaExporter+: { livenessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { kafkaExporter+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { kafkaExporter+: { livenessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { kafkaExporter+: { livenessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { kafkaExporter+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#readinessProbe':: d.obj(help='Pod readiness check.'),
      readinessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { kafkaExporter+: { readinessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { kafkaExporter+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { kafkaExporter+: { readinessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { kafkaExporter+: { readinessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { kafkaExporter+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#resources':: d.obj(help='CPU and memory resources to reserve.'),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
        withLimits(limits): { spec+: { kafkaExporter+: { resources+: { limits: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
        withRequests(requests): { spec+: { kafkaExporter+: { resources+: { requests: requests } } } },
      },
      '#template':: d.obj(help='Customization of deployment templates and pods.'),
      template: {
        '#container':: d.obj(help='Template for the Kafka Exporter container.'),
        container: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { kafkaExporter+: { template+: { container+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { kafkaExporter+: { template+: { container+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { kafkaExporter+: { template+: { container+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
        '#deployment':: d.obj(help='Template for Kafka Exporter `Deployment`.'),
        deployment: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafkaExporter+: { template+: { deployment+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafkaExporter+: { template+: { deployment+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#pod':: d.obj(help='Template for Kafka Exporter `Pods`.'),
        pod: {
          '#affinity':: d.obj(help="The pod's affinity rules."),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { kafkaExporter+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
          },
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafkaExporter+: { template+: { pod+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafkaExporter+: { template+: { pod+: { metadata+: { labels: labels } } } } } },
          },
          '#securityContext':: d.obj(help='Configures pod-level security attributes and common container settings.'),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { spec+: { kafkaExporter+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
          },
          '#withEnableServiceLinks':: d.fn(help="Indicates whether information about services should be injected into Pod's environment variables.", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { spec+: { kafkaExporter+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } } },
          '#withHostAliases':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { spec+: { kafkaExporter+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withHostAliasesMixin':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { spec+: { kafkaExporter+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withImagePullSecrets':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { kafkaExporter+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { kafkaExporter+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withPriorityClassName':: d.fn(help='The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { spec+: { kafkaExporter+: { template+: { pod+: { priorityClassName: priorityClassName } } } } },
          '#withSchedulerName':: d.fn(help='The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { spec+: { kafkaExporter+: { template+: { pod+: { schedulerName: schedulerName } } } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { kafkaExporter+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } },
          '#withTolerations':: d.fn(help="The pod's tolerations.", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { spec+: { kafkaExporter+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTolerationsMixin':: d.fn(help="The pod's tolerations.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { spec+: { kafkaExporter+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTopologySpreadConstraints':: d.fn(help="The pod's topology spread constraints.", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { kafkaExporter+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help="The pod's topology spread constraints.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { kafkaExporter+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
        },
        '#service':: d.obj(help='Template for Kafka Exporter `Service`.'),
        service: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { kafkaExporter+: { template+: { service+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { kafkaExporter+: { template+: { service+: { metadata+: { labels: labels } } } } } },
          },
        },
      },
      '#withEnableSaramaLogging':: d.fn(help='Enable Sarama logging, a Go client library used by the Kafka Exporter.', args=[d.arg(name='enableSaramaLogging', type=d.T.boolean)]),
      withEnableSaramaLogging(enableSaramaLogging): { spec+: { kafkaExporter+: { enableSaramaLogging: enableSaramaLogging } } },
      '#withGroupRegex':: d.fn(help='Regular expression to specify which consumer groups to collect. Default value is `.*`.', args=[d.arg(name='groupRegex', type=d.T.string)]),
      withGroupRegex(groupRegex): { spec+: { kafkaExporter+: { groupRegex: groupRegex } } },
      '#withImage':: d.fn(help='The docker image for the pods.', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { kafkaExporter+: { image: image } } },
      '#withLogging':: d.fn(help='Only log messages with the given severity or above. Valid levels: [`debug`, `info`, `warn`, `error`, `fatal`]. Default log level is `info`.', args=[d.arg(name='logging', type=d.T.string)]),
      withLogging(logging): { spec+: { kafkaExporter+: { logging: logging } } },
      '#withTopicRegex':: d.fn(help='Regular expression to specify which topics to collect. Default value is `.*`.', args=[d.arg(name='topicRegex', type=d.T.string)]),
      withTopicRegex(topicRegex): { spec+: { kafkaExporter+: { topicRegex: topicRegex } } },
    },
    '#withMaintenanceTimeWindows':: d.fn(help='A list of time windows for maintenance tasks (that is, certificates renewal). Each time window is defined by a cron expression.', args=[d.arg(name='maintenanceTimeWindows', type=d.T.array)]),
    withMaintenanceTimeWindows(maintenanceTimeWindows): { spec+: { maintenanceTimeWindows: if std.isArray(v=maintenanceTimeWindows) then maintenanceTimeWindows else [maintenanceTimeWindows] } },
    '#withMaintenanceTimeWindowsMixin':: d.fn(help='A list of time windows for maintenance tasks (that is, certificates renewal). Each time window is defined by a cron expression.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='maintenanceTimeWindows', type=d.T.array)]),
    withMaintenanceTimeWindowsMixin(maintenanceTimeWindows): { spec+: { maintenanceTimeWindows+: if std.isArray(v=maintenanceTimeWindows) then maintenanceTimeWindows else [maintenanceTimeWindows] } },
    '#zookeeper':: d.obj(help='Configuration of the ZooKeeper cluster.'),
    zookeeper: {
      '#jvmOptions':: d.obj(help='JVM Options for pods.'),
      jvmOptions: {
        '#withGcLoggingEnabled':: d.fn(help='Specifies whether the Garbage Collection logging is enabled. The default is false.', args=[d.arg(name='gcLoggingEnabled', type=d.T.boolean)]),
        withGcLoggingEnabled(gcLoggingEnabled): { spec+: { zookeeper+: { jvmOptions+: { gcLoggingEnabled: gcLoggingEnabled } } } },
        '#withJavaSystemProperties':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
        withJavaSystemProperties(javaSystemProperties): { spec+: { zookeeper+: { jvmOptions+: { javaSystemProperties: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } },
        '#withJavaSystemPropertiesMixin':: d.fn(help='A map of additional system properties which will be passed using the `-D` option to the JVM.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
        withJavaSystemPropertiesMixin(javaSystemProperties): { spec+: { zookeeper+: { jvmOptions+: { javaSystemProperties+: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } } },
        '#withXX':: d.fn(help='A map of -XX options to the JVM.', args=[d.arg(name='XX', type=d.T.any)]),
        withXX(XX): { spec+: { zookeeper+: { jvmOptions+: { '-XX': XX } } } },
        '#withXms':: d.fn(help='-Xms option to to the JVM.', args=[d.arg(name='Xms', type=d.T.string)]),
        withXms(Xms): { spec+: { zookeeper+: { jvmOptions+: { '-Xms': Xms } } } },
        '#withXmx':: d.fn(help='-Xmx option to to the JVM.', args=[d.arg(name='Xmx', type=d.T.string)]),
        withXmx(Xmx): { spec+: { zookeeper+: { jvmOptions+: { '-Xmx': Xmx } } } },
      },
      '#livenessProbe':: d.obj(help='Pod liveness checking.'),
      livenessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { zookeeper+: { livenessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { zookeeper+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { zookeeper+: { livenessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { zookeeper+: { livenessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { zookeeper+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#logging':: d.obj(help='Logging configuration for ZooKeeper.'),
      logging: {
        '#valueFrom':: d.obj(help='`ConfigMap` entry where the logging configuration is stored. '),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { zookeeper+: { logging+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { zookeeper+: { logging+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { zookeeper+: { logging+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withLoggers':: d.fn(help='A Map from logger name to logger level.', args=[d.arg(name='loggers', type=d.T.any)]),
        withLoggers(loggers): { spec+: { zookeeper+: { logging+: { loggers: loggers } } } },
        '#withType':: d.fn(help="Logging type, must be either 'inline' or 'external'.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { zookeeper+: { logging+: { type: type } } } },
      },
      '#metricsConfig':: d.obj(help='Metrics configuration.'),
      metricsConfig: {
        '#valueFrom':: d.obj(help='ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.'),
        valueFrom: {
          '#configMapKeyRef':: d.obj(help='Reference to the key in the ConfigMap containing the configuration.'),
          configMapKeyRef: {
            '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
            withKey(key): { spec+: { zookeeper+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { key: key } } } } } },
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { spec+: { zookeeper+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { name: name } } } } } },
            '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
            withOptional(optional): { spec+: { zookeeper+: { metricsConfig+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } } },
          },
        },
        '#withType':: d.fn(help="Metrics type. Only 'jmxPrometheusExporter' supported currently.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { zookeeper+: { metricsConfig+: { type: type } } } },
      },
      '#readinessProbe':: d.obj(help='Pod readiness checking.'),
      readinessProbe: {
        '#withFailureThreshold':: d.fn(help='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
        withFailureThreshold(failureThreshold): { spec+: { zookeeper+: { readinessProbe+: { failureThreshold: failureThreshold } } } },
        '#withInitialDelaySeconds':: d.fn(help='The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
        withInitialDelaySeconds(initialDelaySeconds): { spec+: { zookeeper+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } } },
        '#withPeriodSeconds':: d.fn(help='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
        withPeriodSeconds(periodSeconds): { spec+: { zookeeper+: { readinessProbe+: { periodSeconds: periodSeconds } } } },
        '#withSuccessThreshold':: d.fn(help='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.', args=[d.arg(name='successThreshold', type=d.T.integer)]),
        withSuccessThreshold(successThreshold): { spec+: { zookeeper+: { readinessProbe+: { successThreshold: successThreshold } } } },
        '#withTimeoutSeconds':: d.fn(help='The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
        withTimeoutSeconds(timeoutSeconds): { spec+: { zookeeper+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } } },
      },
      '#resources':: d.obj(help='CPU and memory resources to reserve.'),
      resources: {
        '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.any)]),
        withLimits(limits): { spec+: { zookeeper+: { resources+: { limits: limits } } } },
        '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.any)]),
        withRequests(requests): { spec+: { zookeeper+: { resources+: { requests: requests } } } },
      },
      '#storage':: d.obj(help='Storage configuration (disk). Cannot be updated.'),
      storage: {
        '#withClass':: d.fn(help='The storage class to use for dynamic volume allocation.', args=[d.arg(name='class', type=d.T.string)]),
        withClass(class): { spec+: { zookeeper+: { storage+: { class: class } } } },
        '#withDeleteClaim':: d.fn(help='Specifies if the persistent volume claim has to be deleted when the cluster is un-deployed.', args=[d.arg(name='deleteClaim', type=d.T.boolean)]),
        withDeleteClaim(deleteClaim): { spec+: { zookeeper+: { storage+: { deleteClaim: deleteClaim } } } },
        '#withId':: d.fn(help="Storage identification number. It is mandatory only for storage volumes defined in a storage of type 'jbod'.", args=[d.arg(name='id', type=d.T.integer)]),
        withId(id): { spec+: { zookeeper+: { storage+: { id: id } } } },
        '#withOverrides':: d.fn(help='Overrides for individual brokers. The `overrides` field allows to specify a different configuration for different brokers.', args=[d.arg(name='overrides', type=d.T.array)]),
        withOverrides(overrides): { spec+: { zookeeper+: { storage+: { overrides: if std.isArray(v=overrides) then overrides else [overrides] } } } },
        '#withOverridesMixin':: d.fn(help='Overrides for individual brokers. The `overrides` field allows to specify a different configuration for different brokers.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='overrides', type=d.T.array)]),
        withOverridesMixin(overrides): { spec+: { zookeeper+: { storage+: { overrides+: if std.isArray(v=overrides) then overrides else [overrides] } } } },
        '#withSelector':: d.fn(help='Specifies a specific persistent volume to use. It contains key:value pairs representing labels for selecting such a volume.', args=[d.arg(name='selector', type=d.T.any)]),
        withSelector(selector): { spec+: { zookeeper+: { storage+: { selector: selector } } } },
        '#withSize':: d.fn(help='When type=persistent-claim, defines the size of the persistent volume claim (i.e 1Gi). Mandatory when type=persistent-claim.', args=[d.arg(name='size', type=d.T.string)]),
        withSize(size): { spec+: { zookeeper+: { storage+: { size: size } } } },
        '#withSizeLimit':: d.fn(help='When type=ephemeral, defines the total amount of local storage required for this EmptyDir volume (for example 1Gi).', args=[d.arg(name='sizeLimit', type=d.T.string)]),
        withSizeLimit(sizeLimit): { spec+: { zookeeper+: { storage+: { sizeLimit: sizeLimit } } } },
        '#withType':: d.fn(help="Storage type, must be either 'ephemeral' or 'persistent-claim'.", args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { zookeeper+: { storage+: { type: type } } } },
      },
      '#template':: d.obj(help='Template for ZooKeeper cluster resources. The template allows users to specify how are the `StatefulSet`, `Pods` and `Services` generated.'),
      template: {
        '#clientService':: d.obj(help='Template for ZooKeeper client `Service`.'),
        clientService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { zookeeper+: { template+: { clientService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { zookeeper+: { template+: { clientService+: { metadata+: { labels: labels } } } } } },
          },
          '#withIpFamilies':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamilies(ipFamilies): { spec+: { zookeeper+: { template+: { clientService+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamiliesMixin':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamiliesMixin(ipFamilies): { spec+: { zookeeper+: { template+: { clientService+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamilyPolicy':: d.fn(help='Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
          withIpFamilyPolicy(ipFamilyPolicy): { spec+: { zookeeper+: { template+: { clientService+: { ipFamilyPolicy: ipFamilyPolicy } } } } },
        },
        '#nodesService':: d.obj(help='Template for ZooKeeper nodes `Service`.'),
        nodesService: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { zookeeper+: { template+: { nodesService+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { zookeeper+: { template+: { nodesService+: { metadata+: { labels: labels } } } } } },
          },
          '#withIpFamilies':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamilies(ipFamilies): { spec+: { zookeeper+: { template+: { nodesService+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamiliesMixin':: d.fn(help='Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
          withIpFamiliesMixin(ipFamilies): { spec+: { zookeeper+: { template+: { nodesService+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } } },
          '#withIpFamilyPolicy':: d.fn(help='Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer.', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
          withIpFamilyPolicy(ipFamilyPolicy): { spec+: { zookeeper+: { template+: { nodesService+: { ipFamilyPolicy: ipFamilyPolicy } } } } },
        },
        '#persistentVolumeClaim':: d.obj(help='Template for all ZooKeeper `PersistentVolumeClaims`.'),
        persistentVolumeClaim: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { zookeeper+: { template+: { persistentVolumeClaim+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { zookeeper+: { template+: { persistentVolumeClaim+: { metadata+: { labels: labels } } } } } },
          },
        },
        '#pod':: d.obj(help='Template for ZooKeeper `Pods`.'),
        pod: {
          '#affinity':: d.obj(help="The pod's affinity rules."),
          affinity: {
            '#nodeAffinity':: d.obj(help=''),
            nodeAffinity: {
              '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
              requiredDuringSchedulingIgnoredDuringExecution: {
                '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTerms(nodeSelectorTerms): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
                '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
                withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } } },
              },
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAffinity':: d.obj(help=''),
            podAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
            '#podAntiAffinity':: d.obj(help=''),
            podAntiAffinity: {
              '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
              '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
              withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { zookeeper+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } } },
            },
          },
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { zookeeper+: { template+: { pod+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { zookeeper+: { template+: { pod+: { metadata+: { labels: labels } } } } } },
          },
          '#securityContext':: d.obj(help='Configures pod-level security attributes and common container settings.'),
          securityContext: {
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
            withFsGroup(fsGroup): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } } },
            '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
            withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } } },
            '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroups(supplementalGroups): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
            withSupplementalGroupsMixin(supplementalGroups): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } } },
            '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctls(sysctls): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
            '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
            withSysctlsMixin(sysctls): { spec+: { zookeeper+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } } },
          },
          '#withEnableServiceLinks':: d.fn(help="Indicates whether information about services should be injected into Pod's environment variables.", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
          withEnableServiceLinks(enableServiceLinks): { spec+: { zookeeper+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } } },
          '#withHostAliases':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliases(hostAliases): { spec+: { zookeeper+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withHostAliasesMixin':: d.fn(help="The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
          withHostAliasesMixin(hostAliases): { spec+: { zookeeper+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } } },
          '#withImagePullSecrets':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecrets(imagePullSecrets): { spec+: { zookeeper+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withImagePullSecretsMixin':: d.fn(help='List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
          withImagePullSecretsMixin(imagePullSecrets): { spec+: { zookeeper+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } } },
          '#withPriorityClassName':: d.fn(help='The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
          withPriorityClassName(priorityClassName): { spec+: { zookeeper+: { template+: { pod+: { priorityClassName: priorityClassName } } } } },
          '#withSchedulerName':: d.fn(help='The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.', args=[d.arg(name='schedulerName', type=d.T.string)]),
          withSchedulerName(schedulerName): { spec+: { zookeeper+: { template+: { pod+: { schedulerName: schedulerName } } } } },
          '#withTerminationGracePeriodSeconds':: d.fn(help='The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
          withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { zookeeper+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } } },
          '#withTolerations':: d.fn(help="The pod's tolerations.", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerations(tolerations): { spec+: { zookeeper+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTolerationsMixin':: d.fn(help="The pod's tolerations.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
          withTolerationsMixin(tolerations): { spec+: { zookeeper+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } } },
          '#withTopologySpreadConstraints':: d.fn(help="The pod's topology spread constraints.", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { zookeeper+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
          '#withTopologySpreadConstraintsMixin':: d.fn(help="The pod's topology spread constraints.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
          withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { zookeeper+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } } },
        },
        '#podDisruptionBudget':: d.obj(help='Template for ZooKeeper `PodDisruptionBudget`.'),
        podDisruptionBudget: {
          '#metadata':: d.obj(help='Metadata to apply to the `PodDistruptionBugetTemplate` resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { zookeeper+: { template+: { podDisruptionBudget+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { zookeeper+: { template+: { podDisruptionBudget+: { metadata+: { labels: labels } } } } } },
          },
          '#withMaxUnavailable':: d.fn(help='Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.', args=[d.arg(name='maxUnavailable', type=d.T.integer)]),
          withMaxUnavailable(maxUnavailable): { spec+: { zookeeper+: { template+: { podDisruptionBudget+: { maxUnavailable: maxUnavailable } } } } },
        },
        '#statefulset':: d.obj(help='Template for ZooKeeper `StatefulSet`.'),
        statefulset: {
          '#metadata':: d.obj(help='Metadata applied to the resource.'),
          metadata: {
            '#withAnnotations':: d.fn(help='Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='annotations', type=d.T.any)]),
            withAnnotations(annotations): { spec+: { zookeeper+: { template+: { statefulset+: { metadata+: { annotations: annotations } } } } } },
            '#withLabels':: d.fn(help='Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.', args=[d.arg(name='labels', type=d.T.any)]),
            withLabels(labels): { spec+: { zookeeper+: { template+: { statefulset+: { metadata+: { labels: labels } } } } } },
          },
          '#withPodManagementPolicy':: d.fn(help='PodManagementPolicy which will be used for this StatefulSet. Valid values are `Parallel` and `OrderedReady`. Defaults to `Parallel`.', args=[d.arg(name='podManagementPolicy', type=d.T.string)]),
          withPodManagementPolicy(podManagementPolicy): { spec+: { zookeeper+: { template+: { statefulset+: { podManagementPolicy: podManagementPolicy } } } } },
        },
        '#zookeeperContainer':: d.obj(help='Template for the ZooKeeper container.'),
        zookeeperContainer: {
          '#securityContext':: d.obj(help='Security context for the container.'),
          securityContext: {
            '#capabilities':: d.obj(help=''),
            capabilities: {
              '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
              withAdd(add): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
              withAddMixin(add): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } } },
              '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
              withDrop(drop): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } } },
              '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
              withDropMixin(drop): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } } },
            },
            '#seLinuxOptions':: d.obj(help=''),
            seLinuxOptions: {
              '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
              withLevel(level): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } } },
              '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
              withRole(role): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } } },
              '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
              withUser(user): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } } },
            },
            '#seccompProfile':: d.obj(help=''),
            seccompProfile: {
              '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
              withLocalhostProfile(localhostProfile): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } } },
              '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
              withType(type): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } } },
            },
            '#windowsOptions':: d.obj(help=''),
            windowsOptions: {
              '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
              withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } } },
              '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
              withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } } },
              '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
              withRunAsUserName(runAsUserName): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } } },
            },
            '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
            withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } } },
            '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
            withPrivileged(privileged): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { privileged: privileged } } } } } },
            '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
            withProcMount(procMount): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { procMount: procMount } } } } } },
            '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
            withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } } },
            '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
            withRunAsGroup(runAsGroup): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } } },
            '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
            withRunAsNonRoot(runAsNonRoot): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } } },
            '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
            withRunAsUser(runAsUser): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { securityContext+: { runAsUser: runAsUser } } } } } },
          },
          '#withEnv':: d.fn(help='Environment variables which should be applied to the container.', args=[d.arg(name='env', type=d.T.array)]),
          withEnv(env): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { env: if std.isArray(v=env) then env else [env] } } } } },
          '#withEnvMixin':: d.fn(help='Environment variables which should be applied to the container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
          withEnvMixin(env): { spec+: { zookeeper+: { template+: { zookeeperContainer+: { env+: if std.isArray(v=env) then env else [env] } } } } },
        },
      },
      '#withConfig':: d.fn(help='The ZooKeeper broker config. Properties with the following prefixes cannot be set: server., dataDir, dataLogDir, clientPort, authProvider, quorum.auth, requireClientAuthScheme, snapshot.trust.empty, standaloneEnabled, reconfigEnabled, 4lw.commands.whitelist, secureClientPort, ssl., serverCnxnFactory, sslQuorum (with the exception of: ssl.protocol, ssl.quorum.protocol, ssl.enabledProtocols, ssl.quorum.enabledProtocols, ssl.ciphersuites, ssl.quorum.ciphersuites, ssl.hostnameVerification, ssl.quorum.hostnameVerification).', args=[d.arg(name='config', type=d.T.any)]),
      withConfig(config): { spec+: { zookeeper+: { config: config } } },
      '#withImage':: d.fn(help='The docker image for the pods.', args=[d.arg(name='image', type=d.T.string)]),
      withImage(image): { spec+: { zookeeper+: { image: image } } },
      '#withReplicas':: d.fn(help='The number of pods in the cluster.', args=[d.arg(name='replicas', type=d.T.integer)]),
      withReplicas(replicas): { spec+: { zookeeper+: { replicas: replicas } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
