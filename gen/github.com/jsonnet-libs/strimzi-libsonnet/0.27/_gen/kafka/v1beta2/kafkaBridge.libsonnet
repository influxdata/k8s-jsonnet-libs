{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='kafkaBridge', url='', help=''),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of KafkaBridge', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'kafka.strimzi.io/v1beta2',
    kind: 'KafkaBridge',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"The specification of the Kafka Bridge."'),
  spec: {
    '#adminClient':: d.obj(help='"Kafka AdminClient related configuration."'),
    adminClient: {
      '#withConfig':: d.fn(help='"The Kafka AdminClient configuration used for AdminClient instances created by the bridge."', args=[d.arg(name='config', type=d.T.object)]),
      withConfig(config): { spec+: { adminClient+: { config: config } } },
      '#withConfigMixin':: d.fn(help='"The Kafka AdminClient configuration used for AdminClient instances created by the bridge."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='config', type=d.T.object)]),
      withConfigMixin(config): { spec+: { adminClient+: { config+: config } } },
    },
    '#authentication':: d.obj(help='"Authentication configuration for connecting to the cluster."'),
    authentication: {
      '#accessToken':: d.obj(help='"Link to Kubernetes Secret containing the access token which was obtained from the authorization server."'),
      accessToken: {
        '#withKey':: d.fn(help='"The key under which the secret value is stored in the Kubernetes Secret."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { authentication+: { accessToken+: { key: key } } } },
        '#withSecretName':: d.fn(help='"The name of the Kubernetes Secret containing the secret value."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { authentication+: { accessToken+: { secretName: secretName } } } },
      },
      '#certificateAndKey':: d.obj(help='"Reference to the `Secret` which holds the certificate and private key pair."'),
      certificateAndKey: {
        '#withCertificate':: d.fn(help='"The name of the file certificate in the Secret."', args=[d.arg(name='certificate', type=d.T.string)]),
        withCertificate(certificate): { spec+: { authentication+: { certificateAndKey+: { certificate: certificate } } } },
        '#withKey':: d.fn(help='"The name of the private key in the Secret."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { authentication+: { certificateAndKey+: { key: key } } } },
        '#withSecretName':: d.fn(help='"The name of the Secret containing the certificate."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { authentication+: { certificateAndKey+: { secretName: secretName } } } },
      },
      '#clientSecret':: d.obj(help='"Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI."'),
      clientSecret: {
        '#withKey':: d.fn(help='"The key under which the secret value is stored in the Kubernetes Secret."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { authentication+: { clientSecret+: { key: key } } } },
        '#withSecretName':: d.fn(help='"The name of the Kubernetes Secret containing the secret value."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { authentication+: { clientSecret+: { secretName: secretName } } } },
      },
      '#passwordSecret':: d.obj(help='"Reference to the `Secret` which holds the password."'),
      passwordSecret: {
        '#withPassword':: d.fn(help='"The name of the key in the Secret under which the password is stored."', args=[d.arg(name='password', type=d.T.string)]),
        withPassword(password): { spec+: { authentication+: { passwordSecret+: { password: password } } } },
        '#withSecretName':: d.fn(help='"The name of the Secret containing the password."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { authentication+: { passwordSecret+: { secretName: secretName } } } },
      },
      '#refreshToken':: d.obj(help='"Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server."'),
      refreshToken: {
        '#withKey':: d.fn(help='"The key under which the secret value is stored in the Kubernetes Secret."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { authentication+: { refreshToken+: { key: key } } } },
        '#withSecretName':: d.fn(help='"The name of the Kubernetes Secret containing the secret value."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { spec+: { authentication+: { refreshToken+: { secretName: secretName } } } },
      },
      '#tlsTrustedCertificates':: d.obj(help='"Trusted certificates for TLS connection to the OAuth server."'),
      tlsTrustedCertificates: {
        '#withCertificate':: d.fn(help='"The name of the file certificate in the Secret."', args=[d.arg(name='certificate', type=d.T.string)]),
        withCertificate(certificate): { certificate: certificate },
        '#withSecretName':: d.fn(help='"The name of the Secret containing the certificate."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { secretName: secretName },
      },
      '#withAccessTokenIsJwt':: d.fn(help='"Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`."', args=[d.arg(name='accessTokenIsJwt', type=d.T.boolean)]),
      withAccessTokenIsJwt(accessTokenIsJwt): { spec+: { authentication+: { accessTokenIsJwt: accessTokenIsJwt } } },
      '#withAudience':: d.fn(help='"OAuth audience to use when authenticating against the authorization server. Some authorization servers require the audience to be explicitly set. The possible values depend on how the authorization server is configured. By default, `audience` is not specified when performing the token endpoint request."', args=[d.arg(name='audience', type=d.T.string)]),
      withAudience(audience): { spec+: { authentication+: { audience: audience } } },
      '#withClientId':: d.fn(help='"OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI."', args=[d.arg(name='clientId', type=d.T.string)]),
      withClientId(clientId): { spec+: { authentication+: { clientId: clientId } } },
      '#withDisableTlsHostnameVerification':: d.fn(help='"Enable or disable TLS hostname verification. Default value is `false`."', args=[d.arg(name='disableTlsHostnameVerification', type=d.T.boolean)]),
      withDisableTlsHostnameVerification(disableTlsHostnameVerification): { spec+: { authentication+: { disableTlsHostnameVerification: disableTlsHostnameVerification } } },
      '#withMaxTokenExpirySeconds':: d.fn(help='"Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens."', args=[d.arg(name='maxTokenExpirySeconds', type=d.T.integer)]),
      withMaxTokenExpirySeconds(maxTokenExpirySeconds): { spec+: { authentication+: { maxTokenExpirySeconds: maxTokenExpirySeconds } } },
      '#withScope':: d.fn(help='"OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request."', args=[d.arg(name='scope', type=d.T.string)]),
      withScope(scope): { spec+: { authentication+: { scope: scope } } },
      '#withTlsTrustedCertificates':: d.fn(help='"Trusted certificates for TLS connection to the OAuth server."', args=[d.arg(name='tlsTrustedCertificates', type=d.T.array)]),
      withTlsTrustedCertificates(tlsTrustedCertificates): { spec+: { authentication+: { tlsTrustedCertificates: if std.isArray(v=tlsTrustedCertificates) then tlsTrustedCertificates else [tlsTrustedCertificates] } } },
      '#withTlsTrustedCertificatesMixin':: d.fn(help='"Trusted certificates for TLS connection to the OAuth server."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlsTrustedCertificates', type=d.T.array)]),
      withTlsTrustedCertificatesMixin(tlsTrustedCertificates): { spec+: { authentication+: { tlsTrustedCertificates+: if std.isArray(v=tlsTrustedCertificates) then tlsTrustedCertificates else [tlsTrustedCertificates] } } },
      '#withTokenEndpointUri':: d.fn(help='"Authorization server token endpoint URI."', args=[d.arg(name='tokenEndpointUri', type=d.T.string)]),
      withTokenEndpointUri(tokenEndpointUri): { spec+: { authentication+: { tokenEndpointUri: tokenEndpointUri } } },
      '#withType':: d.fn(help='"Authentication type. Currently the only supported types are `tls`, `scram-sha-256`, `scram-sha-512`, and `plain`. `scram-sha-256` and `scram-sha-512` types use SASL SCRAM-SHA-256 and SASL SCRAM-SHA-512 Authentication, respectively. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { authentication+: { type: type } } },
      '#withUsername':: d.fn(help='"Username used for the authentication."', args=[d.arg(name='username', type=d.T.string)]),
      withUsername(username): { spec+: { authentication+: { username: username } } },
    },
    '#consumer':: d.obj(help='"Kafka consumer related configuration."'),
    consumer: {
      '#withConfig':: d.fn(help='"The Kafka consumer configuration used for consumer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, group.id, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols)."', args=[d.arg(name='config', type=d.T.object)]),
      withConfig(config): { spec+: { consumer+: { config: config } } },
      '#withConfigMixin':: d.fn(help='"The Kafka consumer configuration used for consumer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, group.id, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='config', type=d.T.object)]),
      withConfigMixin(config): { spec+: { consumer+: { config+: config } } },
    },
    '#http':: d.obj(help='"The HTTP related configuration."'),
    http: {
      '#cors':: d.obj(help='"CORS configuration for the HTTP Bridge."'),
      cors: {
        '#withAllowedMethods':: d.fn(help='"List of allowed HTTP methods."', args=[d.arg(name='allowedMethods', type=d.T.array)]),
        withAllowedMethods(allowedMethods): { spec+: { http+: { cors+: { allowedMethods: if std.isArray(v=allowedMethods) then allowedMethods else [allowedMethods] } } } },
        '#withAllowedMethodsMixin':: d.fn(help='"List of allowed HTTP methods."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowedMethods', type=d.T.array)]),
        withAllowedMethodsMixin(allowedMethods): { spec+: { http+: { cors+: { allowedMethods+: if std.isArray(v=allowedMethods) then allowedMethods else [allowedMethods] } } } },
        '#withAllowedOrigins':: d.fn(help='"List of allowed origins. Java regular expressions can be used."', args=[d.arg(name='allowedOrigins', type=d.T.array)]),
        withAllowedOrigins(allowedOrigins): { spec+: { http+: { cors+: { allowedOrigins: if std.isArray(v=allowedOrigins) then allowedOrigins else [allowedOrigins] } } } },
        '#withAllowedOriginsMixin':: d.fn(help='"List of allowed origins. Java regular expressions can be used."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowedOrigins', type=d.T.array)]),
        withAllowedOriginsMixin(allowedOrigins): { spec+: { http+: { cors+: { allowedOrigins+: if std.isArray(v=allowedOrigins) then allowedOrigins else [allowedOrigins] } } } },
      },
      '#withPort':: d.fn(help='"The port which is the server listening on."', args=[d.arg(name='port', type=d.T.integer)]),
      withPort(port): { spec+: { http+: { port: port } } },
    },
    '#jvmOptions':: d.obj(help='"**Currently not supported** JVM Options for pods."'),
    jvmOptions: {
      '#javaSystemProperties':: d.obj(help='"A map of additional system properties which will be passed using the `-D` option to the JVM."'),
      javaSystemProperties: {
        '#withName':: d.fn(help='"The system property name."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withValue':: d.fn(help='"The system property value."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#withGcLoggingEnabled':: d.fn(help='"Specifies whether the Garbage Collection logging is enabled. The default is false."', args=[d.arg(name='gcLoggingEnabled', type=d.T.boolean)]),
      withGcLoggingEnabled(gcLoggingEnabled): { spec+: { jvmOptions+: { gcLoggingEnabled: gcLoggingEnabled } } },
      '#withJavaSystemProperties':: d.fn(help='"A map of additional system properties which will be passed using the `-D` option to the JVM."', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
      withJavaSystemProperties(javaSystemProperties): { spec+: { jvmOptions+: { javaSystemProperties: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } },
      '#withJavaSystemPropertiesMixin':: d.fn(help='"A map of additional system properties which will be passed using the `-D` option to the JVM."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='javaSystemProperties', type=d.T.array)]),
      withJavaSystemPropertiesMixin(javaSystemProperties): { spec+: { jvmOptions+: { javaSystemProperties+: if std.isArray(v=javaSystemProperties) then javaSystemProperties else [javaSystemProperties] } } },
      '#withXX':: d.fn(help='"A map of -XX options to the JVM."', args=[d.arg(name='_XX', type=d.T.object)]),
      withXX(_XX): { spec+: { jvmOptions+: { '-XX': _XX } } },
      '#withXXMixin':: d.fn(help='"A map of -XX options to the JVM."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='_XX', type=d.T.object)]),
      withXXMixin(_XX): { spec+: { jvmOptions+: { '-XX'+: _XX } } },
      '#withXms':: d.fn(help='"-Xms option to to the JVM."', args=[d.arg(name='_Xms', type=d.T.string)]),
      withXms(_Xms): { spec+: { jvmOptions+: { '-Xms': _Xms } } },
      '#withXmx':: d.fn(help='"-Xmx option to to the JVM."', args=[d.arg(name='_Xmx', type=d.T.string)]),
      withXmx(_Xmx): { spec+: { jvmOptions+: { '-Xmx': _Xmx } } },
    },
    '#livenessProbe':: d.obj(help='"Pod liveness checking."'),
    livenessProbe: {
      '#withFailureThreshold':: d.fn(help='"Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1."', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { spec+: { livenessProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='"The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0."', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { spec+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='"How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1."', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { spec+: { livenessProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='"Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1."', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { spec+: { livenessProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='"The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1."', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { spec+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#logging':: d.obj(help='"Logging configuration for Kafka Bridge."'),
    logging: {
      '#valueFrom':: d.obj(help='"`ConfigMap` entry where the logging configuration is stored. "'),
      valueFrom: {
        '#configMapKeyRef':: d.obj(help='"Reference to the key in the ConfigMap containing the configuration."'),
        configMapKeyRef: {
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { spec+: { logging+: { valueFrom+: { configMapKeyRef+: { key: key } } } } },
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { spec+: { logging+: { valueFrom+: { configMapKeyRef+: { name: name } } } } },
          '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
          withOptional(optional): { spec+: { logging+: { valueFrom+: { configMapKeyRef+: { optional: optional } } } } },
        },
      },
      '#withLoggers':: d.fn(help='"A Map from logger name to logger level."', args=[d.arg(name='loggers', type=d.T.object)]),
      withLoggers(loggers): { spec+: { logging+: { loggers: loggers } } },
      '#withLoggersMixin':: d.fn(help='"A Map from logger name to logger level."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='loggers', type=d.T.object)]),
      withLoggersMixin(loggers): { spec+: { logging+: { loggers+: loggers } } },
      '#withType':: d.fn(help="\"Logging type, must be either 'inline' or 'external'.\"", args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { logging+: { type: type } } },
    },
    '#producer':: d.obj(help='"Kafka producer related configuration."'),
    producer: {
      '#withConfig':: d.fn(help='"The Kafka producer configuration used for producer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols)."', args=[d.arg(name='config', type=d.T.object)]),
      withConfig(config): { spec+: { producer+: { config: config } } },
      '#withConfigMixin':: d.fn(help='"The Kafka producer configuration used for producer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='config', type=d.T.object)]),
      withConfigMixin(config): { spec+: { producer+: { config+: config } } },
    },
    '#readinessProbe':: d.obj(help='"Pod readiness checking."'),
    readinessProbe: {
      '#withFailureThreshold':: d.fn(help='"Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1."', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { spec+: { readinessProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='"The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0."', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { spec+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='"How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1."', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { spec+: { readinessProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='"Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1."', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { spec+: { readinessProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='"The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1."', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { spec+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#resources':: d.obj(help='"CPU and memory resources to reserve."'),
    resources: {
      '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
      withLimits(limits): { spec+: { resources+: { limits: limits } } },
      '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
      withLimitsMixin(limits): { spec+: { resources+: { limits+: limits } } },
      '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
      withRequests(requests): { spec+: { resources+: { requests: requests } } },
      '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
      withRequestsMixin(requests): { spec+: { resources+: { requests+: requests } } },
    },
    '#template':: d.obj(help='"Template for Kafka Bridge resources. The template allows users to specify how is the `Deployment` and `Pods` generated."'),
    template: {
      '#apiService':: d.obj(help='"Template for Kafka Bridge API `Service`."'),
      apiService: {
        '#metadata':: d.obj(help='"Metadata applied to the resource."'),
        metadata: {
          '#withAnnotations':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { template+: { apiService+: { metadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { template+: { apiService+: { metadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { template+: { apiService+: { metadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { template+: { apiService+: { metadata+: { labels+: labels } } } } },
        },
        '#withIpFamilies':: d.fn(help='"Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer."', args=[d.arg(name='ipFamilies', type=d.T.array)]),
        withIpFamilies(ipFamilies): { spec+: { template+: { apiService+: { ipFamilies: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } },
        '#withIpFamiliesMixin':: d.fn(help='"Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting. Available on Kubernetes 1.20 and newer."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipFamilies', type=d.T.array)]),
        withIpFamiliesMixin(ipFamilies): { spec+: { template+: { apiService+: { ipFamilies+: if std.isArray(v=ipFamilies) then ipFamilies else [ipFamilies] } } } },
        '#withIpFamilyPolicy':: d.fn(help='"Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type. Available on Kubernetes 1.20 and newer."', args=[d.arg(name='ipFamilyPolicy', type=d.T.string)]),
        withIpFamilyPolicy(ipFamilyPolicy): { spec+: { template+: { apiService+: { ipFamilyPolicy: ipFamilyPolicy } } } },
      },
      '#bridgeContainer':: d.obj(help='"Template for the Kafka Bridge container."'),
      bridgeContainer: {
        '#env':: d.obj(help='"Environment variables which should be applied to the container."'),
        env: {
          '#withName':: d.fn(help='"The environment variable key."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withValue':: d.fn(help='"The environment variable value."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#securityContext':: d.obj(help='"Security context for the container."'),
        securityContext: {
          '#capabilities':: d.obj(help=''),
          capabilities: {
            '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
            withAdd(add): { spec+: { template+: { bridgeContainer+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } } } },
            '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
            withAddMixin(add): { spec+: { template+: { bridgeContainer+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } } } },
            '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
            withDrop(drop): { spec+: { template+: { bridgeContainer+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } } } },
            '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
            withDropMixin(drop): { spec+: { template+: { bridgeContainer+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } } } },
          },
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { spec+: { template+: { bridgeContainer+: { securityContext+: { seLinuxOptions+: { level: level } } } } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { spec+: { template+: { bridgeContainer+: { securityContext+: { seLinuxOptions+: { role: role } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { template+: { bridgeContainer+: { securityContext+: { seLinuxOptions+: { type: type } } } } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { spec+: { template+: { bridgeContainer+: { securityContext+: { seLinuxOptions+: { user: user } } } } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { spec+: { template+: { bridgeContainer+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { template+: { bridgeContainer+: { securityContext+: { seccompProfile+: { type: type } } } } } },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { template+: { bridgeContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { template+: { bridgeContainer+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } },
            '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
            withHostProcess(hostProcess): { spec+: { template+: { bridgeContainer+: { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } } } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { spec+: { template+: { bridgeContainer+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } },
          },
          '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
          withAllowPrivilegeEscalation(allowPrivilegeEscalation): { spec+: { template+: { bridgeContainer+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } } } },
          '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
          withPrivileged(privileged): { spec+: { template+: { bridgeContainer+: { securityContext+: { privileged: privileged } } } } },
          '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
          withProcMount(procMount): { spec+: { template+: { bridgeContainer+: { securityContext+: { procMount: procMount } } } } },
          '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
          withReadOnlyRootFilesystem(readOnlyRootFilesystem): { spec+: { template+: { bridgeContainer+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } } } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { spec+: { template+: { bridgeContainer+: { securityContext+: { runAsGroup: runAsGroup } } } } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { spec+: { template+: { bridgeContainer+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { spec+: { template+: { bridgeContainer+: { securityContext+: { runAsUser: runAsUser } } } } },
        },
        '#withEnv':: d.fn(help='"Environment variables which should be applied to the container."', args=[d.arg(name='env', type=d.T.array)]),
        withEnv(env): { spec+: { template+: { bridgeContainer+: { env: if std.isArray(v=env) then env else [env] } } } },
        '#withEnvMixin':: d.fn(help='"Environment variables which should be applied to the container."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
        withEnvMixin(env): { spec+: { template+: { bridgeContainer+: { env+: if std.isArray(v=env) then env else [env] } } } },
      },
      '#deployment':: d.obj(help='"Template for Kafka Bridge `Deployment`."'),
      deployment: {
        '#metadata':: d.obj(help='"Metadata applied to the resource."'),
        metadata: {
          '#withAnnotations':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { template+: { deployment+: { metadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { template+: { deployment+: { metadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { template+: { deployment+: { metadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { template+: { deployment+: { metadata+: { labels+: labels } } } } },
        },
        '#withDeploymentStrategy':: d.fn(help='"DeploymentStrategy which will be used for this Deployment. Valid values are `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`."', args=[d.arg(name='deploymentStrategy', type=d.T.string)]),
        withDeploymentStrategy(deploymentStrategy): { spec+: { template+: { deployment+: { deploymentStrategy: deploymentStrategy } } } },
      },
      '#pod':: d.obj(help='"Template for Kafka Bridge `Pods`."'),
      pod: {
        '#affinity':: d.obj(help="\"The pod's affinity rules.\""),
        affinity: {
          '#nodeAffinity':: d.obj(help=''),
          nodeAffinity: {
            '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            preferredDuringSchedulingIgnoredDuringExecution: {
              '#preference':: d.obj(help=''),
              preference: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#matchFields':: d.obj(help=''),
                matchFields: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { preference+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { preference+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFields(matchFields): { preference+: { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
                '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFieldsMixin(matchFields): { preference+: { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] } },
              },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            requiredDuringSchedulingIgnoredDuringExecution: {
              '#nodeSelectorTerms':: d.obj(help=''),
              nodeSelectorTerms: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#matchFields':: d.obj(help=''),
                matchFields: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] },
                '#withMatchFields':: d.fn(help='', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFields(matchFields): { matchFields: if std.isArray(v=matchFields) then matchFields else [matchFields] },
                '#withMatchFieldsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchFields', type=d.T.array)]),
                withMatchFieldsMixin(matchFields): { matchFields+: if std.isArray(v=matchFields) then matchFields else [matchFields] },
              },
              '#withNodeSelectorTerms':: d.fn(help='', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
              withNodeSelectorTerms(nodeSelectorTerms): { spec+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } },
              '#withNodeSelectorTermsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
              withNodeSelectorTermsMixin(nodeSelectorTerms): { spec+: { template+: { pod+: { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } } } } },
            },
            '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
          },
          '#podAffinity':: d.obj(help=''),
          podAffinity: {
            '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            preferredDuringSchedulingIgnoredDuringExecution: {
              '#podAffinityTerm':: d.obj(help=''),
              podAffinityTerm: {
                '#labelSelector':: d.obj(help=''),
                labelSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                },
                '#namespaceSelector':: d.obj(help=''),
                namespaceSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                },
                '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
              },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            requiredDuringSchedulingIgnoredDuringExecution: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
              },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { topologyKey: topologyKey },
            },
            '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
          },
          '#podAntiAffinity':: d.obj(help=''),
          podAntiAffinity: {
            '#preferredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            preferredDuringSchedulingIgnoredDuringExecution: {
              '#podAffinityTerm':: d.obj(help=''),
              podAffinityTerm: {
                '#labelSelector':: d.obj(help=''),
                labelSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { labelSelector+: { matchLabels+: matchLabels } } },
                },
                '#namespaceSelector':: d.obj(help=''),
                namespaceSelector: {
                  '#matchExpressions':: d.obj(help=''),
                  matchExpressions: {
                    '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                    withKey(key): { key: key },
                    '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                    withOperator(operator): { operator: operator },
                    '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                    withValues(values): { values: if std.isArray(v=values) then values else [values] },
                    '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                    withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                  },
                  '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressions(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                  withMatchExpressionsMixin(matchExpressions): { podAffinityTerm+: { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } } },
                  '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabels(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels: matchLabels } } },
                  '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                  withMatchLabelsMixin(matchLabels): { podAffinityTerm+: { namespaceSelector+: { matchLabels+: matchLabels } } },
                },
                '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespaces(namespaces): { podAffinityTerm+: { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
                withNamespacesMixin(namespaces): { podAffinityTerm+: { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] } },
                '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
                withTopologyKey(topologyKey): { podAffinityTerm+: { topologyKey: topologyKey } },
              },
              '#withWeight':: d.fn(help='', args=[d.arg(name='weight', type=d.T.integer)]),
              withWeight(weight): { weight: weight },
            },
            '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help=''),
            requiredDuringSchedulingIgnoredDuringExecution: {
              '#labelSelector':: d.obj(help=''),
              labelSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
              },
              '#namespaceSelector':: d.obj(help=''),
              namespaceSelector: {
                '#matchExpressions':: d.obj(help=''),
                matchExpressions: {
                  '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
                  withKey(key): { key: key },
                  '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
                  withOperator(operator): { operator: operator },
                  '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
                  withValues(values): { values: if std.isArray(v=values) then values else [values] },
                  '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
                  withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
                },
                '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressions(matchExpressions): { namespaceSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
                withMatchExpressionsMixin(matchExpressions): { namespaceSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
                '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabels(matchLabels): { namespaceSelector+: { matchLabels: matchLabels } },
                '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
                withMatchLabelsMixin(matchLabels): { namespaceSelector+: { matchLabels+: matchLabels } },
              },
              '#withNamespaces':: d.fn(help='', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespaces(namespaces): { namespaces: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withNamespacesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='namespaces', type=d.T.array)]),
              withNamespacesMixin(namespaces): { namespaces+: if std.isArray(v=namespaces) then namespaces else [namespaces] },
              '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
              withTopologyKey(topologyKey): { topologyKey: topologyKey },
            },
            '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
            '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
            withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { spec+: { template+: { pod+: { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } } } } },
          },
        },
        '#hostAliases':: d.obj(help="\"The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\""),
        hostAliases: {
          '#withHostnames':: d.fn(help='', args=[d.arg(name='hostnames', type=d.T.array)]),
          withHostnames(hostnames): { hostnames: if std.isArray(v=hostnames) then hostnames else [hostnames] },
          '#withHostnamesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostnames', type=d.T.array)]),
          withHostnamesMixin(hostnames): { hostnames+: if std.isArray(v=hostnames) then hostnames else [hostnames] },
          '#withIp':: d.fn(help='', args=[d.arg(name='ip', type=d.T.string)]),
          withIp(ip): { ip: ip },
        },
        '#imagePullSecrets':: d.obj(help='"List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored."'),
        imagePullSecrets: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#metadata':: d.obj(help='"Metadata applied to the resource."'),
        metadata: {
          '#withAnnotations':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { template+: { pod+: { metadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { template+: { pod+: { metadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { template+: { pod+: { metadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { template+: { pod+: { metadata+: { labels+: labels } } } } },
        },
        '#securityContext':: d.obj(help='"Configures pod-level security attributes and common container settings."'),
        securityContext: {
          '#seLinuxOptions':: d.obj(help=''),
          seLinuxOptions: {
            '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
            withLevel(level): { spec+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { level: level } } } } } },
            '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
            withRole(role): { spec+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { role: role } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { type: type } } } } } },
            '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
            withUser(user): { spec+: { template+: { pod+: { securityContext+: { seLinuxOptions+: { user: user } } } } } },
          },
          '#seccompProfile':: d.obj(help=''),
          seccompProfile: {
            '#withLocalhostProfile':: d.fn(help='', args=[d.arg(name='localhostProfile', type=d.T.string)]),
            withLocalhostProfile(localhostProfile): { spec+: { template+: { pod+: { securityContext+: { seccompProfile+: { localhostProfile: localhostProfile } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { spec+: { template+: { pod+: { securityContext+: { seccompProfile+: { type: type } } } } } },
          },
          '#sysctls':: d.obj(help=''),
          sysctls: {
            '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { name: name },
            '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#windowsOptions':: d.obj(help=''),
          windowsOptions: {
            '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
            withGmsaCredentialSpec(gmsaCredentialSpec): { spec+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } } } },
            '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
            withGmsaCredentialSpecName(gmsaCredentialSpecName): { spec+: { template+: { pod+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } } } },
            '#withHostProcess':: d.fn(help='', args=[d.arg(name='hostProcess', type=d.T.boolean)]),
            withHostProcess(hostProcess): { spec+: { template+: { pod+: { securityContext+: { windowsOptions+: { hostProcess: hostProcess } } } } } },
            '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
            withRunAsUserName(runAsUserName): { spec+: { template+: { pod+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } } } },
          },
          '#withFsGroup':: d.fn(help='', args=[d.arg(name='fsGroup', type=d.T.integer)]),
          withFsGroup(fsGroup): { spec+: { template+: { pod+: { securityContext+: { fsGroup: fsGroup } } } } },
          '#withFsGroupChangePolicy':: d.fn(help='', args=[d.arg(name='fsGroupChangePolicy', type=d.T.string)]),
          withFsGroupChangePolicy(fsGroupChangePolicy): { spec+: { template+: { pod+: { securityContext+: { fsGroupChangePolicy: fsGroupChangePolicy } } } } },
          '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.integer)]),
          withRunAsGroup(runAsGroup): { spec+: { template+: { pod+: { securityContext+: { runAsGroup: runAsGroup } } } } },
          '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
          withRunAsNonRoot(runAsNonRoot): { spec+: { template+: { pod+: { securityContext+: { runAsNonRoot: runAsNonRoot } } } } },
          '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.integer)]),
          withRunAsUser(runAsUser): { spec+: { template+: { pod+: { securityContext+: { runAsUser: runAsUser } } } } },
          '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
          withSupplementalGroups(supplementalGroups): { spec+: { template+: { pod+: { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } },
          '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
          withSupplementalGroupsMixin(supplementalGroups): { spec+: { template+: { pod+: { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } } } } },
          '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
          withSysctls(sysctls): { spec+: { template+: { pod+: { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } },
          '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
          withSysctlsMixin(sysctls): { spec+: { template+: { pod+: { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } } } } },
        },
        '#tolerations':: d.obj(help="\"The pod's tolerations.\""),
        tolerations: {
          '#withEffect':: d.fn(help='', args=[d.arg(name='effect', type=d.T.string)]),
          withEffect(effect): { effect: effect },
          '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { key: key },
          '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
          withOperator(operator): { operator: operator },
          '#withTolerationSeconds':: d.fn(help='', args=[d.arg(name='tolerationSeconds', type=d.T.integer)]),
          withTolerationSeconds(tolerationSeconds): { tolerationSeconds: tolerationSeconds },
          '#withValue':: d.fn(help='', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#topologySpreadConstraints':: d.obj(help="\"The pod's topology spread constraints.\""),
        topologySpreadConstraints: {
          '#labelSelector':: d.obj(help=''),
          labelSelector: {
            '#matchExpressions':: d.obj(help=''),
            matchExpressions: {
              '#withKey':: d.fn(help='', args=[d.arg(name='key', type=d.T.string)]),
              withKey(key): { key: key },
              '#withOperator':: d.fn(help='', args=[d.arg(name='operator', type=d.T.string)]),
              withOperator(operator): { operator: operator },
              '#withValues':: d.fn(help='', args=[d.arg(name='values', type=d.T.array)]),
              withValues(values): { values: if std.isArray(v=values) then values else [values] },
              '#withValuesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='values', type=d.T.array)]),
              withValuesMixin(values): { values+: if std.isArray(v=values) then values else [values] },
            },
            '#withMatchExpressions':: d.fn(help='', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressions(matchExpressions): { labelSelector+: { matchExpressions: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchExpressionsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchExpressions', type=d.T.array)]),
            withMatchExpressionsMixin(matchExpressions): { labelSelector+: { matchExpressions+: if std.isArray(v=matchExpressions) then matchExpressions else [matchExpressions] } },
            '#withMatchLabels':: d.fn(help='', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { labelSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { labelSelector+: { matchLabels+: matchLabels } },
          },
          '#withMaxSkew':: d.fn(help='', args=[d.arg(name='maxSkew', type=d.T.integer)]),
          withMaxSkew(maxSkew): { maxSkew: maxSkew },
          '#withTopologyKey':: d.fn(help='', args=[d.arg(name='topologyKey', type=d.T.string)]),
          withTopologyKey(topologyKey): { topologyKey: topologyKey },
          '#withWhenUnsatisfiable':: d.fn(help='', args=[d.arg(name='whenUnsatisfiable', type=d.T.string)]),
          withWhenUnsatisfiable(whenUnsatisfiable): { whenUnsatisfiable: whenUnsatisfiable },
        },
        '#withEnableServiceLinks':: d.fn(help="\"Indicates whether information about services should be injected into Pod's environment variables.\"", args=[d.arg(name='enableServiceLinks', type=d.T.boolean)]),
        withEnableServiceLinks(enableServiceLinks): { spec+: { template+: { pod+: { enableServiceLinks: enableServiceLinks } } } },
        '#withHostAliases':: d.fn(help="\"The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\"", args=[d.arg(name='hostAliases', type=d.T.array)]),
        withHostAliases(hostAliases): { spec+: { template+: { pod+: { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } },
        '#withHostAliasesMixin':: d.fn(help="\"The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='hostAliases', type=d.T.array)]),
        withHostAliasesMixin(hostAliases): { spec+: { template+: { pod+: { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] } } } },
        '#withImagePullSecrets':: d.fn(help='"List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored."', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecrets(imagePullSecrets): { spec+: { template+: { pod+: { imagePullSecrets: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withImagePullSecretsMixin':: d.fn(help='"List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='imagePullSecrets', type=d.T.array)]),
        withImagePullSecretsMixin(imagePullSecrets): { spec+: { template+: { pod+: { imagePullSecrets+: if std.isArray(v=imagePullSecrets) then imagePullSecrets else [imagePullSecrets] } } } },
        '#withPriorityClassName':: d.fn(help='"The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}."', args=[d.arg(name='priorityClassName', type=d.T.string)]),
        withPriorityClassName(priorityClassName): { spec+: { template+: { pod+: { priorityClassName: priorityClassName } } } },
        '#withSchedulerName':: d.fn(help='"The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used."', args=[d.arg(name='schedulerName', type=d.T.string)]),
        withSchedulerName(schedulerName): { spec+: { template+: { pod+: { schedulerName: schedulerName } } } },
        '#withTerminationGracePeriodSeconds':: d.fn(help='"The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds."', args=[d.arg(name='terminationGracePeriodSeconds', type=d.T.integer)]),
        withTerminationGracePeriodSeconds(terminationGracePeriodSeconds): { spec+: { template+: { pod+: { terminationGracePeriodSeconds: terminationGracePeriodSeconds } } } },
        '#withTmpDirSizeLimit':: d.fn(help='"Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`). Default value is `1Mi`."', args=[d.arg(name='tmpDirSizeLimit', type=d.T.string)]),
        withTmpDirSizeLimit(tmpDirSizeLimit): { spec+: { template+: { pod+: { tmpDirSizeLimit: tmpDirSizeLimit } } } },
        '#withTolerations':: d.fn(help="\"The pod's tolerations.\"", args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerations(tolerations): { spec+: { template+: { pod+: { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
        '#withTolerationsMixin':: d.fn(help="\"The pod's tolerations.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='tolerations', type=d.T.array)]),
        withTolerationsMixin(tolerations): { spec+: { template+: { pod+: { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] } } } },
        '#withTopologySpreadConstraints':: d.fn(help="\"The pod's topology spread constraints.\"", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
        withTopologySpreadConstraints(topologySpreadConstraints): { spec+: { template+: { pod+: { topologySpreadConstraints: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } },
        '#withTopologySpreadConstraintsMixin':: d.fn(help="\"The pod's topology spread constraints.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='topologySpreadConstraints', type=d.T.array)]),
        withTopologySpreadConstraintsMixin(topologySpreadConstraints): { spec+: { template+: { pod+: { topologySpreadConstraints+: if std.isArray(v=topologySpreadConstraints) then topologySpreadConstraints else [topologySpreadConstraints] } } } },
      },
      '#podDisruptionBudget':: d.obj(help='"Template for Kafka Bridge `PodDisruptionBudget`."'),
      podDisruptionBudget: {
        '#metadata':: d.obj(help='"Metadata to apply to the `PodDisruptionBudgetTemplate` resource."'),
        metadata: {
          '#withAnnotations':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { template+: { podDisruptionBudget+: { metadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { template+: { podDisruptionBudget+: { metadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { template+: { podDisruptionBudget+: { metadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { template+: { podDisruptionBudget+: { metadata+: { labels+: labels } } } } },
        },
        '#withMaxUnavailable':: d.fn(help='"Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1."', args=[d.arg(name='maxUnavailable', type=d.T.integer)]),
        withMaxUnavailable(maxUnavailable): { spec+: { template+: { podDisruptionBudget+: { maxUnavailable: maxUnavailable } } } },
      },
      '#serviceAccount':: d.obj(help='"Template for the Kafka Bridge service account."'),
      serviceAccount: {
        '#metadata':: d.obj(help='"Metadata applied to the resource."'),
        metadata: {
          '#withAnnotations':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotations(annotations): { spec+: { template+: { serviceAccount+: { metadata+: { annotations: annotations } } } } },
          '#withAnnotationsMixin':: d.fn(help='"Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
          withAnnotationsMixin(annotations): { spec+: { template+: { serviceAccount+: { metadata+: { annotations+: annotations } } } } },
          '#withLabels':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { spec+: { template+: { serviceAccount+: { metadata+: { labels: labels } } } } },
          '#withLabelsMixin':: d.fn(help='"Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { spec+: { template+: { serviceAccount+: { metadata+: { labels+: labels } } } } },
        },
      },
    },
    '#tls':: d.obj(help='"TLS configuration for connecting Kafka Bridge to the cluster."'),
    tls: {
      '#trustedCertificates':: d.obj(help='"Trusted certificates for TLS connection."'),
      trustedCertificates: {
        '#withCertificate':: d.fn(help='"The name of the file certificate in the Secret."', args=[d.arg(name='certificate', type=d.T.string)]),
        withCertificate(certificate): { certificate: certificate },
        '#withSecretName':: d.fn(help='"The name of the Secret containing the certificate."', args=[d.arg(name='secretName', type=d.T.string)]),
        withSecretName(secretName): { secretName: secretName },
      },
      '#withTrustedCertificates':: d.fn(help='"Trusted certificates for TLS connection."', args=[d.arg(name='trustedCertificates', type=d.T.array)]),
      withTrustedCertificates(trustedCertificates): { spec+: { tls+: { trustedCertificates: if std.isArray(v=trustedCertificates) then trustedCertificates else [trustedCertificates] } } },
      '#withTrustedCertificatesMixin':: d.fn(help='"Trusted certificates for TLS connection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='trustedCertificates', type=d.T.array)]),
      withTrustedCertificatesMixin(trustedCertificates): { spec+: { tls+: { trustedCertificates+: if std.isArray(v=trustedCertificates) then trustedCertificates else [trustedCertificates] } } },
    },
    '#tracing':: d.obj(help='"The configuration of tracing in Kafka Bridge."'),
    tracing: {
      '#withType':: d.fn(help='"Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { tracing+: { type: type } } },
    },
    '#withBootstrapServers':: d.fn(help='"A list of host:port pairs for establishing the initial connection to the Kafka cluster."', args=[d.arg(name='bootstrapServers', type=d.T.string)]),
    withBootstrapServers(bootstrapServers): { spec+: { bootstrapServers: bootstrapServers } },
    '#withEnableMetrics':: d.fn(help='"Enable the metrics for the Kafka Bridge. Default is false."', args=[d.arg(name='enableMetrics', type=d.T.boolean)]),
    withEnableMetrics(enableMetrics): { spec+: { enableMetrics: enableMetrics } },
    '#withImage':: d.fn(help='"The docker image for the pods."', args=[d.arg(name='image', type=d.T.string)]),
    withImage(image): { spec+: { image: image } },
    '#withReplicas':: d.fn(help='"The number of pods in the `Deployment`."', args=[d.arg(name='replicas', type=d.T.integer)]),
    withReplicas(replicas): { spec+: { replicas: replicas } },
  },
  '#mixin': 'ignore',
  mixin: self,
}
